// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace TestDataStore
{
    /// <summary>
    ///This is a test class for Composestar.DataStore.LanguageModel.MethodInfo and is intended
    ///to contain all Composestar.DataStore.LanguageModel.MethodInfo Unit Tests
    ///</summary>
    [TestClass()]
    public class MethodInfoFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Calls
        ///</summary>
        [TestMethod()]
        public void CallsTest()
        {
            global::Composestar.DataStore.LanguageModel.MethodInfo target = new global::Composestar.DataStore.LanguageModel.MethodInfo();

            global::System.Collections.IList val = null; // TODO: Assign to an appropriate value for the property

            target.Calls = val;


            CollectionAssert.AreEqual(val, target.Calls, "Composestar.DataStore.LanguageModel.MethodInfo.Calls was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Name
        ///</summary>
        [TestMethod()]
        public void NameTest()
        {
            global::Composestar.DataStore.LanguageModel.MethodInfo target = new global::Composestar.DataStore.LanguageModel.MethodInfo();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Name = val;


            Assert.AreEqual(val, target.Name, "Composestar.DataStore.LanguageModel.MethodInfo.Name was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Parameters
        ///</summary>
        [TestMethod()]
        public void ParametersTest()
        {
            global::Composestar.DataStore.LanguageModel.MethodInfo target = new global::Composestar.DataStore.LanguageModel.MethodInfo();

            global::System.Collections.IList val = null; // TODO: Assign to an appropriate value for the property

            target.Parameters = val;


            CollectionAssert.AreEqual(val, target.Parameters, "Composestar.DataStore.LanguageModel.MethodInfo.Parameters was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ReturnType
        ///</summary>
        [TestMethod()]
        public void ReturnTypeTest()
        {
            global::Composestar.DataStore.LanguageModel.MethodInfo target = new global::Composestar.DataStore.LanguageModel.MethodInfo();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.ReturnType = val;


            Assert.AreEqual(val, target.ReturnType, "Composestar.DataStore.LanguageModel.MethodInfo.ReturnType was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

      

    }


}
