// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace TestDataStore
{
    /// <summary>
    ///This is a test class for Composestar.DataStore.DataStoreContainer and is intended
    ///to contain all Composestar.DataStore.DataStoreContainer Unit Tests
    ///</summary>
    [TestClass()]
    public class DataStoreContainerFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ~DataStoreContainer ()
        ///</summary>
        [TestMethod()]
        public void FinalizerTest()
        {
            // Unit Test Generation Error: Finalizers and destructors are not called directly from automatic test generation.
            Assert.Fail("Unit Test Generation Error: Finalizers and destructors are not called directly fr" +
                    "om automatic test generation.");
        }

        /// <summary>
        ///A test for AddType (Composestar.DataStore.LanguageModel.TypeInfo)
        ///</summary>
        [TestMethod()]
        public void AddTypeTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            global::Composestar.DataStore.LanguageModel.TypeInfo typeinfo = null; // TODO: Initialize to an appropriate value

            target.AddType(typeinfo);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Close ()
        ///</summary>
        [TestMethod()]
        public void CloseTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            target.Close();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ContainsType (string)
        ///</summary>
        [TestMethod()]
        public void ContainsTypeTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            string fullname = null; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = target.ContainsType(fullname);

            Assert.AreEqual(expected, actual, "Composestar.DataStore.DataStoreContainer.ContainsType did not return the expected" +
                    " value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for DataStoreContainer ()
        ///</summary>
        [DeploymentItem("DataStore.dll")]
        [TestMethod()]
        public void ConstructorTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for GetObjectContainer ()
        ///</summary>
        [TestMethod()]
        public void GetObjectContainerTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            global::com.db4o.ObjectContainer expected = null;
            global::com.db4o.ObjectContainer actual;

            actual = target.GetObjectContainer();

            Assert.AreEqual(expected, actual, "Composestar.DataStore.DataStoreContainer.GetObjectContainer did not return the ex" +
                    "pected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetType (string)
        ///</summary>
        [TestMethod()]
        public void GetTypeTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            string fullname = null; // TODO: Initialize to an appropriate value

            global::Composestar.DataStore.LanguageModel.TypeInfo expected = null;
            global::Composestar.DataStore.LanguageModel.TypeInfo actual;

            actual = target.GetType(fullname);

            Assert.AreEqual(expected, actual, "Composestar.DataStore.DataStoreContainer.GetType did not return the expected valu" +
                    "e.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetTypeEnumerator ()
        ///</summary>
        [TestMethod()]
        public void GetTypeEnumeratorTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            System.Collections.Generic.IEnumerator<Composestar.DataStore.LanguageModel.TypeInfo> expected = null;
            System.Collections.Generic.IEnumerator<Composestar.DataStore.LanguageModel.TypeInfo> actual;

            actual = target.GetTypeEnumerator();

            Assert.AreEqual(expected, actual, "Composestar.DataStore.DataStoreContainer.GetTypeEnumerator did not return the exp" +
                    "ected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Instance
        ///</summary>
        [TestMethod()]
        public void InstanceTest()
        {
            global::Composestar.DataStore.DataStoreContainer val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, Composestar.DataStore.DataStoreContainer.Instance, "Composestar.DataStore.DataStoreContainer.Instance was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Open ()
        ///</summary>
        [TestMethod()]
        public void OpenTest()
        {
            global::Composestar.DataStore.DataStoreContainer target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            target.Open();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ~Object ()
        ///</summary>
        [TestMethod()]
        public void FinalizerTest1()
        {
            // Unit Test Generation Error: Finalizers and destructors are not called directly from automatic test generation.
            Assert.Fail("Unit Test Generation Error: Finalizers and destructors are not called directly fr" +
                    "om automatic test generation.");
        }

        /// <summary>
        ///A test for Equals (object)
        ///</summary>
        [TestMethod()]
        public void EqualsTest()
        {
            object target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            object obj = null; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = target.Equals(obj);

            Assert.AreEqual(expected, actual, "System.Object.Equals did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Equals (object, object)
        ///</summary>
        [TestMethod()]
        public void EqualsTest1()
        {
            object objA = null; // TODO: Initialize to an appropriate value

            object objB = null; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = object.Equals(objA, objB);

            Assert.AreEqual(expected, actual, "System.Object.Equals did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetHashCode ()
        ///</summary>
        [TestMethod()]
        public void GetHashCodeTest()
        {
            object target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            int expected = 0;
            int actual;

            actual = target.GetHashCode();

            Assert.AreEqual(expected, actual, "System.Object.GetHashCode did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetType ()
        ///</summary>
        [TestMethod()]
        public void GetTypeTest1()
        {
            object target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            global::System.Type expected = null;
            global::System.Type actual;

            actual = target.GetType();

            Assert.AreEqual(expected, actual, "System.Object.GetType did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for MemberwiseClone ()
        ///</summary>
        [TestMethod()]
        public void MemberwiseCloneTest()
        {
            object target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            global::TestDataStore.System_ObjectAccessor accessor = new global::TestDataStore.System_ObjectAccessor(target);

            object expected = null;
            object actual;

            actual = accessor.MemberwiseClone();

            Assert.AreEqual(expected, actual, "System.Object.MemberwiseClone did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ReferenceEquals (object, object)
        ///</summary>
        [TestMethod()]
        public void ReferenceEqualsTest()
        {
            object objA = null; // TODO: Initialize to an appropriate value

            object objB = null; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = object.ReferenceEquals(objA, objB);

            Assert.AreEqual(expected, actual, "System.Object.ReferenceEquals did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ToString ()
        ///</summary>
        [TestMethod()]
        public void ToStringTest()
        {
            object target = global::TestDataStore.Composestar_DataStore_DataStoreContainerAccessor.CreatePrivate();

            string expected = null;
            string actual;

            actual = target.ToString();

            Assert.AreEqual(expected, actual, "System.Object.ToString did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
