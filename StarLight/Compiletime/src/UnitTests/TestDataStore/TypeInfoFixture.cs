// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace TestDataStore
{
    /// <summary>
    ///This is a test class for Composestar.DataStore.LanguageModel.TypeInfo and is intended
    ///to contain all Composestar.DataStore.LanguageModel.TypeInfo Unit Tests
    ///</summary>
    [TestClass()]
    public class TypeInfoFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Assembly
        ///</summary>
        [TestMethod()]
        public void AssemblyTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            global::Composestar.DataStore.LanguageModel.AssemblyInfo val = null; // TODO: Assign to an appropriate value for the property

            target.Assembly = val;


            Assert.AreEqual(val, target.Assembly, "Composestar.DataStore.LanguageModel.TypeInfo.Assembly was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for BaseType
        ///</summary>
        [TestMethod()]
        public void BaseTypeTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.BaseType = val;


            Assert.AreEqual(val, target.BaseType, "Composestar.DataStore.LanguageModel.TypeInfo.BaseType was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FullName
        ///</summary>
        [TestMethod()]
        public void FullNameTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.FullName = val;


            Assert.AreEqual(val, target.FullName, "Composestar.DataStore.LanguageModel.TypeInfo.FullName was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetMethodEnumerator ()
        ///</summary>
        [TestMethod()]
        public void GetMethodEnumeratorTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            System.Collections.Generic.IEnumerator<Composestar.DataStore.LanguageModel.MethodInfo> expected = null;
            System.Collections.Generic.IEnumerator<Composestar.DataStore.LanguageModel.MethodInfo> actual;

            actual = target.GetMethodEnumerator();

            Assert.AreEqual(expected, actual, "Composestar.DataStore.LanguageModel.TypeInfo.GetMethodEnumerator did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsAbstract
        ///</summary>
        [TestMethod()]
        public void IsAbstractTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsAbstract = val;


            Assert.AreEqual(val, target.IsAbstract, "Composestar.DataStore.LanguageModel.TypeInfo.IsAbstract was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsEnum
        ///</summary>
        [TestMethod()]
        public void IsEnumTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsEnum = val;


            Assert.AreEqual(val, target.IsEnum, "Composestar.DataStore.LanguageModel.TypeInfo.IsEnum was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsInterface
        ///</summary>
        [TestMethod()]
        public void IsInterfaceTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsInterface = val;


            Assert.AreEqual(val, target.IsInterface, "Composestar.DataStore.LanguageModel.TypeInfo.IsInterface was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsSealed
        ///</summary>
        [TestMethod()]
        public void IsSealedTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsSealed = val;


            Assert.AreEqual(val, target.IsSealed, "Composestar.DataStore.LanguageModel.TypeInfo.IsSealed was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsValueType
        ///</summary>
        [TestMethod()]
        public void IsValueTypeTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsValueType = val;


            Assert.AreEqual(val, target.IsValueType, "Composestar.DataStore.LanguageModel.TypeInfo.IsValueType was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for MethodCount ()
        ///</summary>
        [TestMethod()]
        public void MethodCountTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            int expected = 0;
            int actual;

            actual = target.MethodCount();

            Assert.AreEqual(expected, actual, "Composestar.DataStore.LanguageModel.TypeInfo.MethodCount did not return the expec" +
                    "ted value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Methods
        ///</summary>
        [TestMethod()]
        public void MethodsTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            global::System.Collections.IList val = null; // TODO: Assign to an appropriate value for the property

            target.Methods = val;


            CollectionAssert.AreEqual(val, target.Methods, "Composestar.DataStore.LanguageModel.TypeInfo.Methods was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Name
        ///</summary>
        [TestMethod()]
        public void NameTest()
        {
            global::Composestar.DataStore.LanguageModel.TypeInfo target = new global::Composestar.DataStore.LanguageModel.TypeInfo();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Name = val;


            Assert.AreEqual(val, target.Name, "Composestar.DataStore.LanguageModel.TypeInfo.Name was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

      

    }


}
