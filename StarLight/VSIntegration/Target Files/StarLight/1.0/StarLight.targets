<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Weave">
  <!--Import the standards targets-->
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

  <!--Reference the assembly where our tasks are defined-->
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.XMLGeneratorTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.MasterCallerTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.AnalyzerTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.ILWeaverTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />

  <!--
    ============================================================
                                        Weave

    The main build entry point.
    ============================================================
    -->
  <PropertyGroup>
    <WeaveDependsOn>
      BeforeWeave;
      CoreWeave;
      AfterWeave
    </WeaveDependsOn>
  </PropertyGroup>
  <Target
      Name="Weave"
      Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
    Outputs="$(TargetPath)"  
    DependsOnTargets="$(WeaveDependsOn)"
      />
  <!--
    ============================================================
                                        BeforeWeave
    
    Redefine this target in your project in order to run tasks just before Weave
    ============================================================
    -->
  <Target Name="BeforeWeave"/>

  <!--
    ============================================================
                                        AfterWeave

    Redefine this target in your project in order to run tasks just after Weave 
    ============================================================
    -->
  <Target Name="AfterWeave"/>

  <!--
    ============================================================
                                        CoreWeave

    The core build step calls each of the weave targets.
    ============================================================
    -->
  <PropertyGroup>
    <CoreWeaveDependsOn>
      PrepareForBuild;
      ResolveReferences;
      CopyFilesToOutputDirectory;
      ILAnalyzerRunner;
      MasterCaller;
      ILWeaverRunner;
      IncrementalClean;
    </CoreWeaveDependsOn>
  </PropertyGroup>
  <Target
      Name="CoreWeave"
      DependsOnTargets="$(CoreWeaveDependsOn)">
    <OnError ExecuteTargets="_TimeStampAfterCompile;PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
    <OnError ExecuteTargets="_CleanRecordFileWrites"/>
  </Target>

  <PropertyGroup>
    <!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
    <DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
    <DebugType    Condition=" '$(DebugType)' == 'none' "></DebugType>

    <!-- Provide a facility to override UseHostCompilerIfAvailable-->
    <UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>
  </PropertyGroup>

  <!-- Override the GetCopyToOutputDirectoryItems target -->
  <Target
        Name="GetCopyToOutputDirectoryItems"
        Outputs="@(AllItemsFullPathWithTargetPath)" 
        DependsOnTargets="AssignTargetPaths;_SplitProjectReferencesByFileExistence">

    <!-- Get items from child projects first. -->
    <Message Text ="Retrieving reference files" />
    <MSBuild
        Projects="@(_MSBuildProjectReferenceExistent)"
        Targets="GetCopyToOutputDirectoryItems"
        Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
        Condition="'@(_MSBuildProjectReferenceExistent)'!=''">
      <Output TaskParameter="TargetOutputs" ItemName="_AllChildProjectItemsWithTargetPath"/>
    </MSBuild>

    <!-- Target outputs must be full paths because they will be consumed by a different project. -->
    <CreateItem 
        Include="@(_AllChildProjectItemsWithTargetPath->'%(FullPath)')"
        Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"
                >
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectoryAlways"
              Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectory"
              Condition="'%(_AllChildProjectItemsWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>

    <!-- Get items from this project last so that they will be copied last. -->
    <CreateItem
        Include="@(ContentWithTargetPath->'%(FullPath)')"
        Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'">
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectoryAlways"
              Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectory"
              Condition="'%(ContentWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>

    <CreateItem
        Include="@(_EmbeddedResourceWithTargetPath->'%(FullPath)')"
        Condition="'%(_EmbeddedResourceWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_EmbeddedResourceWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'">
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectoryAlways"
              Condition="'%(_EmbeddedResourceWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectory"
              Condition="'%(_EmbeddedResourceWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>

    <CreateItem
        Include="@(Compile->'%(FullPath)')"
        Condition="'%(Compile.CopyToOutputDirectory)'=='Always' or '%(Compile.CopyToOutputDirectory)'=='PreserveNewest'">
      <Output TaskParameter="Include" ItemName="_CompileItemsToCopy"/>
    </CreateItem>
    <AssignTargetPath Files="@(_CompileItemsToCopy)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="_CompileItemsToCopyWithTargetPath" />
    </AssignTargetPath>
    <CreateItem Include="@(_CompileItemsToCopyWithTargetPath)">
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectoryAlways"
              Condition="'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectory"
              Condition="'%(_CompileItemsToCopyWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>

    <CreateItem
        Include="@(_NoneWithTargetPath->'%(FullPath)')"
        Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always' or '%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'">
      <Output TaskParameter="Include" ItemName="AllItemsFullPathWithTargetPath"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectoryAlways"
              Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='Always'"/>
      <Output TaskParameter="Include" ItemName="_SourceItemsToCopyToOutputDirectory"
              Condition="'%(_NoneWithTargetPath.CopyToOutputDirectory)'=='PreserveNewest'"/>
    </CreateItem>

  </Target>

  <Target Name="CreateManifestResourceNames"/>

  <!--ILAnalyzerRunner target -->
  <Target
       Name="ILAnalyzerRunner">
    <Message Text="Analyzing assemblies." />
    <AnalyzerTask AssemblyFiles="@(ReferenceCopyLocalPaths->'$(ProjectDir)$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" RepositoryFilename="$(RepositoryFilename)"  />
  </Target>

  <!--MasterCaller target -->
  <Target
       Name="MasterCaller">
    <Message Text="Executing Composestar Master..." />
    <MasterCallerTask RepositoryFilename="$(ProjectDir)$(RepositoryFilename)" ConcernFiles="@(Concern->'%(FullPath)')" DebugLevel="$(DebugLevel)" />
  </Target>

  <!--ILWeaverRunner target -->
  <Target
       Name="ILWeaverRunner">
    <Message Text="Performing IL weaving..." />
    <ILWeaverTask AssemblyFiles="@(ReferenceCopyLocalPaths->'$(ProjectDir)$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" RepositoryFilename="$(RepositoryFilename)"  />
  </Target>

  <!--This is an override of targets-->
  <Target
     Name="CopyFilesToOutputDirectory"
      DependsOnTargets="
            ComputeIntermediateSatelliteAssemblies;
            _CopyFilesMarkedCopyLocal;
            _CopySourceItemsToOutputDirectory;
            _CopyAppConfigFile;
            _CopyManifestFiles;">
    <Message Text="Copying assemblies..." />
    <MakeDir Directories="$(OutDir)\Test"></MakeDir>
    <!-- Copy the serialization assembly if it exists. -->
    <!--<Copy
        SourceFiles="$(IntermediateOutputPath)$(_SGenDllName)"
        DestinationFiles="$(OutDir)$(_SGenDllName)"
        SkipUnchangedFiles="true"
        Condition="'$(_SGenDllCreated)'=='true'">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>-->
    <!--<Copy
        SourceFiles="@(TargetOutputs)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>-->
    <!-- Copy the debug information file (.pdb), if any -->
    <!--<Copy
        SourceFiles="$(IntermediateOutputPath)$(TargetName).pdb"
        DestinationFiles="$(OutDir)$(TargetName).pdb"
        SkipUnchangedFiles="true"
        Condition="'$(_DebugSymbolsProduced)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>-->
    <!-- Copy satellite assemblies. -->
    <!--<Copy
        SourceFiles="@(IntermediateSatelliteAssembliesWithTargetPath)"
        DestinationFiles="@(IntermediateSatelliteAssembliesWithTargetPath->'$(OutDir)%(Culture)\$(TargetName).resources.dll')"
        SkipUnchangedFiles="true">
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>-->
    <!-- 
        Copy COM reference wrappers, isolated COM references, COM references included by 
        native (manifest) references, native (manifest) reference files themselves. 
        -->
    <Copy
        SourceFiles="@(ReferenceComWrappersToCopyLocal); @(ResolvedIsolatedComModules); @(_DeploymentLooseManifestFile); @(NativeReferenceFile)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true">
      <Output TaskParameter="DestinationFiles" ItemName="FileWritesShareable"/>
    </Copy>
  </Target>
</Project>