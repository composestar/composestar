package Composestar.Patterns.Interpreter;	

public class Copy
{
	public Copy(){}

	public BooleanExpression copyAndExpression() 
	{
		AndExpression andExpression = (AndExpression)((Object)this);
		return new AndExpression(andExpression.expression1.copy(), andExpression.expression2.copy());
	}

	public BooleanExpression copyBooleanConstant() 
	{
		BooleanConstant booleanConstant = (BooleanConstant)((Object)this);
		return new BooleanConstant(booleanConstant.value);
	}
		
	public BooleanExpression copyNotExpression() 
	{
		NotExpression notExpression = (NotExpression)((Object)this);
		return new NotExpression(notExpression.exp.copy());
	}

	public BooleanExpression copyOrExpression() 
	{
		OrExpression orExpression = (OrExpression)((Object)this);
		return new OrExpression(orExpression.expression1.copy(), orExpression.expression2.copy());
	}

	public BooleanExpression copyVariableExpression() 
	{
		VariableExpression variableExpression = (VariableExpression)((Object)this);
		return new VariableExpression(variableExpression.name);
	}	

}
