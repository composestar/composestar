/**
 * "The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is ca.ubc.cs.spl.aspectPatterns. 
 * 
 * The Initial Developers of the Original Code are Jan Hannemann and Gregor Kiczales.
 * 
 * For more details and the latest version of the original code, please see: 
 * http://www.cs.ubc.ca/labs/spl/projects/aodps.html
 * 
 * Contributor(s): Stephan Huttenhuis.
 * 
 * The modified version of the code is part of the Compose* project which can be found at: 
 * http://composestar.sf.net
 * 
 */
package Composestar.Patterns.AbstractFactory;

import javax.swing.JPanel;
import javax.swing.JFrame;
import javax.swing.JLabel; 
import javax.swing.JButton; 
import javax.swing.JTextField;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class Display extends JFrame  { 
    
	public Display(ComponentFactory factory) {
		super("New GUI"); 
		JLabel label = factory.createLabel(); 
		JButton button = factory.createButton("OK");
		JTextField inputfield = factory.createInputField();
		button.addActionListener(new myActionListener(this));
		JPanel panel = new JPanel();
		panel.add(label);
		panel.add(button);
		panel.add(inputfield);
		this.getContentPane().add(panel);
		this.pack();
		this.setVisible(true); 
		this.addWindowListener(new myWindowListener(this));
	}
	
	private class myWindowListener extends WindowAdapter {
		
		Display display = null;
		
		protected myWindowListener(Display display) {
			super();
			this.display = display;   
		}
		
		public void windowClosing(WindowEvent e) {
			display.setVisible(false);
			System.exit(0);
		}
	}
	
	private class myActionListener implements ActionListener {
	    
	    Display display;
	    
	    protected myActionListener(Display display) {
	        super();
	        this.display = display;
	    }
	    
	    public void actionPerformed(ActionEvent e) { 
			display.setVisible(false);
			System.exit(0);
		}
	}
}