<!--
***********************************************************************************************
Composestar StarLight weave targets version 0.1 (beta)

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or weave your projects from the command-line or the IDE.

This file defines the steps in the weave process for .NET projects in combination with
the Composestar StarLight software.

Copyright (C) University of Twente, 2006
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Weave">
  
  <!--Reference the assembly where our tasks are defined-->
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.MasterCallerTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.CpsParserTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.ILAnalyzerTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.ILWeaverTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />
  <UsingTask TaskName="Composestar.StarLight.MSBuild.Tasks.ILVerifyTask" AssemblyFile="Composestar.StarLight.MSBuild.Tasks.dll" />

  <!--
    ============================================================
                                        Weave

    The main build entry point.
    ============================================================
    -->
  <PropertyGroup>
    <WeaveDependsOn>
      BeforeWeave;
      CompileCode;
      CoreWeave;
      AfterWeave
    </WeaveDependsOn>
  </PropertyGroup>
  <Target
      Name="Weave"
      Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
    Outputs="$(TargetPath)"  
    DependsOnTargets="$(WeaveDependsOn)">
  </Target>
  <!--
    ============================================================
                                        BeforeWeave
    
    Redefine this target in your project in order to run tasks just before Weave
    ============================================================
    -->
  <Target Name="BeforeWeave"/>

  <!--
    ============================================================
                                        AfterWeave

    Redefine this target in your project in order to run tasks just after Weave 
    ============================================================
    -->
  <Target Name="AfterWeave"/>

  <!--
    ============================================================
                                        Clean section

    Redefine this target in your project in order to run tasks just after clean 
    ============================================================
    -->
  <PropertyGroup>
    <CleanDependsOn>
      $(CleanDependsOn);
      CleanStarLight;
    </CleanDependsOn>
  </PropertyGroup>

  <!--
Target that will remove the StarLight generated files if they still exist on disk.
This target will be called whenever the Clean target is invoked.
-->
  <Target Name="CleanStarLight">
    <CreateItem Include="$(RepositoryFilename)">
      <Output TaskParameter="Include" ItemName="TempRepository"/>
    </CreateItem>
    <Delete Files="@(TempRepository)"/>
    <CreateItem Include="$(ProjectDir)$(BaseIntermediateOutputPath)INCRE.html">
      <Output TaskParameter="Include" ItemName="TempIncre"/>
    </CreateItem>
    <Delete Files="@(TempIncre)"/>
  </Target>

  
  
  <!--
    ============================================================
                                        Reweave

    Delete all intermediate and final build outputs, and then weave the project from scratch.
    ============================================================
    -->

  <!-- Override of rebuild to start reweave -->
  <Target
        Name="Rebuild"
        Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
        DependsOnTargets="$(ReweaveDependsOn)"
        Outputs="$(TargetPath)"/>
    
  <PropertyGroup>
    <ReweaveDependsOn>
      BeforeReweave;
      Clean;
      $(MSBuildProjectDefaultTargets);
      AfterReweave;
    </ReweaveDependsOn>

    <ReweaveDependsOn Condition=" '$(MSBuildProjectDefaultTargets)' == 'Rebuild' " >
      BeforeRebuild;
      Clean;
      Build;
      AfterRebuild;
    </ReweaveDependsOn>
  </PropertyGroup>

  <Target
      Name="Reweave"
      Condition=" '$(_InvalidConfigurationWarning)' != 'true' "
      DependsOnTargets="$(ReweaveDependsOn)"
      Outputs="$(TargetPath)"/>

  <!--
    ============================================================
                                        BeforeReweave

    Redefine this target in your project in order to run tasks just before Reweave 
    ============================================================
    -->
  <Target Name="BeforeReweave"/>

  <!--
    ============================================================
                                        AfterReweave

    Redefine this target in your project in order to run tasks just after Reweave 
    ============================================================
    -->
  <Target Name="AfterReweave"/>

  <!--
    ============================================================
                                        CompileCode

    The core build step calls each of the compile targets.
    ============================================================
    -->
  <PropertyGroup>
    <TargetExt Condition="'$(OutputType)'=='exe'">.exe</TargetExt>
    <TargetExt Condition="'$(OutputType)'=='winexe'">.exe</TargetExt>
    <TargetExt Condition="'$(OutputType)'=='library'">.dll</TargetExt>
    <TargetExt Condition="'$(OutputType)'=='module'">.netmodule</TargetExt>
  </PropertyGroup>
  
  <PropertyGroup>
    <CompileCodeDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      PreBuildEvent;
      UnmanagedUnregistration;
      ResolveReferences;
      PrepareResources;
      ResolveKeySource;
      Compile;
      GenerateSerializationAssemblies;
      CreateSatelliteAssemblies;
      GenerateManifests;
      GetTargetPath;
      PrepareForRun;
    </CompileCodeDependsOn>
  </PropertyGroup>
  <Target
      Name="CompileCode"
      DependsOnTargets="$(CompileCodeDependsOn)"
      Condition ="'$(CodeLanguage)'=='CSharp' or '$(CodeLanguage)'=='VB' or '$(CodeLanguage)'=='JSharp'" >
    <OnError ExecuteTargets="_TimeStampAfterCompile;PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
    <OnError ExecuteTargets="_CleanRecordFileWrites"/>        
  </Target>


  <!--
    ============================================================
                                        CoreWeave

    The core build step calls each of the weave targets.
    ============================================================
    -->
  <PropertyGroup>
    <CoreWeaveDependsOn>
      BuildOnlySettings;
      PrepareForBuild;
      ResolveReferences;
      CpsParserRunner;
      GetTargetPath;
      CopyFilesToOutputDirectory;
      ILAnalyzerRunner;
      MasterCaller;
      ILWeaverRunner;
      ILVerifyRunner;
      IncrementalClean;
    </CoreWeaveDependsOn>
  </PropertyGroup>
  <Target
      Name="CoreWeave"
      DependsOnTargets="$(CoreWeaveDependsOn)">
    <OnError ExecuteTargets="_TimeStampAfterCompile;PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
    <OnError ExecuteTargets="_CleanRecordFileWrites"/>
  </Target>

  <PropertyGroup>
    <!-- "None" is not technically a valid DebugType, so we can't pass it in as such
             to the compiler.  So here, we modify the properties so they make sense. -->
    <DebugSymbols Condition=" '$(DebugType)' == 'none' ">false</DebugSymbols>
    <DebugType    Condition=" '$(DebugType)' == 'none' "></DebugType>

    <_DisabledWarnings>$(NoWarn)</_DisabledWarnings>

  </PropertyGroup>
 
  <Target Name="CreateManifestResourceNames"/>

  <!--This is an override of targets-->
  <Target
        Name="CopyFilesToOutputDirectory"
        DependsOnTargets="
            ComputeIntermediateSatelliteAssemblies;
            _CopyFilesMarkedCopyLocal;
            _CopySourceItemsToOutputDirectory;
            _CopyAppConfigFile;
            _CopyManifestFiles;
            _CheckForCompileOutputs;
            _SGenCheckForOutputs">
   
    <Message Importance="High" Text="$(MSBuildProjectName) -&gt; @(MainAssembly->'%(FullPath)')" />
    <!-- Copy the build product (.dll or .exe). But only when we have a CodeLanguage -->
    <Copy
        SourceFiles="@(IntermediateAssembly)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true"
        Condition="'$(CodeLanguage)'=='CSharp' or '$(CodeLanguage)'=='VB' or '$(CodeLanguage)'=='JSharp'"
        >

      <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>
    
    <!-- Copy the additional modules. -->
    <Copy
        SourceFiles="@(AddModules)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy the serialization assembly if it exists. -->
    <Copy
        SourceFiles="$(IntermediateOutputPath)$(_SGenDllName)"
        DestinationFiles="$(OutDir)$(_SGenDllName)"
        SkipUnchangedFiles="true"
        Condition="'$(_SGenDllCreated)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy the debug information file (.pdb), if any -->
    <Copy
        SourceFiles="$(IntermediateOutputPath)$(TargetName).pdb"
        DestinationFiles="$(OutDir)$(TargetName).pdb"
        SkipUnchangedFiles="true"
        Condition="'$(_DebugSymbolsProduced)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy the resulting XML documentation file, if any. -->
    <Copy
        SourceFiles="@(DocFileItem)"
        DestinationFiles="@(FinalDocFile)"
        SkipUnchangedFiles="true"
        Condition="'$(_DocumentationFileProduced)'=='true'">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- Copy satellite assemblies. -->
    <Copy
        SourceFiles="@(IntermediateSatelliteAssembliesWithTargetPath)"
        DestinationFiles="@(IntermediateSatelliteAssembliesWithTargetPath->'$(OutDir)%(Culture)\$(TargetName).resources.dll')"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

    <!-- 
        Copy COM reference wrappers, isolated COM references, COM references included by 
        native (manifest) references, native (manifest) reference files themselves. 
        -->
    <Copy
        SourceFiles="@(ReferenceComWrappersToCopyLocal); @(ResolvedIsolatedComModules); @(_DeploymentLooseManifestFile); @(NativeReferenceFile)"
        DestinationFolder="$(OutDir)"
        SkipUnchangedFiles="true">

      <Output TaskParameter="DestinationFiles" ItemName="FileWritesShareable"/>

    </Copy>

  </Target>
  
  <!--CpsParserRunner target -->
  <Target
       Name="CpsParserRunner">
    <Message Text="Parsing concern files." />
    <CpsParserTask ConcernFiles="@(Concern->'%(FullPath)')" RepositoryFilename="$(RepositoryFilename)">
      <Output TaskParameter="ReferencedTypes" ItemName="ReferencedTypes"/>
    </CpsParserTask>
  </Target>
  
  <!--ILAnalyzerRunner target -->
  <Target
       Name="ILAnalyzerRunner">
    <Message Text="Analyzing assemblies." />
 
    <IlAnalyzerTask ReferencedAssemblies="@(ReferencePath)" ReferencedTypes="@(ReferencedTypes)" 
        AssemblyFiles="@(ReferenceCopyLocalPaths->'$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" 
        RepositoryFilename="$(RepositoryFilename)" BinFolder="$(ProjectDir)$(OutDir)" />
  </Target>

  <!--MasterCaller target -->
  <Target
       Name="MasterCaller">
    <Message Text="Executing Composestar Master." />
    <MasterCallerTask RepositoryFilename="$(ProjectDir)$(RepositoryFilename)" ConcernFiles="@(Concern->'%(FullPath)')" DebugLevel="$(DebugLevel)" IntermediateOutputPath="$(ProjectDir)$(BaseIntermediateOutputPath)" />
  </Target>

  <!--ILWeaverRunner target -->
  <Target
       Name="ILWeaverRunner">
    <Message Text="Performing IL weaving." />
    <ILWeaverTask AssemblyFiles="@(ReferenceCopyLocalPaths->'$(ProjectDir)$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" RepositoryFilename="$(RepositoryFilename)" BinFolder="$(ProjectDir)$(OutDir)"  />
  </Target>

  <Target Name ="ILVerifyRunner" Condition="'$(VerifyIL)'=='True'">
    <Message Text ="Verifying generated IL code." />
    <ILVerifyTask AssemblyFiles="@(ReferenceCopyLocalPaths->'$(ProjectDir)$(OutDir)%(DestinationSubDirectory)%(Filename)%(Extension)')" />    
  </Target>

 
</Project>