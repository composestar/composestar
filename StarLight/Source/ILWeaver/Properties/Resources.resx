<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblyNotOpen" xml:space="preserve">
    <value>The assembly is not open.</value>
  </data>
  <data name="ConstructorNotFound" xml:space="preserve">
    <value>The constructor .ctor() for the type {0} could not be found.</value>
  </data>
  <data name="CouldNotSaveAssembly" xml:space="preserve">
    <value>Could not write the assembly to file '{0}'. Check if the file is not in use and has the correct access permissions. Exception message was {1}.</value>
  </data>
  <data name="FileNameNullOrEmpty" xml:space="preserve">
    <value>The supplied filename is null or empty.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The file {0} could not be found.</value>
  </data>
  <data name="FilterJumpLabelIsNotSet" xml:space="preserve">
    <value>The label for the JumpFilterAction has not been set.</value>
  </data>
  <data name="ImageIsBad" xml:space="preserve">
    <value>The format of binary image {0} is invalid.</value>
  </data>
  <data name="RepositoryFilenameNotSpecified" xml:space="preserve">
    <value>The config collection did not contain a valid filename to the repository file.</value>
  </data>
  <data name="TypeNotFound" xml:space="preserve">
    <value>The type {0} could not be found.</value>
  </data>
  <data name="CecilVisitorRaisedException" xml:space="preserve">
    <value>An exception occurred during the creation of IL instructions by the Cecil visitor. See the inner exception for more details.</value>
  </data>
  <data name="InputImageNotFound" xml:space="preserve">
    <value>The input image {0} could not be found.
</value>
  </data>
  <data name="CouldNotResolveMethod" xml:space="preserve">
    <value>Unable to resolve the method '{0}' from '{1}' to a Type used by the weaver. Make sure all the references are in place and the method has bee specified correctly.</value>
  </data>
  <data name="ConditionNotFound" xml:space="preserve">
    <value>Could not find condition named '{0}'.</value>
  </data>
  <data name="MethodNotFound" xml:space="preserve">
    <value>Could not create a method reference for method named '{0}' in type '{1}' and assembly '{2}'.</value>
  </data>
  <data name="FieldNotFound" xml:space="preserve">
    <value>The field {0} could not be found.</value>
  </data>
  <data name="AdviceMethodNotFound" xml:space="preserve">
    <value>Could not find method named '{0}(JoinpointContext)' in type '{1}'</value>
  </data>
  <data name="AssemblyElementNotFound" xml:space="preserve">
    <value>Could not find the assembly named '{0}' in the database. The file is not analyzed and cannot be processed by the weaver.</value>
  </data>
  <data name="CouldNotLoadAssembly" xml:space="preserve">
    <value>Unable to open assembly '{0}' due to the following error: {1}</value>
  </data>
  <data name="MethodSignatureNotFound" xml:space="preserve">
    <value>Could not find method with signature '{0}' in the cache.</value>
  </data>
  <data name="WeavingSpecNotFound" xml:space="preserve">
    <value>Could not find weaving specification file '{0}' for assembly '{1}'.</value>
  </data>
  <data name="CouldNotResolveFilterAction" xml:space="preserve">
    <value>Unable to resolve filter action named '{0}'. </value>
  </data>
  <data name="StrategiesFolderNotFound" xml:space="preserve">
    <value>Unable to retrieve the weaving strategies folder location from the registry. Make sure there is a WeaveStrategiesFolder string value in the HKEY_LOCAL_MACHINE\SOFTWARE\Composestar\StarLight hive.</value>
  </data>
  <data name="WeaveStrategyAttributeNotFound" xml:space="preserve">
    <value>The class '{0}' inherits from '{1}' but did not have a custom attribute to describe the weaving strategy. Add a {2} attribute to this class.</value>
  </data>
  <data name="WeaveStrategyNotUnique" xml:space="preserve">
    <value>The weaving strategy '{0}' is already in the list of strategies. make sure you have unique weaving strategy names.</value>
  </data>
  <data name="CouldNotSavePdb" xml:space="preserve">
    <value>Could not write the debug information to file '{0}'. Check if the file is not in use and has the correct access permissions. Exception message was '{1}'.</value>
  </data>
  <data name="MethodNotFound2" xml:space="preserve">
    <value>Could not create a method reference for method named '{0}' in internal/external '{1}' of type '{2}'.</value>
  </data>
  <data name="StaticReferenceInternalExternal" xml:space="preserve">
    <value>Trying to reference an internal or external from the static method named '{0}'  in type '{1}'</value>
  </data>
  <data name="NoWeavingStrategiesFound" xml:space="preserve">
    <value>The weaver could not find any weaving strategies. At least the default strategies (like dispatch, advice, error, and so on) are expected. Make sure the build-in weaving strategies assembly is located in the WeaveStrategiesFolder '{0}'.</value>
  </data>
  <data name="SetInnerCallFailed" xml:space="preserve">
    <value>Could not set inner call context for method '{0}' calling method '{1}'</value>
  </data>
  <data name="ErrorReadingPdb" xml:space="preserve">
    <value>Could not open pdb debug file '{0}'. Disabling debug generation for this assembly.</value>
  </data>
  <data name="NonStaticContextInStaticMethod" xml:space="preserve">
    <value>Unable to add inputfilters to static method '{1}' in class '{0}', usage of non-static internal, external or condition.</value>
  </data>
  <data name="NoSuitableInternalConstructor" xml:space="preserve">
    <value>Could not find a suitable constructor for internal {0}.</value>
  </data>
  <data name="FilterModuleConditionNotFound" xml:space="preserve">
    <value>Unable to instantiate the Filter Module Condition '{0}'.</value>
  </data>
  <data name="FilterConditionInvalid" xml:space="preserve">
    <value>The Filter Module Condition is invalid for '{0}' in combination with attribute '{1}'. {2}</value>
  </data>
</root>