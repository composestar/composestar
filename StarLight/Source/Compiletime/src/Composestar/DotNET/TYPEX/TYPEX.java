package Composestar.DotNET.TYPEX;

import java.util.List;

import Composestar.Core.CpsProgramRepository.Concern;
import Composestar.Core.CpsProgramRepository.MethodWrapper;
import Composestar.Core.CpsProgramRepository.PlatformRepresentation;
import Composestar.Core.CpsProgramRepository.Signature;
import Composestar.Core.Exception.ModuleException;
import Composestar.Core.Master.CTCommonModule;
import Composestar.Core.Master.CommonResources;
import Composestar.Core.RepositoryImplementation.DataStore;
import Composestar.DotNET.LAMA.DotNETMethodInfo;
import Composestar.DotNET.LAMA.DotNETType;
import Composestar.Utils.Debug;

/**
 * TYPEX - TYPe EXpander.
 * Expands existing classes in sources and assemblies with additional methods.
 * The set of additional methods is generated by SIGN.
 * 
 * @author Marcus Klimstra
 */
public class TYPEX implements CTCommonModule
{
	public static final String MODULE_NAME = "TYPEX";

	private DataStore dataStore;
	
	public TYPEX()
	{
		dataStore = DataStore.instance();
	}

	public void run(CommonResources resources) throws ModuleException
	{
		if (!resources.getBoolean("signaturesmodified"))
		{
			Debug.out(Debug.MODE_INFORMATION, MODULE_NAME, "No need to transform assemblies");
			return;
		}
		
		TypeExpander se = new TypeExpander();
		collectExpandedTypes(se);		
		se.run();
	}
	
	private void collectExpandedTypes(TypeExpander se)
	{
		List<Concern> concerns 
			= dataStore.getListOfAllInstances(Concern.class);
		
		for (Concern concern : concerns)
		{
			PlatformRepresentation pr = concern.getPlatformRepresentation();

			if (pr == null || !(pr instanceof DotNETType))
				continue;

			DotNETType dnt = (DotNETType) pr;
			Signature sig = concern.getSignature();
			
			List<DotNETMethodInfo> methods 
				= sig.getMethods(MethodWrapper.ADDED);
			
			for (DotNETMethodInfo mi : methods)
			{
				se.addExtraMethod(dnt, mi);
			}
		}
	}
}
