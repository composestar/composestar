// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.ILWeaver;
using Composestar.StarLight.CoreServices;
using Composestar.StarLight.Entities.WeaveSpec;
using Composestar.StarLight.Entities.WeaveSpec.Instructions;
using Mono.Cecil.Cil;
using Mono.Cecil;
namespace TestILWeaver
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ILWeaver.CecilILWeaver and is intended
    ///to contain all Composestar.StarLight.ILWeaver.CecilILWeaver Unit Tests
    ///</summary>
    [TestClass()]
    public class CecilILWeaverFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for CecilILWeaver (CecilWeaverConfiguration, IEntitiesAccessor)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for GetMethodFromList (List&lt;WeaveMethod&gt;, string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void GetMethodFromListTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.WeaveMethod> list = null; // TODO: Initialize to an appropriate value

            string signature = null; // TODO: Initialize to an appropriate value

            WeaveMethod expected = null;
            WeaveMethod actual;

            actual = accessor.GetMethodFromList(list, signature);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilILWeaver.GetMethodFromList did not return the" +
                    " expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetOutputFilterForCall (List&lt;WeaveCall&gt;, string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void GetOutputFilterForCallTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.WeaveCall> weaveCalls = null; // TODO: Initialize to an appropriate value

            string callSignature = null; // TODO: Initialize to an appropriate value

            InlineInstruction expected = null;
            InlineInstruction actual;

            actual = accessor.GetOutputFilterForCall(weaveCalls, callSignature);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilILWeaver.GetOutputFilterForCall did not retur" +
                    "n the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for InsertBeforeInstructionList (ref CilWorker, Instruction, IList&lt;Instruction&gt;)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void InsertBeforeInstructionListTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            CilWorker worker = null; // TODO: Initialize to an appropriate value
            CilWorker worker_expected = null; // TODO: Initialize to an appropriate value

            Instruction startInstruction = null; // TODO: Initialize to an appropriate value

            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructionsToAdd = null; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = accessor.InsertBeforeInstructionList(ref worker, startInstruction, instructionsToAdd);

            Assert.AreEqual(worker_expected, worker, "worker_InsertBeforeInstructionList_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilILWeaver.InsertBeforeInstructionList did not " +
                    "return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for InsertInstructionList (ref CilWorker, Instruction, IList&lt;Instruction&gt;)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void InsertInstructionListTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            CilWorker worker = null; // TODO: Initialize to an appropriate value
            CilWorker worker_expected = null; // TODO: Initialize to an appropriate value

            Instruction startInstruction = null; // TODO: Initialize to an appropriate value

            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructionsToAdd = null; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = accessor.InsertInstructionList(ref worker, startInstruction, instructionsToAdd);

            Assert.AreEqual(worker_expected, worker, "worker_InsertInstructionList_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilILWeaver.InsertInstructionList did not return" +
                    " the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsCallInstruction (Instruction)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void IsCallInstructionTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            Instruction instruction = null; // TODO: Initialize to an appropriate value

            bool expected = false;
            bool actual;

            actual = accessor.IsCallInstruction(instruction);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilILWeaver.IsCallInstruction did not return the" +
                    " expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ReplaceAndInsertInstructionList (ref CilWorker, Instruction, IList&lt;Instruction&gt;)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void ReplaceAndInsertInstructionListTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            CilWorker worker = null; // TODO: Initialize to an appropriate value
            CilWorker worker_expected = null; // TODO: Initialize to an appropriate value

            Instruction startInstruction = null; // TODO: Initialize to an appropriate value

            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructionsToAdd = null; // TODO: Initialize to an appropriate value

            int expected = 0;
            int actual;

            actual = accessor.ReplaceAndInsertInstructionList(ref worker, startInstruction, instructionsToAdd);

            Assert.AreEqual(worker_expected, worker, "worker_ReplaceAndInsertInstructionList_expected was not set correctly.");
            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilILWeaver.ReplaceAndInsertInstructionList did " +
                    "not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for WeaveExternals (AssemblyDefinition, TypeDefinition, WeaveType)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveExternalsTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            AssemblyDefinition targetAssembly = null; // TODO: Initialize to an appropriate value

            TypeDefinition type = null; // TODO: Initialize to an appropriate value

            WeaveType weaveType = null; // TODO: Initialize to an appropriate value

            accessor.WeaveExternals(targetAssembly, type, weaveType);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WeaveInputFilters (AssemblyDefinition, MethodDefinition, WeaveMethod, WeaveType)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveInputFiltersTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            AssemblyDefinition targetAssembly = null; // TODO: Initialize to an appropriate value

            MethodDefinition method = null; // TODO: Initialize to an appropriate value

            WeaveMethod weaveMethod = null; // TODO: Initialize to an appropriate value

            WeaveType weaveType = null; // TODO: Initialize to an appropriate value

            accessor.WeaveInputFilters(targetAssembly, method, weaveMethod, weaveType);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WeaveInternals (AssemblyDefinition, TypeDefinition, WeaveType)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveInternalsTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            AssemblyDefinition targetAssembly = null; // TODO: Initialize to an appropriate value

            TypeDefinition type = null; // TODO: Initialize to an appropriate value

            WeaveType weaveType = null; // TODO: Initialize to an appropriate value

            accessor.WeaveInternals(targetAssembly, type, weaveType);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WeaveMethod (AssemblyDefinition, MethodDefinition, WeaveMethod, WeaveType)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveMethodTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            AssemblyDefinition targetAssembly = null; // TODO: Initialize to an appropriate value

            MethodDefinition method = null; // TODO: Initialize to an appropriate value

            WeaveMethod weaveMethod = null; // TODO: Initialize to an appropriate value

            WeaveType weaveType = null; // TODO: Initialize to an appropriate value

            accessor.WeaveMethod(targetAssembly, method, weaveMethod, weaveType);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WeaveOutputFilters (AssemblyDefinition, MethodDefinition, WeaveMethod, WeaveType)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveOutputFiltersTest()
        {
            CecilWeaverConfiguration configuration = null; // TODO: Initialize to an appropriate value

            IEntitiesAccessor entitiesAccessor = null; // TODO: Initialize to an appropriate value

            CecilILWeaver target = new CecilILWeaver(configuration, entitiesAccessor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(target);

            AssemblyDefinition targetAssembly = null; // TODO: Initialize to an appropriate value

            MethodDefinition method = null; // TODO: Initialize to an appropriate value

            WeaveMethod weaveMethod = null; // TODO: Initialize to an appropriate value

            WeaveType weaveType = null; // TODO: Initialize to an appropriate value

            accessor.WeaveOutputFilters(targetAssembly, method, weaveMethod, weaveType);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
