// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.ILWeaver;
using System.Reflection;
using Mono.Cecil;
using Composestar.StarLight.CoreServices;
using Composestar.StarLight.Entities.WeaveSpec;
using Mono.Cecil.Cil;
using Composestar.StarLight.Entities.WeaveSpec.ConditionExpressions;
using Composestar.StarLight.Entities.Configuration;
namespace TestILWeaver
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ILWeaver.CecilConditionsVisitor and is intended
    ///to contain all Composestar.StarLight.ILWeaver.CecilConditionsVisitor Unit Tests
    ///</summary>
    [TestClass()]
    public class CecilConditionsVisitorTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for CecilConditionsVisitor (CecilInliningInstructionVisitor)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for Conditions
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void ConditionsTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.Condition> val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.Conditions, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.Conditions was not set corr" +
                    "ectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateMethodReference (System.Reflection.MethodBase)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateMethodReferenceTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);

            MethodBase methodBase = null; // TODO: Initialize to an appropriate value

            MethodReference expected = null;
            MethodReference actual;

            actual = accessor.CreateMethodReference(methodBase);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.CreateMethodReference did n" +
                    "ot return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for EntitiesAccessor
        ///</summary>
        [TestMethod()]
        public void EntitiesAccessorTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            IEntitiesAccessor val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.EntitiesAccessor, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.EntitiesAccessor was not se" +
                    "t correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetConditionByName (string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void GetConditionByNameTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);

            string name = null; // TODO: Initialize to an appropriate value

            Condition expected = null;
            Condition actual;

            actual = accessor.GetConditionByName(name);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.GetConditionByName did not " +
                    "return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetJumpLabel (int)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void GetJumpLabelTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);

            int labelId = 0; // TODO: Initialize to an appropriate value

            Instruction expected = null;
            Instruction actual;

            actual = accessor.GetJumpLabel(labelId);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.GetJumpLabel did not return" +
                    " the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Instructions
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void InstructionsTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.Instructions, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.Instructions was not set co" +
                    "rrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Method
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void MethodTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            MethodDefinition val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.Method, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.Method was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for TargetAssemblyDefinition
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void TargetAssemblyDefinitionTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            AssemblyDefinition val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.TargetAssemblyDefinition, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.TargetAssemblyDefinition wa" +
                    "s not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for VisitAndLeft (And)
        ///</summary>
        [TestMethod()]
        public void VisitAndLeftTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            And and = null; // TODO: Initialize to an appropriate value

            target.VisitAndLeft(and);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitAndRight (And)
        ///</summary>
        [TestMethod()]
        public void VisitAndRightTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            And and = null; // TODO: Initialize to an appropriate value

            target.VisitAndRight(and);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitConditionLiteral (ConditionLiteral)
        ///</summary>
        [TestMethod()]
        public void VisitConditionLiteralTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            ConditionLiteral conditionLiteral = null; // TODO: Initialize to an appropriate value

            target.VisitConditionLiteral(conditionLiteral);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitFalse (False)
        ///</summary>
        [TestMethod()]
        public void VisitFalseTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            False falseCondition = null; // TODO: Initialize to an appropriate value

            target.VisitFalse(falseCondition);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitNot (Not)
        ///</summary>
        [TestMethod()]
        public void VisitNotTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            Not not = null; // TODO: Initialize to an appropriate value

            target.VisitNot(not);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitOrLeft (Or)
        ///</summary>
        [TestMethod()]
        public void VisitOrLeftTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            Or or = null; // TODO: Initialize to an appropriate value

            target.VisitOrLeft(or);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitOrRight (Or)
        ///</summary>
        [TestMethod()]
        public void VisitOrRightTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            Or or = null; // TODO: Initialize to an appropriate value

            target.VisitOrRight(or);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitTrue (True)
        ///</summary>
        [TestMethod()]
        public void VisitTrueTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            True trueCondition = null; // TODO: Initialize to an appropriate value

            target.VisitTrue(trueCondition);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WeaveConfiguration
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveConfigurationTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            ConfigurationContainer val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.WeaveConfiguration, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.WeaveConfiguration was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for WeaveType
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WeaveTypeTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            WeaveType val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.WeaveType, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.WeaveType was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Worker
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void WorkerTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            CecilConditionsVisitor target = new CecilConditionsVisitor(visitor);

            CilWorker val = null; // TODO: Assign to an appropriate value for the property

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(target);


            Assert.AreEqual(val, accessor.Worker, "Composestar.StarLight.ILWeaver.CecilConditionsVisitor.Worker was not set correctl" +
                    "y.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
