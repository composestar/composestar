// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.ILWeaver;
using Mono.Cecil;
using Composestar.StarLight.ContextInfo;
using Mono.Cecil.Cil;
using Composestar.StarLight.Entities.WeaveSpec.Instructions;
using Composestar.StarLight.CoreServices;
using Composestar.StarLight.Entities.Configuration;
using Composestar.StarLight.Entities.WeaveSpec;
namespace TestILWeaver
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor and is intended
    ///to contain all Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor Unit Tests
    ///</summary>
    [TestClass()]
    public class CecilInliningInstructionVisitorFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddInstructionList (IList&lt;Instruction&gt;)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void AddInstructionListTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructions = null; // TODO: Initialize to an appropriate value

            accessor.AddInstructionList(instructions);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for CalledMethod
        ///</summary>
        [TestMethod()]
        public void CalledMethodTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            MethodDefinition val = null; // TODO: Assign to an appropriate value for the property

            target.CalledMethod = val;


            Assert.AreEqual(val, target.CalledMethod, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CalledMethod was n" +
                    "ot set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ConvertAttributes (ParamAttributes)
        ///</summary>
        [TestMethod()]
        public void ConvertAttributesTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ParamAttributes attrMono = ParamAttributes.In; // TODO: Initialize to an appropriate value

            ArgumentAttributes expected = ArgumentAttributes.In;
            ArgumentAttributes actual;

            actual = target.ConvertAttributes(attrMono);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.ConvertAttributes " +
                    "did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateActionStoreLocal ()
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateActionStoreLocalTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            VariableDefinition expected = null;
            VariableDefinition actual;

            actual = accessor.CreateActionStoreLocal();

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CreateActionStoreL" +
                    "ocal did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateContextExpression (ContextExpression)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateContextExpressionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            ContextExpression expr = ContextExpression.HasMoreActions; // TODO: Initialize to an appropriate value

            accessor.CreateContextExpression(expr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for CreateJoinPointContextLocal ()
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateJoinPointContextLocalTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            VariableDefinition expected = null;
            VariableDefinition actual;

            actual = accessor.CreateJoinPointContextLocal();

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CreateJoinPointCon" +
                    "textLocal did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateLocalVar (Type)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateLocalVarTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            Type type = null; // TODO: Initialize to an appropriate value

            VariableDefinition expected = null;
            VariableDefinition actual;

            actual = accessor.CreateLocalVar(type);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CreateLocalVar did" +
                    " not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateLocalVar (TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateLocalVarTest1()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            TypeReference type = null; // TODO: Initialize to an appropriate value

            VariableDefinition expected = null;
            VariableDefinition actual;

            actual = accessor.CreateLocalVar(type);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CreateLocalVar did" +
                    " not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateObjectLocal ()
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateObjectLocalTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            VariableDefinition expected = null;
            VariableDefinition actual;

            actual = accessor.CreateObjectLocal();

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CreateObjectLocal " +
                    "did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateTypeLocal ()
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void CreateTypeLocalTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            VariableDefinition expected = null;
            VariableDefinition actual;

            actual = accessor.CreateTypeLocal();

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.CreateTypeLocal di" +
                    "d not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for EntitiesAccessor
        ///</summary>
        [TestMethod()]
        public void EntitiesAccessorTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            IEntitiesAccessor val = null; // TODO: Assign to an appropriate value for the property

            target.EntitiesAccessor = val;


            Assert.AreEqual(val, target.EntitiesAccessor, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.EntitiesAccessor w" +
                    "as not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FilterType
        ///</summary>
        [TestMethod()]
        public void FilterTypeTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            CecilInliningInstructionVisitor.FilterTypes val = CecilInliningInstructionVisitor.FilterTypes.None; // TODO: Assign to an appropriate value for the property

            target.FilterType = val;


            Assert.AreEqual(val, target.FilterType, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.FilterType was not" +
                    " set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GetJumpLabel (int)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void GetJumpLabelTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(target);

            int labelId = 0; // TODO: Initialize to an appropriate value

            Instruction expected = null;
            Instruction actual;

            actual = accessor.GetJumpLabel(labelId);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.GetJumpLabel did n" +
                    "ot return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Instructions
        ///</summary>
        [TestMethod()]
        public void InstructionsTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> val = null; // TODO: Assign to an appropriate value for the property

            target.Instructions = val;


            Assert.AreEqual(val, target.Instructions, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.Instructions was n" +
                    "ot set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Method
        ///</summary>
        [TestMethod()]
        public void MethodTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            MethodDefinition val = null; // TODO: Assign to an appropriate value for the property

            target.Method = val;


            Assert.AreEqual(val, target.Method, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.Method was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for TargetAssemblyDefinition
        ///</summary>
        [TestMethod()]
        public void TargetAssemblyDefinitionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            AssemblyDefinition val = null; // TODO: Assign to an appropriate value for the property

            target.TargetAssemblyDefinition = val;


            Assert.AreEqual(val, target.TargetAssemblyDefinition, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.TargetAssemblyDefi" +
                    "nition was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for VisitBranch (Branch)
        ///</summary>
        [TestMethod()]
        public void VisitBranchTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Branch branch = null; // TODO: Initialize to an appropriate value

            target.VisitBranch(branch);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitBranchEnd (Branch)
        ///</summary>
        [TestMethod()]
        public void VisitBranchEndTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Branch branch = null; // TODO: Initialize to an appropriate value

            target.VisitBranchEnd(branch);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitBranchFalse (Branch)
        ///</summary>
        [TestMethod()]
        public void VisitBranchFalseTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Branch branch = null; // TODO: Initialize to an appropriate value

            target.VisitBranchFalse(branch);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitCase (Case)
        ///</summary>
        [TestMethod()]
        public void VisitCaseTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Case caseInstr = null; // TODO: Initialize to an appropriate value

            target.VisitCase(caseInstr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitCaseEnd (Switch)
        ///</summary>
        [TestMethod()]
        public void VisitCaseEndTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Switch switchInstr = null; // TODO: Initialize to an appropriate value

            target.VisitCaseEnd(switchInstr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitCheckInnerCall (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitCheckInnerCallTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitCheckInnerCall(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitCreateActionStore (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitCreateActionStoreTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitCreateActionStore(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitCreateJoinPointContext (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitCreateJoinPointContextTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitCreateJoinPointContext(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitFilterAction (FilterAction)
        ///</summary>
        [TestMethod()]
        public void VisitFilterActionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            FilterAction filterAction = null; // TODO: Initialize to an appropriate value

            target.VisitFilterAction(filterAction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitInlineInstruction (InlineInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitInlineInstructionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            InlineInstruction inlineInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitInlineInstruction(inlineInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitJumpInstruction (Jump)
        ///</summary>
        [TestMethod()]
        public void VisitJumpInstructionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Jump jump = null; // TODO: Initialize to an appropriate value

            target.VisitJumpInstruction(jump);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitResetInnerCall (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitResetInnerCallTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitResetInnerCall(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitRestoreJoinPointContext (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitRestoreJoinPointContextTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitRestoreJoinPointContext(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitReturnAction (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitReturnActionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitReturnAction(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitSetInnerCall (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitSetInnerCallTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitSetInnerCall(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitSkipAction (FilterAction)
        ///</summary>
        [TestMethod()]
        public void VisitSkipActionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            FilterAction filterAction = null; // TODO: Initialize to an appropriate value

            target.VisitSkipAction(filterAction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitStoreAction (ContextInstruction)
        ///</summary>
        [TestMethod()]
        public void VisitStoreActionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ContextInstruction contextInstruction = null; // TODO: Initialize to an appropriate value

            target.VisitStoreAction(contextInstruction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitSubstitutionAction (FilterAction)
        ///</summary>
        [TestMethod()]
        public void VisitSubstitutionActionTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            FilterAction filterAction = null; // TODO: Initialize to an appropriate value

            target.VisitSubstitutionAction(filterAction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitSwitch (Switch)
        ///</summary>
        [TestMethod()]
        public void VisitSwitchTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Switch switchInstr = null; // TODO: Initialize to an appropriate value

            target.VisitSwitch(switchInstr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitSwitchEnd (Switch)
        ///</summary>
        [TestMethod()]
        public void VisitSwitchEndTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            Switch switchInstr = null; // TODO: Initialize to an appropriate value

            target.VisitSwitchEnd(switchInstr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitWhile (While)
        ///</summary>
        [TestMethod()]
        public void VisitWhileTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            While whileInstr = null; // TODO: Initialize to an appropriate value

            target.VisitWhile(whileInstr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitWhileEnd (While)
        ///</summary>
        [TestMethod()]
        public void VisitWhileEndTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            While whileInstr = null; // TODO: Initialize to an appropriate value

            target.VisitWhileEnd(whileInstr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for WeaveConfiguration
        ///</summary>
        [TestMethod()]
        public void WeaveConfigurationTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            ConfigurationContainer val = null; // TODO: Assign to an appropriate value for the property

            target.WeaveConfiguration = val;


            Assert.AreEqual(val, target.WeaveConfiguration, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.WeaveConfiguration" +
                    " was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for WeaveType
        ///</summary>
        [TestMethod()]
        public void WeaveTypeTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            WeaveType val = null; // TODO: Assign to an appropriate value for the property

            target.WeaveType = val;


            Assert.AreEqual(val, target.WeaveType, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.WeaveType was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Worker
        ///</summary>
        [TestMethod()]
        public void WorkerTest()
        {
            CecilInliningInstructionVisitor target = new CecilInliningInstructionVisitor();

            CilWorker val = null; // TODO: Assign to an appropriate value for the property

            target.Worker = val;


            Assert.AreEqual(val, target.Worker, "Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.Worker was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
