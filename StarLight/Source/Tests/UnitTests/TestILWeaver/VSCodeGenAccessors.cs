// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestILWeaver
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_CecilILWeaverAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILWeaver.CecilILWeaver));
    
    internal Composestar_StarLight_ILWeaver_CecilILWeaverAccessor(global::Composestar.StarLight.ILWeaver.CecilILWeaver target) : 
            base(target, m_privateType) {
    }
    
    internal global::Composestar.StarLight.ILWeaver.CecilWeaverConfiguration _configuration {
        get {
            global::Composestar.StarLight.ILWeaver.CecilWeaverConfiguration ret = ((global::Composestar.StarLight.ILWeaver.CecilWeaverConfiguration)(m_privateObject.GetField("_configuration")));
            return ret;
        }
        set {
            m_privateObject.SetField("_configuration", value);
        }
    }
    
    internal global::Composestar.StarLight.CoreServices.IEntitiesAccessor _entitiesAccessor {
        get {
            global::Composestar.StarLight.CoreServices.IEntitiesAccessor ret = ((global::Composestar.StarLight.CoreServices.IEntitiesAccessor)(m_privateObject.GetField("_entitiesAccessor")));
            return ret;
        }
        set {
            m_privateObject.SetField("_entitiesAccessor", value);
        }
    }
    
    internal bool _typeChanged {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_typeChanged")));
            return ret;
        }
        set {
            m_privateObject.SetField("_typeChanged", value);
        }
    }
    
    internal global::Composestar.StarLight.CoreServices.ILWeaver.WeaveStatistics _weaveStats {
        get {
            global::Composestar.StarLight.CoreServices.ILWeaver.WeaveStatistics ret = ((global::Composestar.StarLight.CoreServices.ILWeaver.WeaveStatistics)(m_privateObject.GetField("_weaveStats")));
            return ret;
        }
        set {
            m_privateObject.SetField("_weaveStats", value);
        }
    }
    
    internal void WeaveInternals(global::Mono.Cecil.AssemblyDefinition targetAssembly, global::Mono.Cecil.TypeDefinition type, global::Composestar.StarLight.Entities.WeaveSpec.WeaveType weaveType) {
        object[] args = new object[] {
                targetAssembly,
                type,
                weaveType};
        m_privateObject.Invoke("WeaveInternals", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.TypeDefinition),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)}, args);
    }
    
    internal void WeaveExternals(global::Mono.Cecil.AssemblyDefinition targetAssembly, global::Mono.Cecil.TypeDefinition type, global::Composestar.StarLight.Entities.WeaveSpec.WeaveType weaveType) {
        object[] args = new object[] {
                targetAssembly,
                type,
                weaveType};
        m_privateObject.Invoke("WeaveExternals", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.TypeDefinition),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)}, args);
    }
    
    internal void WeaveMethod(global::Mono.Cecil.AssemblyDefinition targetAssembly, global::Mono.Cecil.MethodDefinition method, global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod weaveMethod, global::Composestar.StarLight.Entities.WeaveSpec.WeaveType weaveType) {
        object[] args = new object[] {
                targetAssembly,
                method,
                weaveMethod,
                weaveType};
        m_privateObject.Invoke("WeaveMethod", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.MethodDefinition),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)}, args);
    }
    
    internal void WeaveInputFilters(global::Mono.Cecil.AssemblyDefinition targetAssembly, global::Mono.Cecil.MethodDefinition method, global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod weaveMethod, global::Composestar.StarLight.Entities.WeaveSpec.WeaveType weaveType) {
        object[] args = new object[] {
                targetAssembly,
                method,
                weaveMethod,
                weaveType};
        m_privateObject.Invoke("WeaveInputFilters", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.MethodDefinition),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)}, args);
    }
    
    internal void WeaveOutputFilters(global::Mono.Cecil.AssemblyDefinition targetAssembly, global::Mono.Cecil.MethodDefinition method, global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod weaveMethod, global::Composestar.StarLight.Entities.WeaveSpec.WeaveType weaveType) {
        object[] args = new object[] {
                targetAssembly,
                method,
                weaveMethod,
                weaveType};
        m_privateObject.Invoke("WeaveOutputFilters", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.MethodDefinition),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)}, args);
    }
    
    internal int InsertBeforeInstructionList(ref global::Mono.Cecil.Cil.CilWorker worker, global::Mono.Cecil.Cil.Instruction startInstruction, System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructionsToAdd) {
        object[] args = new object[] {
                worker,
                startInstruction,
                instructionsToAdd};
        int ret = ((int)(m_privateObject.Invoke("InsertBeforeInstructionList", new System.Type[] {
                    typeof(global::Mono.Cecil.Cil.CilWorker).MakeByRefType(),
                    typeof(global::Mono.Cecil.Cil.Instruction),
                    typeof(System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction>)}, args)));
        worker = ((global::Mono.Cecil.Cil.CilWorker)(args[0]));
        return ret;
    }
    
    internal int InsertInstructionList(ref global::Mono.Cecil.Cil.CilWorker worker, global::Mono.Cecil.Cil.Instruction startInstruction, System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructionsToAdd) {
        object[] args = new object[] {
                worker,
                startInstruction,
                instructionsToAdd};
        int ret = ((int)(m_privateObject.Invoke("InsertInstructionList", new System.Type[] {
                    typeof(global::Mono.Cecil.Cil.CilWorker).MakeByRefType(),
                    typeof(global::Mono.Cecil.Cil.Instruction),
                    typeof(System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction>)}, args)));
        worker = ((global::Mono.Cecil.Cil.CilWorker)(args[0]));
        return ret;
    }
    
    internal int ReplaceAndInsertInstructionList(ref global::Mono.Cecil.Cil.CilWorker worker, global::Mono.Cecil.Cil.Instruction startInstruction, System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructionsToAdd) {
        object[] args = new object[] {
                worker,
                startInstruction,
                instructionsToAdd};
        int ret = ((int)(m_privateObject.Invoke("ReplaceAndInsertInstructionList", new System.Type[] {
                    typeof(global::Mono.Cecil.Cil.CilWorker).MakeByRefType(),
                    typeof(global::Mono.Cecil.Cil.Instruction),
                    typeof(System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction>)}, args)));
        worker = ((global::Mono.Cecil.Cil.CilWorker)(args[0]));
        return ret;
    }
    
    internal global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod GetMethodFromList(System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.WeaveMethod> list, string signature) {
        object[] args = new object[] {
                list,
                signature};
        global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod ret = ((global::Composestar.StarLight.Entities.WeaveSpec.WeaveMethod)(m_privateObject.Invoke("GetMethodFromList", new System.Type[] {
                    typeof(System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.WeaveMethod>),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal global::Composestar.StarLight.Entities.WeaveSpec.Instructions.InlineInstruction GetOutputFilterForCall(System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.WeaveCall> weaveCalls, string callSignature) {
        object[] args = new object[] {
                weaveCalls,
                callSignature};
        global::Composestar.StarLight.Entities.WeaveSpec.Instructions.InlineInstruction ret = ((global::Composestar.StarLight.Entities.WeaveSpec.Instructions.InlineInstruction)(m_privateObject.Invoke("GetOutputFilterForCall", new System.Type[] {
                    typeof(System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.WeaveCall>),
                    typeof(string)}, args)));
        return ret;
    }
    
    internal bool IsCallInstruction(global::Mono.Cecil.Cil.Instruction instruction) {
        object[] args = new object[] {
                instruction};
        bool ret = ((bool)(m_privateObject.Invoke("IsCallInstruction", new System.Type[] {
                    typeof(global::Mono.Cecil.Cil.Instruction)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_CecilWeaverConfigurationAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILWeaver.CecilWeaverConfiguration));
    
    internal Composestar_StarLight_ILWeaver_CecilWeaverConfigurationAccessor(global::Composestar.StarLight.ILWeaver.CecilWeaverConfiguration target) : 
            base(target, m_privateType) {
    }
    
    internal bool _delaySignOutput {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_delaySignOutput")));
            return ret;
        }
        set {
            m_privateObject.SetField("_delaySignOutput", value);
        }
    }
    
    internal string _outputImageSNK {
        get {
            string ret = ((string)(m_privateObject.GetField("_outputImageSNK")));
            return ret;
        }
        set {
            m_privateObject.SetField("_outputImageSNK", value);
        }
    }
    
    internal bool _shouldSignOutput {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_shouldSignOutput")));
            return ret;
        }
        set {
            m_privateObject.SetField("_shouldSignOutput", value);
        }
    }
    
    internal string _outputImagePath {
        get {
            string ret = ((string)(m_privateObject.GetField("_outputImagePath")));
            return ret;
        }
        set {
            m_privateObject.SetField("_outputImagePath", value);
        }
    }
    
    internal string _inputImagePath {
        get {
            string ret = ((string)(m_privateObject.GetField("_inputImagePath")));
            return ret;
        }
        set {
            m_privateObject.SetField("_inputImagePath", value);
        }
    }
    
    internal string _binfolder {
        get {
            string ret = ((string)(m_privateObject.GetField("_binfolder")));
            return ret;
        }
        set {
            m_privateObject.SetField("_binfolder", value);
        }
    }
    
    internal global::Composestar.StarLight.Entities.Configuration.AssemblyConfig _assemblyConfig {
        get {
            global::Composestar.StarLight.Entities.Configuration.AssemblyConfig ret = ((global::Composestar.StarLight.Entities.Configuration.AssemblyConfig)(m_privateObject.GetField("_assemblyConfig")));
            return ret;
        }
        set {
            m_privateObject.SetField("_assemblyConfig", value);
        }
    }
    
    internal global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer _weaveConfiguration {
        get {
            global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer ret = ((global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer)(m_privateObject.GetField("_weaveConfiguration")));
            return ret;
        }
        set {
            m_privateObject.SetField("_weaveConfiguration", value);
        }
    }
    
    internal void RuntimeValidate() {
        object[] args = new object[0];
        m_privateObject.Invoke("RuntimeValidate", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILWeaver.CecilConditionsVisitor));
    
    internal Composestar_StarLight_ILWeaver_CecilConditionsVisitorAccessor(global::Composestar.StarLight.ILWeaver.CecilConditionsVisitor target) : 
            base(target, m_privateType) {
    }
    
    internal static int BranchLabelOffSet {
        get {
            int ret = ((int)(m_privateType.GetStaticField("BranchLabelOffSet")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("BranchLabelOffSet", value);
        }
    }
    
    internal int m_NumberOfBranches {
        get {
            int ret = ((int)(m_privateObject.GetField("m_NumberOfBranches")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_NumberOfBranches", value);
        }
    }
    
    internal global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor _visitor {
        get {
            global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor ret = ((global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor)(m_privateObject.GetField("_visitor")));
            return ret;
        }
        set {
            m_privateObject.SetField("_visitor", value);
        }
    }
    
    internal global::Mono.Cecil.AssemblyDefinition TargetAssemblyDefinition {
        get {
            global::Mono.Cecil.AssemblyDefinition ret = ((global::Mono.Cecil.AssemblyDefinition)(m_privateObject.GetProperty("TargetAssemblyDefinition")));
            return ret;
        }
    }
    
    internal global::Mono.Cecil.MethodDefinition Method {
        get {
            global::Mono.Cecil.MethodDefinition ret = ((global::Mono.Cecil.MethodDefinition)(m_privateObject.GetProperty("Method")));
            return ret;
        }
    }
    
    internal global::Mono.Cecil.Cil.CilWorker Worker {
        get {
            global::Mono.Cecil.Cil.CilWorker ret = ((global::Mono.Cecil.Cil.CilWorker)(m_privateObject.GetProperty("Worker")));
            return ret;
        }
    }
    
    internal System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.Condition> Conditions {
        get {
            System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.Condition> ret = ((System.Collections.Generic.List<Composestar.StarLight.Entities.WeaveSpec.Condition>)(m_privateObject.GetProperty("Conditions")));
            return ret;
        }
    }
    
    internal global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer WeaveConfiguration {
        get {
            global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer ret = ((global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer)(m_privateObject.GetProperty("WeaveConfiguration")));
            return ret;
        }
    }
    
    internal global::Composestar.StarLight.Entities.WeaveSpec.WeaveType WeaveType {
        get {
            global::Composestar.StarLight.Entities.WeaveSpec.WeaveType ret = ((global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)(m_privateObject.GetProperty("WeaveType")));
            return ret;
        }
    }
    
    internal System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> Instructions {
        get {
            System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> ret = ((System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction>)(m_privateObject.GetProperty("Instructions")));
            return ret;
        }
    }
    
    internal global::Composestar.StarLight.Entities.WeaveSpec.Condition GetConditionByName(string name) {
        object[] args = new object[] {
                name};
        global::Composestar.StarLight.Entities.WeaveSpec.Condition ret = ((global::Composestar.StarLight.Entities.WeaveSpec.Condition)(m_privateObject.Invoke("GetConditionByName", new System.Type[] {
                    typeof(string)}, args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.Instruction GetJumpLabel(int labelId) {
        object[] args = new object[] {
                labelId};
        global::Mono.Cecil.Cil.Instruction ret = ((global::Mono.Cecil.Cil.Instruction)(m_privateObject.Invoke("GetJumpLabel", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal global::Mono.Cecil.MethodReference CreateMethodReference(global::System.Reflection.MethodBase methodBase) {
        object[] args = new object[] {
                methodBase};
        global::Mono.Cecil.MethodReference ret = ((global::Mono.Cecil.MethodReference)(m_privateObject.Invoke("CreateMethodReference", new System.Type[] {
                    typeof(global::System.Reflection.MethodBase)}, args)));
        return ret;
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor));
    
    internal Composestar_StarLight_ILWeaver_CecilInliningInstructionVisitorAccessor(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor target) : 
            base(target, m_privateType) {
    }
    
    internal static int FilterContextJumpId {
        get {
            int ret = ((int)(m_privateType.GetStaticField("FilterContextJumpId")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("FilterContextJumpId", value);
        }
    }
    
    internal static int BranchLabelOffSet {
        get {
            int ret = ((int)(m_privateType.GetStaticField("BranchLabelOffSet")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("BranchLabelOffSet", value);
        }
    }
    
    internal global::Mono.Cecil.Cil.CilWorker m_Worker {
        get {
            global::Mono.Cecil.Cil.CilWorker ret = ((global::Mono.Cecil.Cil.CilWorker)(m_privateObject.GetField("m_Worker")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_Worker", value);
        }
    }
    
    internal int m_NumberOfBranches {
        get {
            int ret = ((int)(m_privateObject.GetField("m_NumberOfBranches")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_NumberOfBranches", value);
        }
    }
    
    internal global::Mono.Cecil.MethodDefinition m_Method {
        get {
            global::Mono.Cecil.MethodDefinition ret = ((global::Mono.Cecil.MethodDefinition)(m_privateObject.GetField("m_Method")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_Method", value);
        }
    }
    
    internal global::Mono.Cecil.MethodDefinition called_Method {
        get {
            global::Mono.Cecil.MethodDefinition ret = ((global::Mono.Cecil.MethodDefinition)(m_privateObject.GetField("called_Method")));
            return ret;
        }
        set {
            m_privateObject.SetField("called_Method", value);
        }
    }
    
    internal global::Mono.Cecil.AssemblyDefinition m_TargetAssemblyDefinition {
        get {
            global::Mono.Cecil.AssemblyDefinition ret = ((global::Mono.Cecil.AssemblyDefinition)(m_privateObject.GetField("m_TargetAssemblyDefinition")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_TargetAssemblyDefinition", value);
        }
    }
    
    internal global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.FilterTypes m_FilterType {
        get {
            global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.FilterTypes ret = ((global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor.FilterTypes)(m_privateObject.GetField("m_FilterType")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_FilterType", value);
        }
    }
    
    internal global::Composestar.StarLight.CoreServices.IEntitiesAccessor m_entitiesAccessor {
        get {
            global::Composestar.StarLight.CoreServices.IEntitiesAccessor ret = ((global::Composestar.StarLight.CoreServices.IEntitiesAccessor)(m_privateObject.GetField("m_entitiesAccessor")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_entitiesAccessor", value);
        }
    }
    
    internal global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer _weaveConfiguration {
        get {
            global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer ret = ((global::Composestar.StarLight.Entities.Configuration.ConfigurationContainer)(m_privateObject.GetField("_weaveConfiguration")));
            return ret;
        }
        set {
            m_privateObject.SetField("_weaveConfiguration", value);
        }
    }
    
    internal global::Composestar.StarLight.Entities.WeaveSpec.WeaveType _weaveType {
        get {
            global::Composestar.StarLight.Entities.WeaveSpec.WeaveType ret = ((global::Composestar.StarLight.Entities.WeaveSpec.WeaveType)(m_privateObject.GetField("_weaveType")));
            return ret;
        }
        set {
            m_privateObject.SetField("_weaveType", value);
        }
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition m_ObjectLocal {
        get {
            global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.GetField("m_ObjectLocal")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_ObjectLocal", value);
        }
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition m_TypeLocal {
        get {
            global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.GetField("m_TypeLocal")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_TypeLocal", value);
        }
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition m_JpcLocal {
        get {
            global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.GetField("m_JpcLocal")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_JpcLocal", value);
        }
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition m_ActionStoreLocal {
        get {
            global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.GetField("m_ActionStoreLocal")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_ActionStoreLocal", value);
        }
    }
    
    internal void CreateContextExpression(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.ContextExpression expr) {
        object[] args = new object[] {
                expr};
        m_privateObject.Invoke("CreateContextExpression", new System.Type[] {
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.ContextExpression)}, args);
    }
    
    internal global::Mono.Cecil.Cil.Instruction GetJumpLabel(int labelId) {
        object[] args = new object[] {
                labelId};
        global::Mono.Cecil.Cil.Instruction ret = ((global::Mono.Cecil.Cil.Instruction)(m_privateObject.Invoke("GetJumpLabel", new System.Type[] {
                    typeof(int)}, args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition CreateLocalVar(global::System.Type type) {
        object[] args = new object[] {
                type};
        global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.Invoke("CreateLocalVar", new System.Type[] {
                    typeof(global::System.Type)}, args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition CreateLocalVar(global::Mono.Cecil.TypeReference type) {
        object[] args = new object[] {
                type};
        global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.Invoke("CreateLocalVar", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeReference)}, args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition CreateObjectLocal() {
        object[] args = new object[0];
        global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.Invoke("CreateObjectLocal", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition CreateActionStoreLocal() {
        object[] args = new object[0];
        global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.Invoke("CreateActionStoreLocal", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition CreateTypeLocal() {
        object[] args = new object[0];
        global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.Invoke("CreateTypeLocal", new System.Type[0], args)));
        return ret;
    }
    
    internal global::Mono.Cecil.Cil.VariableDefinition CreateJoinPointContextLocal() {
        object[] args = new object[0];
        global::Mono.Cecil.Cil.VariableDefinition ret = ((global::Mono.Cecil.Cil.VariableDefinition)(m_privateObject.Invoke("CreateJoinPointContextLocal", new System.Type[0], args)));
        return ret;
    }
    
    internal void AddInstructionList(System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction> instructions) {
        object[] args = new object[] {
                instructions};
        m_privateObject.Invoke("AddInstructionList", new System.Type[] {
                    typeof(System.Collections.Generic.IList<Mono.Cecil.Cil.Instruction>)}, args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_AdviceActionWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.AdviceActionWeaveStrategy");
    
    internal Composestar_StarLight_ILWeaver_AdviceActionWeaveStrategyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string FilterActionName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilterActionName")));
            return ret;
        }
    }
    
    internal global::System.Type[] m_JpcTypes {
        get {
            global::System.Type[] ret = ((global::System.Type[])(m_privateObject.GetField("m_JpcTypes")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_JpcTypes", value);
        }
    }
    
    internal void Weave(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.MethodDefinition originalCall) {
        object[] args = new object[] {
                visitor,
                filterAction,
                originalCall};
        m_privateObject.Invoke("Weave", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.MethodDefinition)}, args);
    }
    
    internal void CallAdvice(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.TypeDefinition parentType, global::Mono.Cecil.MethodReference methodToCall, global::Mono.Cecil.Cil.VariableDefinition jpcVar) {
        object[] args = new object[] {
                visitor,
                filterAction,
                parentType,
                methodToCall,
                jpcVar};
        m_privateObject.Invoke("CallAdvice", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.TypeDefinition),
                    typeof(global::Mono.Cecil.MethodReference),
                    typeof(global::Mono.Cecil.Cil.VariableDefinition)}, args);
    }
    
    internal global::Mono.Cecil.MethodReference GetMethodToCall(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.TypeDefinition parentType) {
        object[] args = new object[] {
                visitor,
                filterAction,
                parentType};
        global::Mono.Cecil.MethodReference ret = ((global::Mono.Cecil.MethodReference)(m_privateObject.Invoke("GetMethodToCall", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.TypeDefinition)}, args)));
        return ret;
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.AdviceActionWeaveStrategy", new object[0]);
        return ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_ContinueActionWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.ContinueActionWeaveStrategy");
    
    internal Composestar_StarLight_ILWeaver_ContinueActionWeaveStrategyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string FilterActionName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilterActionName")));
            return ret;
        }
    }
    
    internal void Weave(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.MethodDefinition originalCall) {
        object[] args = new object[] {
                visitor,
                filterAction,
                originalCall};
        m_privateObject.Invoke("Weave", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.MethodDefinition)}, args);
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.ContinueActionWeaveStrategy", new object[0]);
        return ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_DefaultWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.DefaultWeaveStrategy");
    
    internal Composestar_StarLight_ILWeaver_DefaultWeaveStrategyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string FilterActionName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilterActionName")));
            return ret;
        }
    }
    
    internal void Weave(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.MethodDefinition originalCall) {
        object[] args = new object[] {
                visitor,
                filterAction,
                originalCall};
        m_privateObject.Invoke("Weave", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.MethodDefinition)}, args);
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.DefaultWeaveStrategy", new object[0]);
        return ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_DispatchActionWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.DispatchActionWeaveStrategy");
    
    internal Composestar_StarLight_ILWeaver_DispatchActionWeaveStrategyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string FilterActionName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilterActionName")));
            return ret;
        }
    }
    
    internal void Weave(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.MethodDefinition originalCall) {
        object[] args = new object[] {
                visitor,
                filterAction,
                originalCall};
        m_privateObject.Invoke("Weave", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.MethodDefinition)}, args);
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.DispatchActionWeaveStrategy", new object[0]);
        return ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_ErrorActionWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.ErrorActionWeaveStrategy");
    
    internal Composestar_StarLight_ILWeaver_ErrorActionWeaveStrategyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string FilterActionName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilterActionName")));
            return ret;
        }
    }
    
    internal void Weave(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.MethodDefinition originalCall) {
        object[] args = new object[] {
                visitor,
                filterAction,
                originalCall};
        m_privateObject.Invoke("Weave", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.MethodDefinition)}, args);
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.ErrorActionWeaveStrategy", new object[0]);
        return ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_FilterActionWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy));
    
    internal Composestar_StarLight_ILWeaver_FilterActionWeaveStrategyAccessor(global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy target) : 
            base(target, m_privateType) {
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy defaultStrategy {
        get {
            global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy ret = ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(m_privateType.GetStaticField("defaultStrategy")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("defaultStrategy", value);
        }
    }
    
    internal static object lockObject {
        get {
            object ret = ((object)(m_privateType.GetStaticField("lockObject")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("lockObject", value);
        }
    }
    
    internal static void CreateStrategyMapping() {
        object[] args = new object[0];
        m_privateType.InvokeStatic("CreateStrategyMapping", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_SubstitutionActionWeaveStrategyAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.SubstitutionActionWeaveStrategy");
    
    internal Composestar_StarLight_ILWeaver_SubstitutionActionWeaveStrategyAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal string FilterActionName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FilterActionName")));
            return ret;
        }
    }
    
    internal void Weave(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction, global::Mono.Cecil.MethodDefinition originalCall) {
        object[] args = new object[] {
                visitor,
                filterAction,
                originalCall};
        m_privateObject.Invoke("Weave", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction),
                    typeof(global::Mono.Cecil.MethodDefinition)}, args);
    }
    
    internal static global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.SubstitutionActionWeaveStrategy", new object[0]);
        return ((global::Composestar.StarLight.ILWeaver.FilterActionWeaveStrategy)(priv_obj.Target));
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILWeaver_WeaveStrategyUtilitiesAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.WeaveStrategyUtilities");
    
    internal Composestar_StarLight_ILWeaver_WeaveStrategyUtilitiesAccessor(object target) : 
            base(target, m_privateType) {
    }
    
    internal static void SetJoinPointContext(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Mono.Cecil.MethodReference originalCall, global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction filterAction) {
        object[] args = new object[] {
                visitor,
                originalCall,
                filterAction};
        m_privateType.InvokeStatic("SetJoinPointContext", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Mono.Cecil.MethodReference),
                    typeof(global::Composestar.StarLight.Entities.WeaveSpec.Instructions.FilterAction)}, args);
    }
    
    internal static void LoadArguments(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Mono.Cecil.MethodReference originalMethod, global::Mono.Cecil.Cil.VariableDefinition jpcVar) {
        object[] args = new object[] {
                visitor,
                originalMethod,
                jpcVar};
        m_privateType.InvokeStatic("LoadArguments", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Mono.Cecil.MethodReference),
                    typeof(global::Mono.Cecil.Cil.VariableDefinition)}, args);
    }
    
    internal static void StoreReturnValue(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Mono.Cecil.MethodReference originalCall, global::Mono.Cecil.Cil.VariableDefinition jpcVar) {
        object[] args = new object[] {
                visitor,
                originalCall,
                jpcVar};
        m_privateType.InvokeStatic("StoreReturnValue", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Mono.Cecil.MethodReference),
                    typeof(global::Mono.Cecil.Cil.VariableDefinition)}, args);
    }
    
    internal static void LoadSelfObject(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor visitor, global::Mono.Cecil.Cil.VariableDefinition jpcVar) {
        object[] args = new object[] {
                visitor,
                jpcVar};
        m_privateType.InvokeStatic("LoadSelfObject", new System.Type[] {
                    typeof(global::Composestar.StarLight.ILWeaver.CecilInliningInstructionVisitor),
                    typeof(global::Mono.Cecil.Cil.VariableDefinition)}, args);
    }
    
    internal static object CreatePrivate() {
        Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject priv_obj = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject("Composestar.StarLight.ILWeaver", "Composestar.StarLight.ILWeaver.WeaveStrategyUtilities", new object[0]);
        return priv_obj.Target;
    }
}
}
