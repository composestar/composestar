// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.Entities.Configuration;
using Composestar.StarLight.ILWeaver;
namespace TestILWeaver
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ILWeaver.CecilWeaverConfiguration and is intended
    ///to contain all Composestar.StarLight.ILWeaver.CecilWeaverConfiguration Unit Tests
    ///</summary>
    [TestClass()]
    public class CecilWeaverConfigurationFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AssemblyConfiguration
        ///</summary>
        [TestMethod()]
        public void AssemblyConfigurationTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            AssemblyConfig val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.AssemblyConfiguration, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.AssemblyConfiguration was" +
                    " not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for BinFolder
        ///</summary>
        [TestMethod()]
        public void BinFolderTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            string val = null; // TODO: Assign to an appropriate value for the property

            target.BinFolder = val;


            Assert.AreEqual(val, target.BinFolder, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.BinFolder was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CecilWeaverConfiguration (AssemblyConfig, ConfigurationContainer)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for CecilWeaverConfiguration (string, bool, string, string, bool, AssemblyConfig, ConfigurationContainer)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest1()
        {
            string outputImagePath = null; // TODO: Initialize to an appropriate value

            bool shouldSignOutput = false; // TODO: Initialize to an appropriate value

            string outputImageSNK = null; // TODO: Initialize to an appropriate value

            string inputImagePath = null; // TODO: Initialize to an appropriate value

            bool delaySignOutput = false; // TODO: Initialize to an appropriate value

            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(outputImagePath, shouldSignOutput, outputImageSNK, inputImagePath, delaySignOutput, assemblyConfig, weaveConfiguration);

            // TODO: Implement code to verify target
            Assert.Inconclusive("TODO: Implement code to verify target");
        }

        /// <summary>
        ///A test for CreateDefaultConfiguration (AssemblyConfig, ConfigurationContainer)
        ///</summary>
        [TestMethod()]
        public void CreateDefaultConfigurationTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration expected = null;
            CecilWeaverConfiguration actual;

            actual = Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.CreateDefaultConfiguration(assemblyConfig, weaveConfiguration);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.CreateDefaultConfiguratio" +
                    "n did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateDefaultConfiguration (string)
        ///</summary>
        [TestMethod()]
        public void CreateDefaultConfigurationTest1()
        {
            string inputImagePath = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration expected = null;
            CecilWeaverConfiguration actual;

            actual = Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.CreateDefaultConfiguration(inputImagePath);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.CreateDefaultConfiguratio" +
                    "n did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateDefaultConfiguration (string, string)
        ///</summary>
        [TestMethod()]
        public void CreateDefaultConfigurationTest2()
        {
            string inputImagePath = null; // TODO: Initialize to an appropriate value

            string outputImagePath = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration expected = null;
            CecilWeaverConfiguration actual;

            actual = Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.CreateDefaultConfiguration(inputImagePath, outputImagePath);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.CreateDefaultConfiguratio" +
                    "n did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for DelaySignOutput
        ///</summary>
        [TestMethod()]
        public void DelaySignOutputTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            bool val = false; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.DelaySignOutput, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.DelaySignOutput was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for InputImagePath
        ///</summary>
        [TestMethod()]
        public void InputImagePathTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            string val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.InputImagePath, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.InputImagePath was not se" +
                    "t correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for OutputImagePath
        ///</summary>
        [TestMethod()]
        public void OutputImagePathTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            string val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.OutputImagePath, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.OutputImagePath was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for OutputImageSNK
        ///</summary>
        [TestMethod()]
        public void OutputImageSNKTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            string val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.OutputImageSNK, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.OutputImageSNK was not se" +
                    "t correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for RuntimeValidate ()
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void RuntimeValidateTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            TestILWeaver.Composestar_StarLight_ILWeaver_CecilWeaverConfigurationAccessor accessor = new TestILWeaver.Composestar_StarLight_ILWeaver_CecilWeaverConfigurationAccessor(target);

            accessor.RuntimeValidate();

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ShouldSignOutput
        ///</summary>
        [TestMethod()]
        public void ShouldSignOutputTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            bool val = false; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.ShouldSignOutput, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.ShouldSignOutput was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for WeaveConfiguration
        ///</summary>
        [TestMethod()]
        public void WeaveConfigurationTest()
        {
            AssemblyConfig assemblyConfig = null; // TODO: Initialize to an appropriate value

            ConfigurationContainer weaveConfiguration = null; // TODO: Initialize to an appropriate value

            CecilWeaverConfiguration target = new CecilWeaverConfiguration(assemblyConfig, weaveConfiguration);

            ConfigurationContainer val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.WeaveConfiguration, "Composestar.StarLight.ILWeaver.CecilWeaverConfiguration.WeaveConfiguration was no" +
                    "t set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
