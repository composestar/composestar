// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.ILWeaver;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Composestar.StarLight.Entities.WeaveSpec.Instructions;
namespace TestILWeaver
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ILWeaver.WeaveStrategyUtilities and is intended
    ///to contain all Composestar.StarLight.ILWeaver.WeaveStrategyUtilities Unit Tests
    ///</summary>
    [TestClass()]
    public class WeaveStrategyUtilitiesTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for LoadArguments (CecilInliningInstructionVisitor, MethodReference, VariableDefinition)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void LoadArgumentsTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            MethodReference originalMethod = null; // TODO: Initialize to an appropriate value

            VariableDefinition jpcVar = null; // TODO: Initialize to an appropriate value

            TestILWeaver.Composestar_StarLight_ILWeaver_WeaveStrategyUtilitiesAccessor.LoadArguments(visitor, originalMethod, jpcVar);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for LoadSelfObject (CecilInliningInstructionVisitor, VariableDefinition)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void LoadSelfObjectTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            VariableDefinition jpcVar = null; // TODO: Initialize to an appropriate value

            TestILWeaver.Composestar_StarLight_ILWeaver_WeaveStrategyUtilitiesAccessor.LoadSelfObject(visitor, jpcVar);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for SetJoinPointContext (CecilInliningInstructionVisitor, MethodReference, FilterAction)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void SetJoinPointContextTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            MethodReference originalCall = null; // TODO: Initialize to an appropriate value

            FilterAction filterAction = null; // TODO: Initialize to an appropriate value

            TestILWeaver.Composestar_StarLight_ILWeaver_WeaveStrategyUtilitiesAccessor.SetJoinPointContext(visitor, originalCall, filterAction);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for StoreReturnValue (CecilInliningInstructionVisitor, MethodReference, VariableDefinition)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILWeaver.dll")]
        [TestMethod()]
        public void StoreReturnValueTest()
        {
            CecilInliningInstructionVisitor visitor = null; // TODO: Initialize to an appropriate value

            MethodReference originalCall = null; // TODO: Initialize to an appropriate value

            VariableDefinition jpcVar = null; // TODO: Initialize to an appropriate value

            TestILWeaver.Composestar_StarLight_ILWeaver_WeaveStrategyUtilitiesAccessor.StoreReturnValue(visitor, originalCall, jpcVar);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
