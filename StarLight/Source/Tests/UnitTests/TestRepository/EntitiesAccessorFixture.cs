// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
#region Using directives
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.Repository;
using Composestar.StarLight.Entities;
using Composestar.StarLight.Entities.Configuration;
using Composestar.StarLight.Entities.LanguageModel;
using Composestar.StarLight.Entities.WeaveSpec;
#endregion

namespace Composestar.Repository.Tests
{

    /// <summary>
    ///This is a test class for Composestar.Repository.EntitiesAccessor and is intended
    ///to contain all Composestar.Repository.EntitiesAccessor Unit Tests
    ///</summary>
    [TestClass()]
    public class EntitiesAccessorFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for EntitiesAccessor ()
        ///</summary>        
        [TestMethod()]
        public void ConstructorTest()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            Assert.IsNotNull(target, "Could not create EntitiesAccessor");
        }


        /// <summary>
        ///A test for Instance
        ///</summary>
        [TestMethod()]
        public void InstanceTest()
        {
            
            Assert.IsNotNull(Composestar.Repository.EntitiesAccessor.Instance, "Composestar.Repository.EntitiesAccessor.Instance was not set correctly.");
            Assert.IsInstanceOfType(Composestar.Repository.EntitiesAccessor.Instance, typeof(EntitiesAccessor), "wrong type"); 
        }


        /// <summary>
        /// Determines whether this instance can save and load assembly elements.
        /// </summary>
        [TestMethod()]
        public void CanSaveAndLoadAssemblyElementTest()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            string filename = "assemblyElement.xml";

            AssemblyElement ae = new AssemblyElement();

            Assert.IsTrue(target.SaveAssemblyElement(filename, ae), "Save function for SaveAssemblyElement did not return true");
            Assert.IsTrue(System.IO.File.Exists(filename), "File {0} did not exists while it should be wrtten.", filename);

            AssemblyElement actual = target.LoadAssemblyElement(filename);

            Assert.IsNotNull(actual, "Could not read file {0}.", filename); 
            Assert.AreEqual(ae, actual, "Composestar.Repository.EntitiesAccessor.LoadAssemblyElement did not return the expected value.");            
        }

        /// <summary>
        /// Determines whether this instance can save and load configuration files.
        /// </summary>
        [TestMethod()]
        public void CanSaveAndLoadConfigurationTest()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            string filename = "config.xml";

            ConfigurationContainer cc = new ConfigurationContainer();
            cc.InstallFolder = "ss";
            ConfigurationContainer actual;

            Assert.IsTrue(target.SaveConfiguration(filename, cc), "Save function for SaveConfiguration did not return true");
            Assert.IsTrue(System.IO.File.Exists(filename), "File {0} did not exists while it should be wrtten.", filename);

            actual = target.LoadConfiguration(filename);

            Assert.IsNotNull(actual, "Could not read file {0}.", filename); 
            Assert.AreEqual(cc.InstallFolder , actual.InstallFolder , "Composestar.Repository.EntitiesAccessor.LoadConfiguration did not return the expected value.");
           
        }

        /// <summary>
        /// Should throw exception when file not found
        /// </summary>
        [TestMethod] 
        [ExpectedException(typeof(System.IO.FileNotFoundException)) ]
        public void ShouldThrowExceptionWhenFileNotFound()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            string filename = "doesnotexists.xml";

            AssemblyElement ae = target.LoadAssemblyElement(filename);
            ConfigurationContainer cc = target.LoadConfiguration(filename);
            WeaveSpecification ws = target.LoadWeaveSpecification(filename); 

        }


        /// <summary>
        /// Shoulds the throw exception parameters are null when loading.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ShouldThrowExceptionParametersAreNullWhenLoading()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            string filename = null;

            AssemblyElement ae = target.LoadAssemblyElement(filename);
            ConfigurationContainer cc = target.LoadConfiguration(filename);
            WeaveSpecification ws = target.LoadWeaveSpecification(filename); 
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentNullException))]
        public void ShouldThrowExceptionParametersAreNullWhenSaving()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            string filename = null;

            target.SaveAssemblyElement(filename, null);
            target.SaveConfiguration(filename, null);
            target.SaveWeaveSpecification(filename, null);
        }

        /// <summary>
        /// Determines whether this instance can save and load weave specification files.
        /// </summary>
        [TestMethod()]
        public void CanSaveAndLoadWeaveSpecificationTest()
        {
            EntitiesAccessor target = TestRepository.Composestar_Repository_EntitiesAccessorAccessor.CreatePrivate();

            string filename = "weavespec.xml"; 

            WeaveSpecification expected = new WeaveSpecification() ;
            expected.AssemblyName = "test"; 
            WeaveSpecification actual;

            Assert.IsTrue(target.SaveWeaveSpecification(filename, expected), "Save function for SaveWeaveSpecification did not return true");
            Assert.IsTrue(System.IO.File.Exists(filename), "File {0} did not exists while it should be wrtten.", filename);

            actual = target.LoadWeaveSpecification(filename);

            Assert.IsNotNull(actual, "Could not read file {0}.", filename); 
            Assert.AreEqual(expected.AssemblyName , actual.AssemblyName , "Composestar.Repository.EntitiesAccessor.LoadWeaveSpecification did not return the expected value.");            
        }

    }

}
