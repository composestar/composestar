// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.Entities.Configuration;
using Composestar.StarLight.Entities.LanguageModel;
namespace TestStarLightEntities
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.Entities.Configuration.AssemblyConfig and is intended
    ///to contain all Composestar.StarLight.Entities.Configuration.AssemblyConfig Unit Tests
    ///</summary>
    [TestClass()]
    public class AssemblyConfigFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Assembly
        ///</summary>
        [TestMethod()]
        public void AssemblyTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            AssemblyElement val = null; // TODO: Assign to an appropriate value for the property

            target.Assembly = val;


            Assert.AreEqual(val, target.Assembly, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.Assembly was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Filename
        ///</summary>
        [TestMethod()]
        public void FilenameTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Filename = val;


            Assert.AreEqual(val, target.Filename, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.Filename was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for GenerateSerializedFilename (string)
        ///</summary>
        [TestMethod()]
        public void GenerateSerializedFilenameTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            string objectFolder = null; // TODO: Initialize to an appropriate value

            target.GenerateSerializedFilename(objectFolder);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for IsReference
        ///</summary>
        [TestMethod()]
        public void IsReferenceTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsReference = val;


            Assert.AreEqual(val, target.IsReference, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.IsReference was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Name
        ///</summary>
        [TestMethod()]
        public void NameTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Name = val;


            Assert.AreEqual(val, target.Name, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.Name was not set corr" +
                    "ectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for SerializedFilename
        ///</summary>
        [TestMethod()]
        public void SerializedFilenameTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.SerializedFilename = val;


            Assert.AreEqual(val, target.SerializedFilename, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.SerializedFilename wa" +
                    "s not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Timestamp
        ///</summary>
        [TestMethod()]
        public void TimestampTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            long val = 0; // TODO: Assign to an appropriate value for the property

            target.Timestamp = val;


            Assert.AreEqual(val, target.Timestamp, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.Timestamp was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for WeaveSpecificationFile
        ///</summary>
        [TestMethod()]
        public void WeaveSpecificationFileTest()
        {
            AssemblyConfig target = new AssemblyConfig();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.WeaveSpecificationFile = val;


            Assert.AreEqual(val, target.WeaveSpecificationFile, "Composestar.StarLight.Entities.Configuration.AssemblyConfig.WeaveSpecificationFil" +
                    "e was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
