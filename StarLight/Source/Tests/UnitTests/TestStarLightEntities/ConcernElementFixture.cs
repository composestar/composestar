// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.Entities.Concerns;
namespace TestStarLightEntities
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.Entities.Concerns.ConcernElement and is intended
    ///to contain all Composestar.StarLight.Entities.Concerns.ConcernElement Unit Tests
    ///</summary>
    [TestClass()]
    public class ConcernElementFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for ConcernName
        ///</summary>
        [TestMethod()]
        public void ConcernNameTest()
        {
            ConcernElement target = new ConcernElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.ConcernName = val;


            Assert.AreEqual(val, target.ConcernName, "Composestar.StarLight.Entities.Concerns.ConcernElement.ConcernName was not set co" +
                    "rrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FileName
        ///</summary>
        [TestMethod()]
        public void FileNameTest()
        {
            ConcernElement target = new ConcernElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.FileName = val;


            Assert.AreEqual(val, target.FileName, "Composestar.StarLight.Entities.Concerns.ConcernElement.FileName was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FullPath
        ///</summary>
        [TestMethod()]
        public void FullPathTest()
        {
            ConcernElement target = new ConcernElement();

            string val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.FullPath, "Composestar.StarLight.Entities.Concerns.ConcernElement.FullPath was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for PathName
        ///</summary>
        [TestMethod()]
        public void PathNameTest()
        {
            ConcernElement target = new ConcernElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.PathName = val;


            Assert.AreEqual(val, target.PathName, "Composestar.StarLight.Entities.Concerns.ConcernElement.PathName was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Timestamp
        ///</summary>
        [TestMethod()]
        public void TimestampTest()
        {
            ConcernElement target = new ConcernElement();

            long val = 0; // TODO: Assign to an appropriate value for the property

            target.Timestamp = val;


            Assert.AreEqual(val, target.Timestamp, "Composestar.StarLight.Entities.Concerns.ConcernElement.Timestamp was not set corr" +
                    "ectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
