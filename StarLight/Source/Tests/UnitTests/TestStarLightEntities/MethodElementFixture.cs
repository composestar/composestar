// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.Entities.LanguageModel;
namespace TestStarLightEntities
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.Entities.LanguageModel.MethodElement and is intended
    ///to contain all Composestar.StarLight.Entities.LanguageModel.MethodElement Unit Tests
    ///</summary>
    [TestClass()]
    public class MethodElementFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for Body
        ///</summary>
        [TestMethod()]
        public void BodyTest()
        {
            MethodElement target = new MethodElement();

            MethodBody val = null; // TODO: Assign to an appropriate value for the property

            target.Body = val;


            Assert.AreEqual(val, target.Body, "Composestar.StarLight.Entities.LanguageModel.MethodElement.Body was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for HasMethodBody
        ///</summary>
        [TestMethod()]
        public void HasMethodBodyTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.HasMethodBody, "Composestar.StarLight.Entities.LanguageModel.MethodElement.HasMethodBody was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsAbstract
        ///</summary>
        [TestMethod()]
        public void IsAbstractTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsAbstract = val;


            Assert.AreEqual(val, target.IsAbstract, "Composestar.StarLight.Entities.LanguageModel.MethodElement.IsAbstract was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsConstructor
        ///</summary>
        [TestMethod()]
        public void IsConstructorTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsConstructor = val;


            Assert.AreEqual(val, target.IsConstructor, "Composestar.StarLight.Entities.LanguageModel.MethodElement.IsConstructor was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsPrivate
        ///</summary>
        [TestMethod()]
        public void IsPrivateTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsPrivate = val;


            Assert.AreEqual(val, target.IsPrivate, "Composestar.StarLight.Entities.LanguageModel.MethodElement.IsPrivate was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsPublic
        ///</summary>
        [TestMethod()]
        public void IsPublicTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsPublic = val;


            Assert.AreEqual(val, target.IsPublic, "Composestar.StarLight.Entities.LanguageModel.MethodElement.IsPublic was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsStatic
        ///</summary>
        [TestMethod()]
        public void IsStaticTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsStatic = val;


            Assert.AreEqual(val, target.IsStatic, "Composestar.StarLight.Entities.LanguageModel.MethodElement.IsStatic was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsVirtual
        ///</summary>
        [TestMethod()]
        public void IsVirtualTest()
        {
            MethodElement target = new MethodElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsVirtual = val;


            Assert.AreEqual(val, target.IsVirtual, "Composestar.StarLight.Entities.LanguageModel.MethodElement.IsVirtual was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Name
        ///</summary>
        [TestMethod()]
        public void NameTest()
        {
            MethodElement target = new MethodElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Name = val;


            Assert.AreEqual(val, target.Name, "Composestar.StarLight.Entities.LanguageModel.MethodElement.Name was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Parameters
        ///</summary>
        [TestMethod()]
        public void ParametersTest()
        {
            MethodElement target = new MethodElement();

            System.Collections.Generic.List<Composestar.StarLight.Entities.LanguageModel.ParameterElement> val = null; // TODO: Assign to an appropriate value for the property

            target.Parameters = val;


            Assert.AreEqual(val, target.Parameters, "Composestar.StarLight.Entities.LanguageModel.MethodElement.Parameters was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ReturnType
        ///</summary>
        [TestMethod()]
        public void ReturnTypeTest()
        {
            MethodElement target = new MethodElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.ReturnType = val;


            Assert.AreEqual(val, target.ReturnType, "Composestar.StarLight.Entities.LanguageModel.MethodElement.ReturnType was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Signature
        ///</summary>
        [TestMethod()]
        public void SignatureTest()
        {
            MethodElement target = new MethodElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Signature = val;


            Assert.AreEqual(val, target.Signature, "Composestar.StarLight.Entities.LanguageModel.MethodElement.Signature was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
