// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.Entities.LanguageModel;
namespace TestStarLightEntities
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.Entities.LanguageModel.TypeElement and is intended
    ///to contain all Composestar.StarLight.Entities.LanguageModel.TypeElement Unit Tests
    ///</summary>
    [TestClass()]
    public class TypeElementFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for BaseType
        ///</summary>
        [TestMethod()]
        public void BaseTypeTest()
        {
            TypeElement target = new TypeElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.BaseType = val;


            Assert.AreEqual(val, target.BaseType, "Composestar.StarLight.Entities.LanguageModel.TypeElement.BaseType was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Fields
        ///</summary>
        [TestMethod()]
        public void FieldsTest()
        {
            TypeElement target = new TypeElement();

            System.Collections.Generic.List<Composestar.StarLight.Entities.LanguageModel.FieldElement> val = null; // TODO: Assign to an appropriate value for the property

            target.Fields = val;


            Assert.AreEqual(val, target.Fields, "Composestar.StarLight.Entities.LanguageModel.TypeElement.Fields was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FullName
        ///</summary>
        [TestMethod()]
        public void FullNameTest()
        {
            TypeElement target = new TypeElement();

            string val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.FullName, "Composestar.StarLight.Entities.LanguageModel.TypeElement.FullName was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ImplementedInterfaces
        ///</summary>
        [TestMethod()]
        public void ImplementedInterfacesTest()
        {
            TypeElement target = new TypeElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.ImplementedInterfaces = val;


            Assert.AreEqual(val, target.ImplementedInterfaces, "Composestar.StarLight.Entities.LanguageModel.TypeElement.ImplementedInterfaces wa" +
                    "s not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsAbstract
        ///</summary>
        [TestMethod()]
        public void IsAbstractTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsAbstract = val;


            Assert.AreEqual(val, target.IsAbstract, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsAbstract was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsClass
        ///</summary>
        [TestMethod()]
        public void IsClassTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsClass = val;


            Assert.AreEqual(val, target.IsClass, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsClass was not set corr" +
                    "ectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsEnum
        ///</summary>
        [TestMethod()]
        public void IsEnumTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsEnum = val;


            Assert.AreEqual(val, target.IsEnum, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsEnum was not set corre" +
                    "ctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsInterface
        ///</summary>
        [TestMethod()]
        public void IsInterfaceTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsInterface = val;


            Assert.AreEqual(val, target.IsInterface, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsInterface was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsNotPublic
        ///</summary>
        [TestMethod()]
        public void IsNotPublicTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsNotPublic = val;


            Assert.AreEqual(val, target.IsNotPublic, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsNotPublic was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsPrimitive
        ///</summary>
        [TestMethod()]
        public void IsPrimitiveTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsPrimitive = val;


            Assert.AreEqual(val, target.IsPrimitive, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsPrimitive was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsPublic
        ///</summary>
        [TestMethod()]
        public void IsPublicTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsPublic = val;


            Assert.AreEqual(val, target.IsPublic, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsPublic was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsSealed
        ///</summary>
        [TestMethod()]
        public void IsSealedTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsSealed = val;


            Assert.AreEqual(val, target.IsSealed, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsSealed was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsSerializable
        ///</summary>
        [TestMethod()]
        public void IsSerializableTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsSerializable = val;


            Assert.AreEqual(val, target.IsSerializable, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsSerializable was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IsValueType
        ///</summary>
        [TestMethod()]
        public void IsValueTypeTest()
        {
            TypeElement target = new TypeElement();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IsValueType = val;


            Assert.AreEqual(val, target.IsValueType, "Composestar.StarLight.Entities.LanguageModel.TypeElement.IsValueType was not set " +
                    "correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Methods
        ///</summary>
        [TestMethod()]
        public void MethodsTest()
        {
            TypeElement target = new TypeElement();

            System.Collections.Generic.List<Composestar.StarLight.Entities.LanguageModel.MethodElement> val = null; // TODO: Assign to an appropriate value for the property

            target.Methods = val;


            Assert.AreEqual(val, target.Methods, "Composestar.StarLight.Entities.LanguageModel.TypeElement.Methods was not set corr" +
                    "ectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Name
        ///</summary>
        [TestMethod()]
        public void NameTest()
        {
            TypeElement target = new TypeElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Name = val;


            Assert.AreEqual(val, target.Name, "Composestar.StarLight.Entities.LanguageModel.TypeElement.Name was not set correct" +
                    "ly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for Namespace
        ///</summary>
        [TestMethod()]
        public void NamespaceTest()
        {
            TypeElement target = new TypeElement();

            string val = null; // TODO: Assign to an appropriate value for the property

            target.Namespace = val;


            Assert.AreEqual(val, target.Namespace, "Composestar.StarLight.Entities.LanguageModel.TypeElement.Namespace was not set co" +
                    "rrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
