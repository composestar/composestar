// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.Entities;
using System.Xml.Schema;
using System.Xml;
namespace TestStarLightEntities
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.Entities.SerializableDictionary&lt;TKey, TValue&gt; and is intended
    ///to contain all Composestar.StarLight.Entities.SerializableDictionary&lt;TKey, TValue&gt; Unit Tests
    ///</summary>
    [TestClass()]
    public class SerializableDictionaryFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for GetSchema ()
        ///</summary>
        [TestMethod()]
        public void GetSchemaTest()
        {
            // SerializableDictionary<TKey, TValue> target = new SerializableDictionary<TKey, TValue>();
            // 
            // XmlSchema expected = null;
            // XmlSchema actual;
            // 
            // actual = target.GetSchema();
            // 
            // Assert.AreEqual(expected, actual, "Composestar.StarLight.Entities.SerializableDictionary<TKey, TValue>.GetSchema did" +
            //        " not return the expected value.");
            // Assert.Inconclusive("Verify the correctness of this test method.");
            Assert.Inconclusive("Generics testing must be manually provided.");
        }

        /// <summary>
        ///A test for ReadXml (System.Xml.XmlReader)
        ///</summary>
        [TestMethod()]
        public void ReadXmlTest()
        {
            // SerializableDictionary<TKey, TValue> target = new SerializableDictionary<TKey, TValue>();
            // 
            // XmlReader reader = null; // TODO: Initialize to an appropriate value
            // 
            // target.ReadXml(reader);
            // 
            // Assert.Inconclusive("A method that does not return a value cannot be verified.");
            Assert.Inconclusive("Generics testing must be manually provided.");
        }

        /// <summary>
        ///A test for WriteXml (System.Xml.XmlWriter)
        ///</summary>
        [TestMethod()]
        public void WriteXmlTest()
        {
            // SerializableDictionary<TKey, TValue> target = new SerializableDictionary<TKey, TValue>();
            // 
            // XmlWriter writer = null; // TODO: Initialize to an appropriate value
            // 
            // target.WriteXml(writer);
            // 
            // Assert.Inconclusive("A method that does not return a value cannot be verified.");
            Assert.Inconclusive("Generics testing must be manually provided.");
        }

    }


}
