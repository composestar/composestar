// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.ILAnalyzer;
using Mono.Cecil;
using Composestar.StarLight.Entities.LanguageModel;
using System.Reflection;
namespace TestILAnalyzer
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor and is intended
    ///to contain all Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor Unit Tests
    ///</summary>
    [TestClass()]
    public class CecilAssemblyVisitorTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddResolvedAssemblyList (string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddResolvedAssemblyListTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            string assemblyName = null; // TODO: Initialize to an appropriate value

            accessor.AddResolvedAssemblyList(assemblyName);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddResolvedType (string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddResolvedTypeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            string typeName = null; // TODO: Initialize to an appropriate value

            accessor.AddResolvedType(typeName);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddResolvedType (TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddResolvedTypeTest1()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            TypeReference type = null; // TODO: Initialize to an appropriate value

            accessor.AddResolvedType(type);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddUnresolvedAssemblyList (string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddUnresolvedAssemblyListTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            string assemblyName = null; // TODO: Initialize to an appropriate value

            accessor.AddUnresolvedAssemblyList(assemblyName);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddUnresolvedAssemblyList (TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddUnresolvedAssemblyListTest1()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            TypeReference typeReference = null; // TODO: Initialize to an appropriate value

            accessor.AddUnresolvedAssemblyList(typeReference);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddUnresolvedType (string)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddUnresolvedTypeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            string typeName = null; // TODO: Initialize to an appropriate value

            accessor.AddUnresolvedType(typeName);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for AddUnresolvedType (TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void AddUnresolvedTypeTest1()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            TypeReference type = null; // TODO: Initialize to an appropriate value

            accessor.AddUnresolvedType(type);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for Analyze (string)
        ///</summary>
        [TestMethod()]
        public void AnalyzeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            string assemblyFilename = null; // TODO: Initialize to an appropriate value

            AssemblyElement expected = null;
            AssemblyElement actual;

            actual = target.Analyze(assemblyFilename);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.Analyze did not return the " +
                    "expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CachedTypes
        ///</summary>
        [TestMethod()]
        public void CachedTypesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<string> val = null; // TODO: Assign to an appropriate value for the property

            target.CachedTypes = val;


            Assert.AreEqual(val, target.CachedTypes, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.CachedTypes was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateAFQN (AssemblyDefinition, TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void CreateAFQNTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            AssemblyDefinition targetAssemblyDefinition = null; // TODO: Initialize to an appropriate value

            TypeReference type = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = accessor.CreateAFQN(targetAssemblyDefinition, type);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.CreateAFQN did not return t" +
                    "he expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateTypeAFQN (AssemblyDefinition, TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void CreateTypeAFQNTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            AssemblyDefinition targetAssemblyDefinition = null; // TODO: Initialize to an appropriate value

            TypeReference type = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = accessor.CreateTypeAFQN(targetAssemblyDefinition, type);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.CreateTypeAFQN did not retu" +
                    "rn the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for CreateTypeName (TypeReference)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void CreateTypeNameTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            TypeReference type = null; // TODO: Initialize to an appropriate value

            string expected = null;
            string actual;

            actual = accessor.CreateTypeName(type);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.CreateTypeName did not retu" +
                    "rn the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ExtractFilterAction (TypeDefinition)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void ExtractFilterActionTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            TypeDefinition type = null; // TODO: Initialize to an appropriate value

            accessor.ExtractFilterAction(type);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ExtractFilterType (TypeDefinition)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void ExtractFilterTypeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            TypeDefinition type = null; // TODO: Initialize to an appropriate value

            accessor.ExtractFilterType(type);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for ExtractUnresolvedOnly
        ///</summary>
        [TestMethod()]
        public void ExtractUnresolvedOnlyTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.ExtractUnresolvedOnly = val;


            Assert.AreEqual(val, target.ExtractUnresolvedOnly, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.ExtractUnresolvedOnly was n" +
                    "ot set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FilterActions
        ///</summary>
        [TestMethod()]
        public void FilterActionsTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<Composestar.StarLight.Entities.Configuration.FilterActionElement> val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.FilterActions, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.FilterActions was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for FilterTypes
        ///</summary>
        [TestMethod()]
        public void FilterTypesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<Composestar.StarLight.Entities.Configuration.FilterTypeElement> val = null; // TODO: Assign to an appropriate value for the property


            Assert.AreEqual(val, target.FilterTypes, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.FilterTypes was not set cor" +
                    "rectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for IncludeFields
        ///</summary>
        [TestMethod()]
        public void IncludeFieldsTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.IncludeFields = val;


            Assert.AreEqual(val, target.IncludeFields, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.IncludeFields was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for MyReflectionOnlyResolveEventHandler (object, ResolveEventArgs)
        ///</summary>
        [DeploymentItem("Composestar.StarLight.ILAnalyzer.dll")]
        [TestMethod()]
        public void MyReflectionOnlyResolveEventHandlerTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor accessor = new TestILAnalyzer.Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(target);

            object sender = null; // TODO: Initialize to an appropriate value

            ResolveEventArgs args = null; // TODO: Initialize to an appropriate value

            Assembly expected = null;
            Assembly actual;

            actual = accessor.MyReflectionOnlyResolveEventHandler(sender, args);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.MyReflectionOnlyResolveEven" +
                    "tHandler did not return the expected value.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ProcessAttributes
        ///</summary>
        [TestMethod()]
        public void ProcessAttributesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.ProcessAttributes = val;


            Assert.AreEqual(val, target.ProcessAttributes, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.ProcessAttributes was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ProcessMethodBody
        ///</summary>
        [TestMethod()]
        public void ProcessMethodBodyTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.ProcessMethodBody = val;


            Assert.AreEqual(val, target.ProcessMethodBody, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.ProcessMethodBody was not s" +
                    "et correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ResolvedAssemblies
        ///</summary>
        [TestMethod()]
        public void ResolvedAssembliesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<string> val = null; // TODO: Assign to an appropriate value for the property

            target.ResolvedAssemblies = val;


            Assert.AreEqual(val, target.ResolvedAssemblies, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.ResolvedAssemblies was not " +
                    "set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for ResolvedTypes
        ///</summary>
        [TestMethod()]
        public void ResolvedTypesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<string> val = null; // TODO: Assign to an appropriate value for the property

            target.ResolvedTypes = val;


            Assert.AreEqual(val, target.ResolvedTypes, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.ResolvedTypes was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for SaveInnerType
        ///</summary>
        [TestMethod()]
        public void SaveInnerTypeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.SaveInnerType = val;


            Assert.AreEqual(val, target.SaveInnerType, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.SaveInnerType was not set c" +
                    "orrectly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for SaveType
        ///</summary>
        [TestMethod()]
        public void SaveTypeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            bool val = false; // TODO: Assign to an appropriate value for the property

            target.SaveType = val;


            Assert.AreEqual(val, target.SaveType, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.SaveType was not set correc" +
                    "tly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UnresolvedAssemblies
        ///</summary>
        [TestMethod()]
        public void UnresolvedAssembliesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<string> val = null; // TODO: Assign to an appropriate value for the property

            target.UnresolvedAssemblies = val;


            Assert.AreEqual(val, target.UnresolvedAssemblies, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.UnresolvedAssemblies was no" +
                    "t set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for UnresolvedTypes
        ///</summary>
        [TestMethod()]
        public void UnresolvedTypesTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            System.Collections.Generic.List<string> val = null; // TODO: Assign to an appropriate value for the property

            target.UnresolvedTypes = val;


            Assert.AreEqual(val, target.UnresolvedTypes, "Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor.UnresolvedTypes was not set" +
                    " correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

        /// <summary>
        ///A test for VisitCustomAttribute (CustomAttribute)
        ///</summary>
        [TestMethod()]
        public void VisitCustomAttributeTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            CustomAttribute customAttr = null; // TODO: Initialize to an appropriate value

            target.VisitCustomAttribute(customAttr);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitFieldDefinition (FieldDefinition)
        ///</summary>
        [TestMethod()]
        public void VisitFieldDefinitionTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            FieldDefinition field = null; // TODO: Initialize to an appropriate value

            target.VisitFieldDefinition(field);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitMethodDefinition (MethodDefinition)
        ///</summary>
        [TestMethod()]
        public void VisitMethodDefinitionTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            MethodDefinition method = null; // TODO: Initialize to an appropriate value

            target.VisitMethodDefinition(method);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

        /// <summary>
        ///A test for VisitTypeDefinition (TypeDefinition)
        ///</summary>
        [TestMethod()]
        public void VisitTypeDefinitionTest()
        {
            CecilAssemblyVisitor target = new CecilAssemblyVisitor();

            TypeDefinition type = null; // TODO: Initialize to an appropriate value

            target.VisitTypeDefinition(type);

            Assert.Inconclusive("A method that does not return a value cannot be verified.");
        }

    }


}
