// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace TestILAnalyzer
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILAnalyzer_CecilILAnalyzerAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILAnalyzer.CecilILAnalyzer));
    
    internal Composestar_StarLight_ILAnalyzer_CecilILAnalyzerAccessor(global::Composestar.StarLight.ILAnalyzer.CecilILAnalyzer target) : 
            base(target, m_privateType) {
    }
    
    internal global::System.TimeSpan _lastDuration {
        get {
            global::System.TimeSpan ret = ((global::System.TimeSpan)(m_privateObject.GetField("_lastDuration")));
            return ret;
        }
        set {
            m_privateObject.SetField("_lastDuration", value);
        }
    }
    
    internal global::Composestar.StarLight.ILAnalyzer.CecilAnalyzerConfiguration _configuration {
        get {
            global::Composestar.StarLight.ILAnalyzer.CecilAnalyzerConfiguration ret = ((global::Composestar.StarLight.ILAnalyzer.CecilAnalyzerConfiguration)(m_privateObject.GetField("_configuration")));
            return ret;
        }
        set {
            m_privateObject.SetField("_configuration", value);
        }
    }
    
    internal global::Composestar.StarLight.CoreServices.IEntitiesAccessor _entitiesAccessor {
        get {
            global::Composestar.StarLight.CoreServices.IEntitiesAccessor ret = ((global::Composestar.StarLight.CoreServices.IEntitiesAccessor)(m_privateObject.GetField("_entitiesAccessor")));
            return ret;
        }
        set {
            m_privateObject.SetField("_entitiesAccessor", value);
        }
    }
    
    internal global::Composestar.StarLight.Utilities.Cecil.StarLightAssemblyResolver _dar {
        get {
            global::Composestar.StarLight.Utilities.Cecil.StarLightAssemblyResolver ret = ((global::Composestar.StarLight.Utilities.Cecil.StarLightAssemblyResolver)(m_privateObject.GetField("_dar")));
            return ret;
        }
        set {
            m_privateObject.SetField("_dar", value);
        }
    }
    
    internal global::Composestar.StarLight.Utilities.Cecil.StarLightAssemblyResolver AssemblyResolver {
        get {
            global::Composestar.StarLight.Utilities.Cecil.StarLightAssemblyResolver ret = ((global::Composestar.StarLight.Utilities.Cecil.StarLightAssemblyResolver)(m_privateObject.GetProperty("AssemblyResolver")));
            return ret;
        }
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILAnalyzer_CecilAnalyzerConfigurationAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILAnalyzer.CecilAnalyzerConfiguration));
    
    internal Composestar_StarLight_ILAnalyzer_CecilAnalyzerConfigurationAccessor(global::Composestar.StarLight.ILAnalyzer.CecilAnalyzerConfiguration target) : 
            base(target, m_privateType) {
    }
    
    internal string _repositoryFilename {
        get {
            string ret = ((string)(m_privateObject.GetField("_repositoryFilename")));
            return ret;
        }
        set {
            m_privateObject.SetField("_repositoryFilename", value);
        }
    }
    
    internal bool _doFieldAnalysis {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_doFieldAnalysis")));
            return ret;
        }
        set {
            m_privateObject.SetField("_doFieldAnalysis", value);
        }
    }
    
    internal bool _doMethodCallAnalysis {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_doMethodCallAnalysis")));
            return ret;
        }
        set {
            m_privateObject.SetField("_doMethodCallAnalysis", value);
        }
    }
    
    internal bool _extractUnresolvedOnly {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_extractUnresolvedOnly")));
            return ret;
        }
        set {
            m_privateObject.SetField("_extractUnresolvedOnly", value);
        }
    }
    
    internal string _binFolder {
        get {
            string ret = ((string)(m_privateObject.GetField("_binFolder")));
            return ret;
        }
        set {
            m_privateObject.SetField("_binFolder", value);
        }
    }
    
    internal void RuntimeValidate() {
        object[] args = new object[0];
        m_privateObject.Invoke("RuntimeValidate", new System.Type[0], args);
    }
}
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor));
    
    internal Composestar_StarLight_ILAnalyzer_CecilAssemblyVisitorAccessor(global::Composestar.StarLight.ILAnalyzer.CecilAssemblyVisitor target) : 
            base(target, m_privateType) {
    }
    
    internal static string ModuleName {
        get {
            string ret = ((string)(m_privateType.GetStaticField("ModuleName")));
            return ret;
        }
        set {
            m_privateType.SetStaticField("ModuleName", value);
        }
    }
    
    internal global::Composestar.StarLight.Entities.LanguageModel.AssemblyElement _assemblyElement {
        get {
            global::Composestar.StarLight.Entities.LanguageModel.AssemblyElement ret = ((global::Composestar.StarLight.Entities.LanguageModel.AssemblyElement)(m_privateObject.GetField("_assemblyElement")));
            return ret;
        }
        set {
            m_privateObject.SetField("_assemblyElement", value);
        }
    }
    
    internal global::Mono.Cecil.AssemblyDefinition _assembly {
        get {
            global::Mono.Cecil.AssemblyDefinition ret = ((global::Mono.Cecil.AssemblyDefinition)(m_privateObject.GetField("_assembly")));
            return ret;
        }
        set {
            m_privateObject.SetField("_assembly", value);
        }
    }
    
    internal bool _saveType {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_saveType")));
            return ret;
        }
        set {
            m_privateObject.SetField("_saveType", value);
        }
    }
    
    internal bool _saveInnerType {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_saveInnerType")));
            return ret;
        }
        set {
            m_privateObject.SetField("_saveInnerType", value);
        }
    }
    
    internal bool _processMethodBody {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_processMethodBody")));
            return ret;
        }
        set {
            m_privateObject.SetField("_processMethodBody", value);
        }
    }
    
    internal bool _processAttributes {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_processAttributes")));
            return ret;
        }
        set {
            m_privateObject.SetField("_processAttributes", value);
        }
    }
    
    internal bool _includeFields {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_includeFields")));
            return ret;
        }
        set {
            m_privateObject.SetField("_includeFields", value);
        }
    }
    
    internal bool _extractUnresolvedOnly {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_extractUnresolvedOnly")));
            return ret;
        }
        set {
            m_privateObject.SetField("_extractUnresolvedOnly", value);
        }
    }
    
    internal global::Composestar.StarLight.Entities.LanguageModel.TypeElement _currentType {
        get {
            global::Composestar.StarLight.Entities.LanguageModel.TypeElement ret = ((global::Composestar.StarLight.Entities.LanguageModel.TypeElement)(m_privateObject.GetField("_currentType")));
            return ret;
        }
        set {
            m_privateObject.SetField("_currentType", value);
        }
    }
    
    internal string _filterTypeName {
        get {
            string ret = ((string)(m_privateObject.GetField("_filterTypeName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_filterTypeName", value);
        }
    }
    
    internal string _filterTypeAnnotationName {
        get {
            string ret = ((string)(m_privateObject.GetField("_filterTypeAnnotationName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_filterTypeAnnotationName", value);
        }
    }
    
    internal string _filterActionName {
        get {
            string ret = ((string)(m_privateObject.GetField("_filterActionName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_filterActionName", value);
        }
    }
    
    internal string _filterActionAnnotationName {
        get {
            string ret = ((string)(m_privateObject.GetField("_filterActionAnnotationName")));
            return ret;
        }
        set {
            m_privateObject.SetField("_filterActionAnnotationName", value);
        }
    }
    
    internal string m_rootAssembly {
        get {
            string ret = ((string)(m_privateObject.GetField("m_rootAssembly")));
            return ret;
        }
        set {
            m_privateObject.SetField("m_rootAssembly", value);
        }
    }
    
    internal void ExtractFilterAction(global::Mono.Cecil.TypeDefinition type) {
        object[] args = new object[] {
                type};
        m_privateObject.Invoke("ExtractFilterAction", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeDefinition)}, args);
    }
    
    internal global::System.Reflection.Assembly MyReflectionOnlyResolveEventHandler(object sender, global::System.ResolveEventArgs args) {
        object[] _args = new object[] {
                sender,
                args};
        global::System.Reflection.Assembly ret = ((global::System.Reflection.Assembly)(m_privateObject.Invoke("MyReflectionOnlyResolveEventHandler", new System.Type[] {
                    typeof(object),
                    typeof(global::System.ResolveEventArgs)}, _args)));
        return ret;
    }
    
    internal void ExtractFilterType(global::Mono.Cecil.TypeDefinition type) {
        object[] args = new object[] {
                type};
        m_privateObject.Invoke("ExtractFilterType", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeDefinition)}, args);
    }
    
    internal void AddResolvedAssemblyList(string assemblyName) {
        object[] args = new object[] {
                assemblyName};
        m_privateObject.Invoke("AddResolvedAssemblyList", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal void AddUnresolvedAssemblyList(string assemblyName) {
        object[] args = new object[] {
                assemblyName};
        m_privateObject.Invoke("AddUnresolvedAssemblyList", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal void AddUnresolvedAssemblyList(global::Mono.Cecil.TypeReference typeReference) {
        object[] args = new object[] {
                typeReference};
        m_privateObject.Invoke("AddUnresolvedAssemblyList", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeReference)}, args);
    }
    
    internal void AddResolvedType(string typeName) {
        object[] args = new object[] {
                typeName};
        m_privateObject.Invoke("AddResolvedType", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal void AddUnresolvedType(string typeName) {
        object[] args = new object[] {
                typeName};
        m_privateObject.Invoke("AddUnresolvedType", new System.Type[] {
                    typeof(string)}, args);
    }
    
    internal void AddUnresolvedType(global::Mono.Cecil.TypeReference type) {
        object[] args = new object[] {
                type};
        m_privateObject.Invoke("AddUnresolvedType", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeReference)}, args);
    }
    
    internal void AddResolvedType(global::Mono.Cecil.TypeReference type) {
        object[] args = new object[] {
                type};
        m_privateObject.Invoke("AddResolvedType", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeReference)}, args);
    }
    
    internal string CreateTypeName(global::Mono.Cecil.TypeReference type) {
        object[] args = new object[] {
                type};
        string ret = ((string)(m_privateObject.Invoke("CreateTypeName", new System.Type[] {
                    typeof(global::Mono.Cecil.TypeReference)}, args)));
        return ret;
    }
    
    internal string CreateTypeAFQN(global::Mono.Cecil.AssemblyDefinition targetAssemblyDefinition, global::Mono.Cecil.TypeReference type) {
        object[] args = new object[] {
                targetAssemblyDefinition,
                type};
        string ret = ((string)(m_privateObject.Invoke("CreateTypeAFQN", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.TypeReference)}, args)));
        return ret;
    }
    
    internal string CreateAFQN(global::Mono.Cecil.AssemblyDefinition targetAssemblyDefinition, global::Mono.Cecil.TypeReference type) {
        object[] args = new object[] {
                targetAssemblyDefinition,
                type};
        string ret = ((string)(m_privateObject.Invoke("CreateAFQN", new System.Type[] {
                    typeof(global::Mono.Cecil.AssemblyDefinition),
                    typeof(global::Mono.Cecil.TypeReference)}, args)));
        return ret;
    }
}
}
