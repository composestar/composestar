// ------------------------------------------------------------------------------
//<autogenerated>
//        This code was generated by Microsoft Visual Studio Team System 2005.
//
//        Changes to this file may cause incorrect behavior and will be lost if
//        the code is regenerated.
//</autogenerated>
//------------------------------------------------------------------------------
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Composestar.StarLight.CpsParser.Tests.UnitTests
{
[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class BaseAccessor {
    
    protected Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject m_privateObject;
    
    protected BaseAccessor(object target, Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) {
        m_privateObject = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateObject(target, type);
    }
    
    protected BaseAccessor(Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType type) : 
            this(null, type) {
    }
    
    internal virtual object Target {
        get {
            return m_privateObject.Target;
        }
    }
    
    public override string ToString() {
        return this.Target.ToString();
    }
    
    public override bool Equals(object obj) {
        if (typeof(BaseAccessor).IsInstanceOfType(obj)) {
            obj = ((BaseAccessor)(obj)).Target;
        }
        return this.Target.Equals(obj);
    }
    
    public override int GetHashCode() {
        return this.Target.GetHashCode();
    }
}


[System.Diagnostics.DebuggerStepThrough()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TestTools.UnitTestGeneration", "1.0.0.0")]
internal class Composestar_StarLight_CpsParser_CpsFileParserAccessor : BaseAccessor {
    
    protected static Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType m_privateType = new Microsoft.VisualStudio.TestTools.UnitTesting.PrivateType(typeof(global::Composestar.StarLight.CpsParser.CpsFileParser));
    
    internal Composestar_StarLight_CpsParser_CpsFileParserAccessor(global::Composestar.StarLight.CpsParser.CpsFileParser target) : 
            base(target, m_privateType) {
    }
    
    internal global::Composestar.StarLight.CpsParser.CpsParserConfiguration _configuration {
        get {
            global::Composestar.StarLight.CpsParser.CpsParserConfiguration ret = ((global::Composestar.StarLight.CpsParser.CpsParserConfiguration)(m_privateObject.GetField("_configuration")));
            return ret;
        }
        set {
            m_privateObject.SetField("_configuration", value);
        }
    }
    
    internal string FileName {
        get {
            string ret = ((string)(m_privateObject.GetProperty("FileName")));
            return ret;
        }
    }
    
    internal bool _hasOutputFilters {
        get {
            bool ret = ((bool)(m_privateObject.GetField("_hasOutputFilters")));
            return ret;
        }
        set {
            m_privateObject.SetField("_hasOutputFilters", value);
        }
    }
    
    internal string Walk(global::antlr.collections.AST tree, bool doType, string parsingType) {
        object[] args = new object[] {
                tree,
                doType,
                parsingType};
        string ret = ((string)(m_privateObject.Invoke("Walk", new System.Type[] {
                    typeof(global::antlr.collections.AST),
                    typeof(bool),
                    typeof(string)}, args)));
        return ret;
    }
}
}
