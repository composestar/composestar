/**
 * "The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is ca.ubc.cs.spl.aspectPatterns. 
 * 
 * The Initial Developers of the Original Code are Jan Hannemann and Gregor Kiczales.
 * 
 * For more details and the latest version of the original code, please see: 
 * http://www.cs.ubc.ca/labs/spl/projects/aodps.html
 * 
 * Contributor(s): Stephan Huttenhuis.
 * 
 * The modified version of the code is part of the Compose* project which can be found at: 
 * http://composestar.sf.net
 * 
 */
package Composestar.Patterns.Interpreter;

public class Main {  
    
	private static void assignAndEvaluate(VariableExpression x, boolean xValue, VariableExpression y, boolean yValue, VariableContext context, BooleanExpression exp) {
		context.assign(x, xValue);
		context.assign(y, yValue);
		boolean result = exp.evaluate(context);
		System.out.println("The result for (x="+xValue+", y="+yValue+") is: "+result);
	}

	public static void main(String[] args) {
		//init context
		VariableContext context = new VariableContext();
		VariableExpression x = new VariableExpression("X");
		VariableExpression y = new VariableExpression("Y");		

		//create expression
		BooleanExpression exp = null;		
		exp = new OrExpression(new AndExpression(new BooleanConstant(true), x), 
					    new AndExpression(y, new NotExpression(x)));
		
		//test expression
		System.out.println("Testing Expression: ((true & x) | (y & !x))");			 

		assignAndEvaluate(x, false, y, false, context, exp);
		assignAndEvaluate(x, false, y, true,  context, exp);
		assignAndEvaluate(x, true,  y, false, context, exp);
		assignAndEvaluate(x, true,  y, true,  context, exp);
		
		//create new expression
		VariableExpression z = new VariableExpression("Z");
		context.assign(z, false);
		NotExpression   notZ = new NotExpression(z);

		BooleanExpression replacement = exp.replace("Y", notZ);
		boolean result = replacement.evaluate(context);

		System.out.println("Replacing y with !z where z = false");
		System.out.println("The result for the replacement is: "+result);
	}
}
		