package Composestar.Patterns.Observer;

import java.util.*;
import Composestar.RuntimeCore.FLIRT.Message.ReifiedMessage;

//generic implementation if refresh is the method on the observer side
public class Subject
{
	private HashMap observersPerSubject;

	private Subject()
	{
		this.observersPerSubject = new HashMap();
	}

	private static Subject instance;

	public static Subject instance()
	{
		if(instance==null)
		{
			instance = new Subject();
		}
		return instance;
	}

	public void addObserver(Object subject, Object observer){
		System.out.println("adding: "+observer.toString());
		HashSet observers = (HashSet) this.observersPerSubject.get(subject);
		if(observers == null)
		{
			observers = new HashSet();
		}
		observers.add(observer);
		this.observersPerSubject.put(subject,observers);
	}
    
	public void removeObserver(Object subject, Object observer) 
	{
		HashSet observers = (HashSet) this.observersPerSubject.get(subject);
		if(observers != null)
		{
			observers.remove(observer);
			this.observersPerSubject.put(subject,observers);
		}
	}

	public void notifyObservers(ReifiedMessage message) 
	{
		message.proceed();
		Object subject = message.getTarget();
		System.out.println("Notifying Observers for subject: "+subject.toString());
		HashSet observers = (HashSet) this.observersPerSubject.get(subject);
		for (Iterator e = observers.iterator(); e.hasNext();) 
		{
			Object object = e.next();
			System.out.println("Notifying Observer: "+object.toString());
			Observer observer = (Observer)object;
			observer.refresh(subject);
		}
	}
}
