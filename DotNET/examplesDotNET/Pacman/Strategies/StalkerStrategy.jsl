//Source file: H:\\cvs\\home\\staijen\\Pacman\\src\\pacman\\StalkerStrategy.java

//Source file: H:\\cvs\\home\\staijen\\Pacman\\src\\pacman\\ghost\\StalkerStrategy.java

package pacman.Strategies;
import pacman.*;

public class StalkerStrategy 
{
   
   /**
   @param glyph
   @param maze
   @return int
   @roseuid 403DF50F01E2
    */
   public int getNextMove(Glyph glyph, World maze) 
   {
		int left = Direction.LEFT;
	    int right = Direction.RIGHT;
	    int up = Direction.UP;
	    int down = Direction.DOWN;

	    int x,y,dx,dy,adx,ady;
		x = glyph.getX();
		y = glyph.getY();
		dx = dy = 0;
		
	    Pacman pacman = maze.getPacman();
	   
	    dx = pacman.x-glyph.x;
		dy = pacman.y-glyph.y;
		adx = Math.abs(dx);
		ady = Math.abs(dy);
	    
		int current = glyph.getDirection();
	    
	   boolean leftOk = maze.canMove(left, x, y );
	   boolean rightOk = maze.canMove(right, x, y );
	   boolean upOk = maze.canMove(up, x, y);
	   boolean downOk = maze.canMove(down,x,y);

		   // try to keep going where i was going
	   if(adx > ady) 
	   {
		   if(dx > 0 && rightOk && current != left ) return right;
		   else if(dx < 0 && leftOk && current != right ) return left;
		   else if(dy < 0 && upOk && current != down ) return up;
		   else if(dy > 0 && downOk && current != up ) return down;

	   }
	   else if(adx == ady)
	   {
			if(dx > 0 && rightOk && current != left ) return right;
			else if(dx < 0 && leftOk && current != right ) return left;
			else if(dy < 0 && upOk && current != down ) return up;
			else if(dy > 0 && downOk && current != up ) return down;
	   }
	   else
	   {
			if(dy < 0 && upOk && current != down ) return up;
			else if(dy > 0 && downOk && current != up ) return down;
			else if(dx > 0 && rightOk && current != left ) return right;
			else if(dx < 0 && leftOk && current != right ) return left;
	   }
	   
	    // can't get closer, trying to not get further away over largest distance

	   if( adx <= ady && dx >= 0 && leftOk && current != right ) return left;
	   else if( adx <= ady && dx <= 0 && rightOk && current != left ) return right;
	   else if( ady <= adx && dy >= 0 && upOk && current != down ) return up;
	   else if( ady <= adx && dy <= 0 && downOk && current != up ) return down;
	   else if( dx >= 0 && leftOk && current != right ) return left;
	   else if( dx <= 0 && rightOk && current != left ) return right;
	   else if( dy >= 0 && upOk && current != down ) return up;
	   else if( dy <= 0 && downOk&& current != up ) return down;
	
		// should never happen
		System.out.println("This sucks, no valid choice could be made");
	   return 0;
	   
   }
}

