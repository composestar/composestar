<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--Import the standards targets-->
  <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

  <!--Reference the assembly where our tasks are defined-->
  <UsingTask TaskName="Trese.ComposestarTasks.ComposestarCompilerTask" AssemblyFile="ComposestarTasks.dll" />
  <UsingTask TaskName="CreateCSharpManifestResourceName" AssemblyName="Microsoft.Build.Tasks, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"/>

  <!--Compile target (this is the target that calls the compiler task)-->
  <Target Name="ComposeStarCompilerTarget">
    <Message Text="Building: @(IntermediateAssembly)"/>
    <GetFrameworkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkPath"/>
    </GetFrameworkPath>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkSdkPath"/>
    </GetFrameworkSdkPath>
    <ComposestarCompilerTask
      ProjectName="$(MSBuildProjectName)" 
      ProjectPath="$(MSBuildProjectDirectory)"
      BuildPath="$(MSBuildProjectDirectory)\$(OutputPath)" 
      SourceFiles="@(Compile)"
      ReferencedAssemblies="@(ReferencePath)"
      OutputPath="$(MSBuildProjectDirectory)\$(OutputPath)"
      OutputAssembly="@(IntermediateAssembly)"
      FrameworkPath="$(FrameworkPath)" 
      FrameworkSdkPath="$(FrameworkSdkPath)"
    />
<!--
      ResourceFiles="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
      MainFile="$(MainFile)"
      TargetKind="$(OutputType)"
      IncludeDebugInformation="$(IncludeDebugInformation)"
-->
  </Target>

  <!--This is an override of CoreCompile to have our IronPythonCompilerTarget be called at compile time-->
  <Target
    Name="CoreCompile"
    Inputs="@(Compile);@(ReferencePath)"
    Outputs="@(IntermediateAssembly)" 
    DependsOnTargets="ComposeStarCompilerTarget"
  />
<!--
    DependsOnTargets="$(CoreCompileDependsOn);ComposeStarCompilerTarget"
-->
  <PropertyGroup>
    <CreateManifestResourceNamesDependsOn></CreateManifestResourceNamesDependsOn>
  </PropertyGroup>

  <Target
      Name="CreateManifestResourceNames"
      Condition="'@(ResxWithNoCulture)@(ResxWithCulture)@(NonResxWithNoCulture)@(NonResxWithCulture)'!=''"
      DependsOnTargets="$(CreateManifestResourceNamesDependsOn)"
  >

    <!-- Create the target resource names for non-culture resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(ResxWithNoCulture)'!=''"
          ResourceFiles="@(ResxWithNoCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithNoCultureName"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for culture resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(ResxWithCulture)'!=''"
          ResourceFiles="@(ResxWithCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestResourceWithCultureName"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for non-culture non-resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(NonResxWithNoCulture)'!=''"
          ResourceFiles="@(NonResxWithNoCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithNoCulture"/>

    </CreateCSharpManifestResourceName>

    <!-- Create the target resource names for culture non-resx files. -->
    <CreateCSharpManifestResourceName Condition="'@(NonResxWithCulture)'!=''"
          ResourceFiles="@(NonResxWithCulture)"
          RootNamespace="$(RootNamespace)">

      <Output TaskParameter="ManifestResourceNames" ItemName="ManifestNonResxWithCulture"/>

    </CreateCSharpManifestResourceName>
  </Target>

</Project>