/**
 * "The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is ca.ubc.cs.spl.aspectPatterns. 
 * 
 * The Initial Developers of the Original Code are Jan Hannemann and Gregor Kiczales.
 * 
 * For more details and the latest version of the original code, please see: 
 * http://www.cs.ubc.ca/labs/spl/projects/aodps.html
 * 
 * Contributor(s): Stephan Huttenhuis.
 * 
 * The modified version of the code is part of the Compose* project which can be found at: 
 * http://composestar.sf.net
 * 
 */
package Composestar.Patterns.State;

public class Main { 
    
	private static void testInsert(Queue queue, String s) {
		System.out.println("Trying to insert ["+s+"] into the queue ... ");
		Boolean b = queue.insert((Object)s);
		boolean status = b.booleanValue();
		if (status == true) {
			System.out.println("successfully inserted"); 
		} else {
			System.out.println("NOT successful, queue probably full");
		}
	}

	private static void testRemove(Queue queue) {
		System.out.println("Trying to remove 1st element of the queue ... ");
		String item = (String) queue.getFirst(); 
		Boolean returnValue = queue.removeFirst();
		boolean status = returnValue.booleanValue();
		if (status == true) {
			System.out.println("successfully removed: "+item); 
		} else {
			System.out.println("NOT successful - no item in queue: "+item);
		}
	}

	public static void main(String[] args) {

		System.out.println("Testing Pattern: State - STARTING\n");
		
		Queue queue = new Queue();
		testInsert(queue, "This ");
		testInsert(queue, "is ");  
		testInsert(queue, "a ");
		testInsert(queue, "test");   

		testInsert(queue, "two");   
		testInsert(queue, "more");   

		System.out.println();
		
		testRemove(queue);
		testRemove(queue);
		testRemove(queue);
		testRemove(queue);

		testRemove(queue);
		testRemove(queue);

		System.out.println("Another test");
		System.out.println();

		testInsert(queue, "Another ");
		testInsert(queue, "test ");  
		System.out.println();
		
		testRemove(queue);
		testRemove(queue);
		testRemove(queue);
		
		System.out.println("\nTesting Pattern: State - FINISHED");
	}
}
	