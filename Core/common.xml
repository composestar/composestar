<?xml version="1.0" encoding="UTF-8"?>
<!--
	
	Common routines. Always include this file in every build.xml file
	
-->
<project name="ComposeStarCommon" xmlns:cs="antlib:Composestar">

	<target name="init" unless="build.initialized">
		<property name="build.initialized" value="true" />
		<tstamp />

		<!-- figure out the directory where common.xml is located -->
		<dirname property="build.core.init" file="${ant.file.ComposeStarCommon}" />

		<!-- load build.ini (if available) -->
		<!-- all properties can be overridden in this file -->
		<property file="${build.core.init}/build.ini" />

		<!-- The build label. This is passed by CruiseControl. Defaults to .0 (dev build). -->
		<property name="label" value="build.0" />

		<!-- 
			Extract just the build number from the label. The following formats are supported:
			build.# 			(default build label of cruisecontrol)
			svn.<svnversion> 	(the svnversion output)
		-->
		<cs:extractBuildNumber label="${label}" property="version.build" />
		<echo level="verbose" message="Build number = ${version.build}" />

		<!-- version numbers, used in installers e.a. Note: must be: [major].[minor].[release] -->
		<property name="version.core" value="0.9.4" />
		<property name="version.java" value="${version.core}" />
		<property name="version.starlight" value="${version.core}" />
		<property name="version.cwc" value="${version.core}" />

		<!-- 
			Creates the eclipse version qualifier. This is used for the eclipse plugin
			versions instead of the plain build label. Development builds (version.build=0)
			will get the qualifier "DEV", true integration builds get something like:
			"b00008765". For more information see the Eclipse version format.  
		-->
		<script language="javascript">
			<![CDATA[
			var versionBuild = project.getProperty("version.build");
			if (versionBuild == "0")
			{
				versionBuild = "DEV";
			}
			else 
			{
				versionBuild = "00000000"+versionBuild;
				versionBuild = "b"+versionBuild.substr(versionBuild.length-8);
			}
			project.setProperty("version.eclipse.qualifier", versionBuild);
		]]>
		</script>

		<!-- various config items -->
		<property name="out.build" value="build" />
		<property name="out.dist" value="dist" />
		<property name="out.qa" value="qa" />

		<property name="out.jar.core" value="${out.dist}${file.separator}lib${file.separator}ComposestarCORE.jar" />
		<property name="out.jar.java" value="${out.dist}${file.separator}lib${file.separator}ComposestarJava.jar" />
		<property name="out.jar.starlight" value="${out.dist}${file.separator}StarLight.jar" />
		<property name="out.jar.cwc" value="${out.dist}${file.separator}lib${file.separator}ComposestarCwC.jar" />
		<property name="out.jar.visualization" value="${out.dist}${file.separator}lib${file.separator}ComposestarVisualization.jar" />

		<!-- options for javac -->
		<property name="ant.build.javac.target" value="1.5" />
		<property name="ant.build.javac.source" value="${ant.build.javac.target}" />
		<property name="build.debug" value="true" />
		<property name="build.deprecation" value="false" />

		<!-- options for msbuild -->
		<condition property="msbuild.config" value="debug" else="release">
			<istrue value="${build.debug}" />
		</condition>

		<!-- register environment variables -->
		<property environment="env" />
		<property name="env.PATH" value="${env.Path}" />

		<!-- set the core path -->
		<property name="build.core" value="${build.core.init}" />

		<!-- set the root path -->
		<dirname property="build.root" file="${build.core}" />

		<!-- set platform paths -->
		<property name="build.starlight" value="${build.root}${file.separator}StarLight" />
		<property name="build.java" value="${build.root}${file.separator}Java" />
		<property name="build.cwc" value="${build.root}${file.separator}CwC" />

		<!-- check which platforms are available -->
		<available file="${build.starlight}${file.separator}build.xml" property="available.starlight" />
		<available file="${build.java}${file.separator}build.xml" property="available.java" />
		<available file="${build.cwc}${file.separator}Compiletime${file.separator}lib${file.separator}weavec.jar" property="available.cwc" />

		<!-- set default values of ignore properties for all platforms -->
		<property name="ignore.starlight" value="false" />
		<property name="ignore.java" value="false" />
		<property name="ignore.cwc" value="false" />

		<!-- set the enabled properties for all platforms based on available and ignore -->
		<condition property="enabled.starlight" value="true">
			<and>
				<istrue value="${available.starlight}" />
				<isfalse value="${ignore.starlight}" />
			</and>
		</condition>

		<condition property="enabled.java" value="true">
			<and>
				<istrue value="${available.java}" />
				<isfalse value="${ignore.java}" />
			</and>
		</condition>

		<condition property="enabled.cwc" value="true">
			<and>
				<istrue value="${available.cwc}" />
				<isfalse value="${ignore.cwc}" />
			</and>
		</condition>

		<!-- resolve system variables -->
		<property name="env.SYSTEMROOT" value="${env.SystemRoot}" />
		<condition property="anthelper.version" value="" else="2">
			<available file="${env.SYSTEMROOT}\Microsoft.NET\Framework\v1.1.4322" type="dir" />
		</condition>

		<exec executable="${build.core}${file.separator}Development${file.separator}AntHelper${anthelper.version}.exe" failifexecutionfails="false" osfamily="windows">
			<arg value="getsystemproperties" />
			<arg value="${build.core}${file.separator}Development${file.separator}system.properties" />
		</exec>

		<property file="${build.core}${file.separator}Development${file.separator}system.properties" />

		<!-- location of the Compose* installation -->
		<condition property="starlight.installdir" value="C:${file.separator}Program Files${file.separator}StarLight">
			<os family="windows" />
		</condition>

		<!-- final fallback -->
		<property name="starlight.installdir" value="${user.home}${file.separator}StarLight" />

		<!-- make macro -->
		<macrodef name="make">
			<attribute name="target" default="" />
			<sequential>
				<condition property="bin.make" value="${build.core}${file.separator}Compiletime${file.separator}lib${file.separator}make${file.separator}make" else="make">
					<os family="windows" />
				</condition>
				<exec executable="${bin.make}" searchpath="true">
					<env key="PATH" path="${env.PATH};${build.core}${file.separator}Compiletime${file.separator}lib${file.separator}make${file.separator}" />
					<arg value="@{target}" />
				</exec>
			</sequential>
		</macrodef>

		<!-- msbuild macro -->
		<macrodef name="msbuild">

			<attribute name="solution" />
			<attribute name="config" default="Release" />
			<attribute name="target" default="rebuild" />

			<sequential>
				<exec executable="msbuild" failonerror="true">
					<arg value="@{solution}" />
					<arg value="/nologo" />
					<arg value="/v:quiet" />
					<arg value="/t:@{target}" />
					<arg value="/p:Configuration=@{config}" />
				</exec>
			</sequential>

		</macrodef>

		<!-- Macro to detect and assert the .NET version of a .NET utility -->
		<macrodef name="assertDotNetUtil">
			<attribute name="util" />
			<!-- executable -->
			<attribute name="version" />
			<!-- regex -->
			<sequential>
				<exec executable="@{util}" failifexecutionfails="false" outputproperty="assertDotNetUtil.@{util}">
					<arg value="/?" />
				</exec>
				<fail message="@{util}'s version does not match: Version @{version}">
					<condition>
						<not>
							<matches string="${assertDotNetUtil.@{util}}" pattern="Version @{version}" />
						</not>
					</condition>
				</fail>
			</sequential>
		</macrodef>

		<!-- registerAssembly macro -->
		<macrodef name="registerAssembly">
			<attribute name="dll" />
			<sequential>
				<exec executable="regasm.exe" failifexecutionfails="false">
					<arg value="@{dll}" />
					<arg value="/silent" />
					<arg value="/codebase" />
				</exec>
			</sequential>
		</macrodef>

		<!-- unregisterAssembly macro -->
		<macrodef name="unregisterAssembly">
			<attribute name="dll" />
			<sequential>
				<exec executable="regasm.exe" failifexecutionfails="false">
					<arg value="@{dll}" />
					<arg value="/silent" />
					<arg value="/unregister" />
				</exec>
			</sequential>
		</macrodef>

		<!-- register additional libraries -->
		<path id="lib.core">
			<fileset dir="${build.core}${file.separator}Compiletime${file.separator}lib">
				<include name="**/*.jar" />

				<!-- these are only needed for the antlr tool -->
				<exclude name="antrl/antlr-3.jar" />
				<exclude name="antrl/stringtemplate-3.1b1.jar" />
			</fileset>
		</path>

		<path id="lib.java">
			<path refid="lib.core" />
			<fileset dir="${build.core}${file.separator}Compiletime" includes="${out.jar.core}" />
			<fileset dir="${build.java}${file.separator}Compiletime${file.separator}lib" includes="*/*.jar" />
		</path>

		<path id="lib.starlight">
			<path refid="lib.core" />
			<fileset dir="${build.core}/Compiletime" includes="${out.jar.core}" />
			<fileset dir="${build.starlight}/Libraries" includes="**/*.jar" />
			<fileset dir="${build.starlight}/Source/Compiletime/lib" includes="*.jar" />
		</path>

		<path id="lib.cwc">
			<path refid="lib.core" />
			<fileset dir="${build.core}${file.separator}Compiletime" includes="${out.jar.core}" />
			<fileset dir="${build.cwc}${file.separator}Compiletime${file.separator}lib" includes="*.jar" />
		</path>

		<!-- svn task -->
		<path id="lib.svnant">
			<fileset dir="${build.core}${file.separator}Development${file.separator}svnant${file.separator}lib" includes="*.jar" />
		</path>
		<taskdef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="lib.svnant" />

		<!-- initial eclipse initialization -->
		<!-- location of Eclipse pluginsfolder -->
		<property name="eclipse.home" value="${env.ECLIPSE_HOME}" />

		<condition property="available.eclipse">
			<available file="${eclipse.home}${file.separator}.eclipseproduct" />
		</condition>

		<!-- load antcontrib additions -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" />
	</target>

	<target name="-init_findbugs" description="initialize findbugs tasks" unless="target.init_findbugs.done">
		<property name="target.init_findbugs.done" value="true" />

		<!-- findbugs jars -->
		<path id="lib.findbugs">
			<fileset dir="${build.core}${file.separator}Development${file.separator}findbugs${file.separator}lib" includes="*.jar" />
		</path>

		<!-- register findbugs task -->
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="lib.findbugs" />

		<condition property="bin.findbugs" value="${build.core}${file.separator}Development${file.separator}findbugs">
			<not>
				<isset property="bin.findbugs" />
			</not>
		</condition>

		<condition property="findbugs.jvmargs" value="-Xms64M -Xmx512M">
			<not>
				<isset property="findbugs.jvmargs" />
			</not>
		</condition>

		<condition property="findbugs.style" value="${bin.findbugs}${file.separator}src${file.separator}xsl${file.separator}fancy.xsl">
			<not>
				<isset property="findbugs.style" />
			</not>
		</condition>

		<condition property="findbugs.effort" value="max">
			<not>
				<isset property="findbugs.effort" />
			</not>
		</condition>

		<condition property="findbugs.reportLevel" value="medium">
			<not>
				<isset property="findbugs.reportLevel" />
			</not>
		</condition>
	</target>

	<target name="-init_checkstyle" description="Initialize checkstyle tasks" unless="target.init_checkstyle.done">
		<property name="target.init_checkstyle.done" value="true" />

		<!-- checkstyle jars -->
		<path id="lib.checkstyle">
			<fileset dir="${build.core}${file.separator}Development${file.separator}checkstyle${file.separator}lib" includes="*.jar" />
		</path>

		<!-- register checkstyle task -->
		<taskdef resource="checkstyletask.properties" classpathref="lib.checkstyle" />

		<condition property="bin.checkstyle" value="${build.core}${file.separator}Development${file.separator}checkstyle">
			<not>
				<isset property="bin.checkstyle" />
			</not>
		</condition>

		<condition property="checkstyle.style" value="${bin.checkstyle}${file.separator}checkstyle.xsl">
			<not>
				<isset property="checkstyle.style" />
			</not>
		</condition>
	</target>

	<!-- initialize and require eclipse -->
	<target name="init_eclipse" depends="init" unless="target.init_eclipse.done">
		<property name="target.init_eclipse.done" value="true" />

		<fail message="Eclipse was not found. Either set the 'eclipse.home' property or the 'ECLIPSE_HOME' environment variable.">
			<condition>
				<not>
					<isset property="available.eclipse" />
				</not>
			</condition>
		</fail>

		<!-- location for the Eclipse P2 dropins of compose* -->
		<property name="eclipse.dropins" value="${eclipse.home}" />
		<!-- location of Eclipse pluginsfolder -->
		<property name="eclipse.pluginsdir" value="${eclipse.dropins}${file.separator}plugins" />

		<!-- eclipse libraries -->
		<path id="lib.eclipse">
			<path refid="lib.core" />
			<fileset dir="${build.core}${file.separator}Compiletime" includes="${out.jar.core}" />

			<fileset dir="${eclipse.home}${file.separator}plugins" includes="*.jar" />
			<fileset dir="${eclipse.pluginsdir}" includes="*.jar" />
		</path>

		<property name="eclipse.pluginsdir.core" value="${eclipse.pluginsdir}${file.separator}composestar.core_${version.core}.${version.eclipse.qualifier}" />
		<property name="eclipse.pluginsdir.core.plugin" value="${eclipse.pluginsdir}${file.separator}composestar.core.plugin_${version.core}.${version.eclipse.qualifier}" />

		<property name="eclipse.pluginsdir.java" value="${eclipse.pluginsdir}${file.separator}composestar.java_${version.java}.${version.eclipse.qualifier}" />
		<property name="eclipse.pluginsdir.java.plugin" value="${eclipse.pluginsdir}${file.separator}composestar.java.plugin_${version.java}.${version.eclipse.qualifier}" />
	</target>

	<!-- generic target to rebuild all -->
	<target name="rebuild" depends="init,clean,build" description="Clean and then compile" />

	<target name="svn-update" depends="init" description="Update the sources from the SVN repository">
		<svn>
			<update dir="${basedir}" />
		</svn>
	</target>

	<target name="svn-fix-keywords" depends="init" description="Set the appropiate svn:keywords">
		<svn>
			<keywordsadd keywords="HeadURL Id LastChangedBy LastChangedDate LastChangedRevision">
				<fileset dir="${basedir}">
					<not>
						<svnUnversioned />
					</not>
					<not>
						<svnIgnored />
					</not>

					<include name="**/*.java" />
					<include name="**/*.cs" />
					<include name="**/*.jsl" />
					<include name="**/*.cps" />

					<include name="**/*.c" />
					<include name="**/*.h" />

					<include name="**/*.xml" />
					<include name="**/*.txt" />
					<include name="**/*.html" />

					<exclude name="**/.svn" />
					<exclude name="**/_svn" />
				</fileset>
			</keywordsadd>
		</svn>
	</target>

	<target name="validate_moduleinfo" depends="init" description="Validate the moduleinfo.xml files">
		<schemavalidate>
			<schema namespace="http://composestar.sourceforge.net/schema/ModuleInfo" file="${build.core}/Compiletime/src/Composestar/Core/Config/Xml/ModuleInfo.xsd" />
			<fileset dir="src">
				<include name="**/moduleinfo.xml" />
			</fileset>
		</schemavalidate>
	</target>

	<target name="example_performance" depends="init" description="Create performance information from the examples">
		<mkdir dir="_performance_data" />
		<touch file="_performance_data/DO_NOT_DELETE" verbose="false" />
		<tstamp>
			<format property="performance.tstamp" pattern="yyyyMMddkkmmss" />
		</tstamp>

		<copy verbose="true" todir="_performance_data">
			<fileset dir="Examples">
				<include name="**/Analyses/TimerResults.xml" />
			</fileset>
			<chainedmapper>
				<compositemapper>
					<globmapper from="*/obj/Analyses/TimerResults.xml" to="*/TimerResults.xml" handledirsep="true" />
					<globmapper from="*/.composestar/Analyses/TimerResults.xml" to="*/TimerResults.xml" handledirsep="true" />
				</compositemapper>
				<globmapper from="*.xml" to="*_${performance.tstamp}.xml" />
				<packagemapper from="*" to="*" />
			</chainedmapper>
		</copy>

		<ant dir="${build.core}/Development/CstarPerfTool" target="build" />
		<java jar="${build.core}/Development/CstarPerfTool/dist/CstarPerfTool.jar" fork="true" failonerror="false">
			<jvmarg value="-DComposestar.Perf.Tool.quiet=true" />
			<jvmarg value="-DComposestar.Perf.Tool.Export.onlyLastX=100" />
			<arg value="${basedir}/_performance_data" />
		</java>

		<antcall target="example_performance_xslt" inheritRefs="true" inheritAll="true" />
	</target>

	<target name="example_performance_xslt">
		<xslt style="${build.core}/Development/CstarPerfTool/PerfReportToHTML.xslt" destdir="${basedir}/qa" force="true">
			<include name="_performance_data/*.xml" />
			<chainedmapper>
				<flattenmapper />
				<globmapper from="*.xml" to="example_*.html" />
			</chainedmapper>
		</xslt>
	</target>

	<target name="-example_performance_proc">
		<concat destfile="${example.name}.xml">
			<first count="25">
				<sort>
					<reverse xmlns="antlib:org.apache.tools.ant.types.resources.comparators">
						<date xmlns="antlib:org.apache.tools.ant.types.resources.comparators" />
					</reverse>
					<fileset dir="${example.name}">
						<include name="TimerResults*.xml" />
					</fileset>
				</sort>
			</first>
			<filterchain>
				<tokenfilter>
					<!-- remove existing processing instructions -->
					<replaceregex pattern="&lt;\?.*\?&gt;" replace="" flags="gi" />
				</tokenfilter>
			</filterchain>
			<header filtering="no">&lt;history&gt;</header>
			<footer>&lt;/history&gt;</footer>
		</concat>
	</target>

	<target name="report" depends="init" description="Report on the status of each platform">

		<condition property="status.starlight" value="enabled" else="disabled">
			<isset property="enabled.starlight" />
		</condition>

		<condition property="status.java" value="enabled" else="disabled">
			<isset property="enabled.java" />
		</condition>

		<condition property="status.cwc" value="enabled" else="disabled">
			<isset property="enabled.cwc" />
		</condition>

		<echo message="Settings:" />
		<echo message="  ant.build.javac.target: ${ant.build.javac.target}" />
		<echo message="  ant.build.javac.source: ${ant.build.javac.source}" />
		<echo message="  build.debug:            ${build.debug}" />
		<echo message="  build.deprecation:      ${build.deprecation}" />
		<echo>
		</echo>
		<echo message="  build.core:             ${build.core}" />
		<echo message="  build.starlight:        ${build.starlight}" />
		<echo message="  build.java:             ${build.java}" />
		<echo message="  build.cwc:              ${build.cwc}" />
		<echo>
		</echo>
		<echo message="	 starlight.installdir:   ${starlight.installdir}" />
		<echo message="	 eclipse.home:           ${eclipse.home}" />
		<echo message="	 eclipse.dropins:        ${eclipse.dropins}" />
		<echo message="	 eclipse.pluginsdir:     ${eclipse.pluginsdir}" />
		<echo message="  eclipse version qualifier: ${version.eclipse.qualifier} " />
		<echo>
		</echo>
		<echo message="Status of Compose* ports:" />
		<echo message="  StarLight: ${status.starlight}	(version ${version.starlight})" />
		<echo message="  Java:      ${status.java}	(version ${version.java})" />
		<echo message="  CwC:       ${status.cwc}	(version ${version.cwc})" />
		<echo>
		</echo>
		<input message="Press enter to continue..." />
	</target>

</project>
