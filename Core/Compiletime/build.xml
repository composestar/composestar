<?xml version="1.0" encoding="UTF-8"?>
<project name="ComposeStar/Core/Compiletime" default="build" xmlns:cs="antlib:Composestar">

	<property name="build.core" location=".." />
	<import file="${build.core}/common.xml" />

	<description>The Compose* Core Compiletime. This is the core of the Compose* compiler.</description>

	<target name="clean" depends="init" description="Clean compile results">

		<!-- Java build files -->
		<delete dir="${out.build}" />
		<delete dir="${out.dist}" />
		<delete>
			<fileset dir="src">
				<include name="**/*.class" />
			</fileset>
			<fileset dir="test">
				<include name="**/*.class" />
			</fileset>
		</delete>

		<!-- COPPER parser -->
		<delete>
			<fileset dir="src/Composestar/Core/COPPER2">
				<include name="CpsLexer.java" />
				<include name="CpsParser.java" />
				<include name="Cps__.g" />
				<include name="Cps.tokens" />
				<include name="CpsTreeWalker.java" />
				<include name="CpsTreeWalker.tokens" />
			</fileset>
			<fileset dir="src/Composestar/Core/COPPER3">
				<include name="CpsLexer.java" />
				<include name="CpsParser.java" />
				<include name="Cps__.g" />
				<include name="Cps.tokens" />
				<include name="CpsTreeWalker.java" />
				<include name="CpsTreeWalker.tokens" />
			</fileset>
		</delete>

		<delete>
			<fileset dir="test">
				<include name="**/TEST-*.xml" />
				<include name="**/TESTS-*.xml" />
			</fileset>
		</delete>

		<ant dir="${build.core}/Compiletime/grammar" target="clean" inheritRefs="true" />
	</target>

	<target name="local_init" depends="init">
		<mkdir dir="${out.build}" />
		<mkdir dir="${out.dist}" />
		<mkdir dir="${out.dist}/lib" />
	</target>

	<target name="build" depends="local_init,antlr,compile,jar" description="Compile the code and create the jar file">
		<copy file="lib/antlr/antlr.jar" todir="${out.dist}/lib" />
		<copy file="lib/antlr/antlr-runtime-3.jar" todir="${out.dist}/lib" />
		<copy file="lib/log4j/log4j-1.2.14.jar" todir="${out.dist}/lib" />
		<copy file="lib/prolog/prolog.jar" todir="${out.dist}/lib" />

		<copy todir="${out.dist}/lib">
			<fileset dir="lib/groove3">
				<include name="*.jar" />
			</fileset>
		</copy>

		<antcall target="eclipse_manifest" inheritRefs="true" />
	</target>

	<target name="antlr" depends="local_init">
		<ant dir="${build.core}/Compiletime/grammar" target="antlr_cps_java" inheritRefs="true">
			<property name="copper.version" value="3" />
		</ant>
	</target>

	<target name="compile" depends="local_init,antlr,groove_manifest">
		<propertyfile file="${out.build}/version.properties">
			<entry key="version" value="${version.core}.${version.build}" />
			<entry key="version.build" value="${version.build}" />
			<entry key="version.compiledate" type="date" value="now" pattern="EEE, d MMM yyyy HH:mm:ss Z" />
		</propertyfile>

		<!-- Call javac twice because of a bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6558580 -->
		<!--<javac srcdir="src" destdir="${out.build}" classpathref="lib.core" debug="${build.debug}" deprecation="${build.deprecation}">
			<exclude name="**/AssemblyInfo.java" />
			<compilerarg line="-proc:only" />
		</javac>
		-->
		<javac srcdir="src" destdir="${out.build}" classpathref="lib.core" debug="${build.debug}" deprecation="${build.deprecation}">
			<exclude name="**/AssemblyInfo.java" />
			<compilerarg line="-proc:none" />
		</javac>
	</target>

	<target name="groove_manifest">
		<property name="groove_grammar_dir" value="src/Composestar/Core/FIRE2/preprocessing/groovegrammars2" />

		<pathconvert property="groove.execmodel" dirsep="/" pathsep="${line.separator}">
			<fileset dir="${groove_grammar_dir}/execmodel.gps">
				<include name="**/*.gpr" />
				<exclude name="MANIFEST" />
			</fileset>
			<map from="${basedir}/${groove_grammar_dir}/execmodel.gps/" to="" />
		</pathconvert>
		<echo append="false" file="${groove_grammar_dir}/execmodel.gps/MANIFEST" message="${groove.execmodel}" />

		<pathconvert property="groove.flowmodel" dirsep="/" pathsep="${line.separator}">
			<fileset dir="${groove_grammar_dir}/flowmodel.gps">
				<include name="**/*.gpr" />
				<exclude name="MANIFEST" />
			</fileset>
			<map from="${basedir}/${groove_grammar_dir}/flowmodel.gps/" to="" />
		</pathconvert>
		<echo append="false" file="${groove_grammar_dir}/flowmodel.gps/MANIFEST" message="${groove.flowmodel}" />
	</target>

	<target name="jar" depends="compile">
		<copy todir="${out.build}">
			<!-- copy groove grammars -->
			<fileset dir="src">
				<include name="**/*.gpr" />
				<include name="**/*.pro" />
				<include name="**/*.properties" />
				<include name="**/MANIFEST" />
				<include name="**/moduleinfo.xml" />
				<include name="**/*.xslt" />
				<include name="**/*.xml" />
				<include name="**/*.xsd" />
			</fileset>
		</copy>
		<jar destfile="${out.jar.core}" basedir="${out.build}" manifest="src/MANIFEST.MF" />
	</target>


	<target name="eclipse_manifest" depends="init" if="available.eclipse">
		<antcall target="-eclipse_manifest" inheritRefs="true" />
		<!-- constructs the eclipse bundle information -->
	</target>

	<target name="-eclipse_manifest" depends="init_eclipse">
		<!-- create bundle classpath value -->
		<pathconvert property="composestar.core.bundle-classpath" pathsep="," dirsep="/">
			<path>
				<fileset dir="${out.dist}" includes="*/*.jar" />
			</path>
			<map from="${basedir}${file.separator}${out.dist}${file.separator}" to="" />
		</pathconvert>
		<cs:jarpackages property="composestar.core.export-package">
			<fileset dir="${out.dist}" includes="*/*.jar" />
		</cs:jarpackages>

		<mkdir dir="${out.dist}/META-INF" />
		<manifest file="${out.dist}/META-INF/MANIFEST.MF">
			<attribute name="Bundle-ManifestVersion" value="2" />
			<attribute name="Bundle-Name" value="Compose*/Core" />
			<attribute name="Bundle-SymbolicName" value="composestar.core" />
			<attribute name="Bundle-Version" value="${version.core}" />
			<attribute name="Bundle-Vendor" value="University of Twente" />
			<attribute name="Bundle-ClassPath" value="${composestar.core.bundle-classpath}" />
			<attribute name="Export-Package" value="${composestar.core.export-package}" />
		</manifest>
	</target>

	<target name="install" depends="build,install_system,install_eclipse" description="Install the core files" />

	<target name="install_system" depends="build" if="available.dotnet">
		<!-- install the core files for the system, currently this is only used for dotnet -->
		<copy todir="${composestar.installdir}">
			<fileset dir="${out.dist}" />
		</copy>
	</target>


	<target name="install_eclipse" depends="build" if="available.eclipse">
		<!-- copy files to eclipse -->
		<!-- 
			this construction is intentional to create a fail safe method to 
			install the eclipse files even when eclipse is not available 
		-->
		<antcall target="-install_eclipse" inheritRefs="true" />
	</target>

	<target name="-install_eclipse" depends="init_eclipse">
		<copy todir="${eclipse.pluginsdir.core}">
			<fileset dir="${out.dist}" />
		</copy>
	</target>


	<target name="test" depends="config_tests,unittest,validate_moduleinfo" description="Run tests" />

	<target name="config_tests" depends="init" description="Validate the configuration system">
		<schemavalidate>
			<schema namespace="http://composestar.sourceforge.net/schema/BuildConfiguration" file="${build.core}/Compiletime/src/Composestar/Core/Config/Xml/BuildConfiguration.xsd" />
			<schema namespace="http://composestar.sourceforge.net/schema/PlatformConfiguration" file="${build.core}/Compiletime/src/Composestar/Core/Config/Xml/PlatformConfiguration.xsd" />
			<schema namespace="http://composestar.sourceforge.net/schema/SecretConfiguration" file="${build.core}/Compiletime/src/Composestar/Core/SECRET3/Config/Xml/SecretConfiguration.xsd" />
			<fileset dir="test/Composestar/Core/Config/Xml/">
				<include name="*.xml" />
			</fileset>
		</schemavalidate>
	</target>

	<target name="compile_tests" depends="local_init,compile">
		<path id="lib.test">
			<path refid="lib.core" />
			<pathelement path="${out.build}" />
			<pathelement location="${build.core}\Compiletime\lib\junit\junit.jar" />
		</path>
		<javac srcdir="test" destdir="test" classpathref="lib.test" debug="${build.debug}" deprecation="${build.deprecation}">
			<include name="**/*.java" />
			<exclude name="**/AssemblyInfo.java" />
		</javac>
	</target>

	<target name="unittest" depends="compile_tests" description="Runs JUnit tests">
		<mkdir dir="test/test-results" />
		<junit printsummary="on" haltonfailure="on">
			<classpath>
				<path refid="lib.test" />
				<pathelement path="test" />
			</classpath>
			<formatter type="xml" />
			<batchtest todir="test/test-results">
				<fileset dir="test">
					<include name="**/*Test.class" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="test">
			<fileset dir="test/test-results">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="noframes" todir="test" />
		</junitreport>
	</target>

</project>
