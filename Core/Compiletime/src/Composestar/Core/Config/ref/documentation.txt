Information about the Compose* configuration changes

The new build configuration format has been split up into two sections:
	- project build configuration
	- platform configuration
	
The project build configuration only contains information important for
the current project. The platform configuration is something that is 
common amongst all projects that share the same platform, there is no
need to repeat this information for every platform.

The build configuration describes all details about the project. It 
contains three sections:
	- compiler settings
	- project description
	- filter definitions
The compiler settings are used to override the default parameters. 
These settings could be considered as global settings and not project
specific. The same settings section could be shared by several 
projects.
The project description contains an overview of the project's sources, 
concern sources, dependencies and additional resources. Additional
resources are files that are required by the compiled program but are
not required during the compilation process. For example image files.
These files will be copied to the output directory on a successful 
compilation. The project also contains some attributes that define the
platform, base directory and used programming language. The paths
used in this section may be relative paths. In this case they will be
resolved using the project's base directory. The project's base 
directory may also be a relative path, it will then be resolved to an
absolute path using the current working directory.
The third section is used to provide filter information like custom
filters or filter type and action declarations. The usage of this block
depends on the platform. It can be omitted if the platform has other
methods to get a hold on this information. Relative paths used in this
section will also be resolved using the project's base directory.
The new build configuration does not contain a paths sections. Most of
the paths should be based on the project's output or intermediate 
directories. If a module needs a configurable path setting it needs to
user the settings section for that. No paths section also means that 
there is no reference to the Compose* base directory. This is something
that the different ports will need to figure out themselves when needed.
The reason for this is that the Compose* might not be located at a 
single location. This is the case with the eclipse distributions of
Compose*. It is not possible to have the core libraries and the platform
libraries in the same location.
TODO: provide a path resolver class?

The platform configuration will no longer be included with the build
configuration. It is however inteded to include a local copy of the
platform configuration with the serialized build configuration (for
incremental compilation).
The platform configuration is not much different from the previous
format. Only a few elements have had a significant changes.
The master will try to load the platform from three different 
locations:
1) user specified location as a commandline argument
2) the Compose* base directory
3) an internal copy stored in the platform's jar file.
This will allow the user to change the configuration for the current 
platform.
One of the new features in the platform configuration is the osfilter.
This allows the developer to specify different configurations for the
same platform on different operating systems.
An other big change is the definition of the compiler actions. Each
argument must be defined using a seperate element. This way it is 
possible to construct a safe commandline argument using a string array.
Special enumerator elements have been defined to handle sources and
dependencies.
Platform execution information, like mainclass and classpath, have been
dropped. Launchers should figure this out themselves. This is done to
reduce the system depended information in the configuration.

$Id$
