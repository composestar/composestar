package Rot13Filter;

import java.util.Dictionary;

import Composestar.RuntimeCore.FLIRT.Filtertypes.CustomFilter;
import Composestar.RuntimeCore.FLIRT.Message.MessageList;
import Composestar.RuntimeCore.FLIRT.Actions.ContinueToNextFilterAction;
import Composestar.RuntimeCore.FLIRT.Actions.ComposeStarAction;

public class Rot13 extends CustomFilter
{
	/**
	 * Returns a RotAction with a refied message if the message was accepted by the filter.
	 * 
	 * @param originalMessage is the original message call
	 * @param modifiedMessage contains the message after previous filters modified it.
	 * @param context
	 * @return Composestar.Runtime.FLIRT.actions.ComposeStarAction
	 */
	public ComposeStarAction acceptAction(MessageList originalMessage, MessageList modifiedMessage, Dictionary context) 
	{
		if(modifiedMessage.getTarget().equals("*"))
		{
			modifiedMessage.setTarget(originalMessage.getTarget());
		}
		else if(modifiedMessage.getTarget().equals("inner"))
		{
			// TODO Look at Runtime\FLIRT\filtertypes\meta.java for other implementations.
			modifiedMessage.setTarget(originalMessage.getInner());
		}
		else if(modifiedMessage.getTarget() instanceof String && originalMessage.getInternal((String)modifiedMessage.getTarget()) != null)
		{
			modifiedMessage.setTarget(originalMessage.getInternal((String)modifiedMessage.getTarget()));
		}
		else if(modifiedMessage.getTarget() instanceof String && originalMessage.getExternal((String)modifiedMessage.getTarget()) != null)
		{
			modifiedMessage.setTarget(originalMessage.getExternal((String)modifiedMessage.getTarget()));
		}
		
		if(modifiedMessage.getSelector().equals("*"))
		{
			modifiedMessage.setSelector(originalMessage.getSelector());
		}

		return new RotAction(originalMessage, originalMessage.reify(), modifiedMessage.getTarget(), modifiedMessage.getSelector(), true);
	}
    
	/**
	 * Continue to next filter with the original message if this filter was not accepted.
	 * @param originalMessage
	 * @param modifiedMessage
	 * @param context
	 * @return Composestar.Runtime.FLIRT.actions.ComposeStarAction
	 */
	public ComposeStarAction rejectAction(MessageList originalMessage, MessageList modifiedMessage, Dictionary context)
	{
		return new ContinueToNextFilterAction(originalMessage, false);     
	}
    
	/**
	 * Continue to next filter after ACT is finished.
	 * @return true
	 */
	public boolean shouldContinueAfterAccepting() 
	{
		return true;
	}

	/**
	 * Name of custom filter for use in concern definition.
	 * @return String
	 */
	public String getName() {
	  return "Rot13";
	}

}
