package Rot13Filter;

import java.util.Dictionary;

import Composestar.RuntimeCore.FLIRT.Filtertypes.CustomFilter;
import Composestar.RuntimeCore.FLIRT.Message.MessageList;
import Composestar.RuntimeCore.FLIRT.Actions.ContinueToNextFilterAction;
import Composestar.RuntimeCore.FLIRT.Actions.ComposeStarAction;

public class Rot13 extends CustomFilter
{
	/**
	 * Returns a RotAction with a refied message if the message was accepted by the filter.
	 * 
	 * @param originalMessage is the original message call
	 * @param modifiedMessage contains the message after previous filters modified it.
	 * @param context
	 * @return Composestar.Runtime.FLIRT.actions.ComposeStarAction
	 */
	public ComposeStarAction acceptAction(MessageList originalMessage, MessageList modifiedMessage, Dictionary context) 
	{
		replaceInner( originalMessage, modifiedMessage );
		replaceWildcards( originalMessage, modifiedMessage );
		return new RotAction(originalMessage, originalMessage.reify(), modifiedMessage.getFirstMessage().getTarget(), modifiedMessage.getFirstMessage().getSelector(), true);     
	}
    
	/**
	 * Continue to next filter with the original message if this filter was not accepted.
	 * @param originalMessage
	 * @param modifiedMessage
	 * @param context
	 * @return Composestar.Runtime.FLIRT.actions.ComposeStarAction
	 */
	public ComposeStarAction rejectAction(MessageList originalMessage, MessageList modifiedMessage, Dictionary context)
	{
		return new ContinueToNextFilterAction(originalMessage, false);     
	}
    
	/**
	 * Continue to next filter after ACT is finished.
	 * @return true
	 */
	public boolean shouldContinueAfterAccepting() 
	{
		return true;
	}

	/**
	 * Name of custom filter for use in concern definition.
	 * @return String
	 */
	public String getName() {
	  return "Rot13";
	}

}
