/**
 * "The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 * 
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * The Original Code is ca.ubc.cs.spl.aspectPatterns. 
 * 
 * The Initial Developers of the Original Code are Jan Hannemann and Gregor Kiczales.
 * 
 * For more details and the latest version of the original code, please see: 
 * http://www.cs.ubc.ca/labs/spl/projects/aodps.html
 * 
 * Contributor(s): Stephan Huttenhuis.
 * 
 * The modified version of the code is part of the Compose* project which can be found at: 
 * http://composestar.sf.net
 * 
 */
package Composestar.Patterns.State;

public class QueueNormal implements QueueState {
	
  	protected Object[] items = new Object[5];

  	protected int first = 0; 

  	protected int last  = 0;

	protected int size = 5;

	private QueueNormal() {}
	private static QueueNormal instance;
	public static QueueNormal instance()
	{
		if(instance==null)
		{
			instance = new QueueNormal();
		}
		return instance;
	}

	 public void setData(Object[] items, int first, int last) {
		 this.items = items;
		 this.first = first;
		 this.last  = last;
	 }

	public Boolean insert(Object arg) {
		items[(last)] = arg; 
		last = (last+1);
		return new Boolean(true);
	}

	public Object  getFirst() {
		if(first<items.length)
		{
			return items[first];
		}
		else
		{
			return null;
		}
	}

	public Boolean removeFirst(){	  
		first = (first + 1);
		return new Boolean(true);
	}
}
