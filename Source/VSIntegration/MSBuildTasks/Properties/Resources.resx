<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CouldNotConvertDebugLevel" xml:space="preserve">
    <value>Unable to convert the debuglevel '{0}' to an integer value.</value>
  </data>
  <data name="CouldNotReadRegistryValues" xml:space="preserve">
    <value>Unable to read the requested registry values. Make sure the registry contains the correct settings by running the setup application.</value>
  </data>
  <data name="ExecutionException" xml:space="preserve">
    <value>An exception occured while executing Java. The message is '{0}'.</value>
  </data>
  <data name="JavaExecutableAccessDenied" xml:space="preserve">
    <value>Could not execute the Java executable '{0}' because of access permission errors.</value>
  </data>
  <data name="JavaExecutableNotFound" xml:space="preserve">
    <value>The Java executable '{0}' could not be found. Either add the location of this file to the path or place the folder in the JavaFolder key in the HKEY_LOCAL_MACHINE\SOFTWARE\Composestar\StarLight hive in the registry.</value>
  </data>
  <data name="MasterRunFailed" xml:space="preserve">
    <value>Master run failure reported by process. Exit code is {0}. Messages above this line might give an indication of the problem.</value>
  </data>
  <data name="PEVerifyExecutableAccessDenied" xml:space="preserve">
    <value>Could not execute the PEVerify executable '{0}' because of access permission errors. IL verification will be skipped.</value>
  </data>
  <data name="PEVerifyExecutableNotFound" xml:space="preserve">
    <value>The PEVerify executable '{0}' could not be found. Make sure you have installed the .NET SDK. IL verification will be skipped.</value>
  </data>
  <data name="PEVerifyExecutionException" xml:space="preserve">
    <value>An exception occured while executing PEVerify. The message is '{0}'.</value>
  </data>
  <data name="VerifySuccess" xml:space="preserve">
    <value>File '{0}' has correct IL code.</value>
  </data>
  <data name="VerifyFailure" xml:space="preserve">
    <value>The generated IL in file '{0}' could not be verified as correct IL code.</value>
  </data>
  <data name="FoundReferenceType" xml:space="preserve">
    <value>Found {0} referenced types in {1} concern(s) in {2:0.0000} seconds.</value>
  </data>
  <data name="ParsingConcernFile" xml:space="preserve">
    <value>Parsing concern file '{0}'.</value>
  </data>
  <data name="AddingConcernFile" xml:space="preserve">
    <value>Adding concern file '{0}' to the repository.</value>
  </data>
  <data name="AnalyzerStartText" xml:space="preserve">
    <value>Analyzing the IL files using the Cecil IL Analyzer.</value>
  </data>
  <data name="AnalyzingFile" xml:space="preserve">
    <value>Analyzing file '{0}'.</value>
  </data>
  <data name="AnalyzingUnresolved" xml:space="preserve">
    <value>Analyzing referenced assemblies for {0} unresolved types.</value>
  </data>
  <data name="AnalyzingUnresolvedCompleted" xml:space="preserve">
    <value>Referenced assemblies analyzed in {1:0.0000} seconds, {0} unresolved types remaining.</value>
  </data>
  <data name="AssemblyAnalyzed" xml:space="preserve">
    <value>Assembly analyzer: {0} types found in {2:0.0000} seconds. ({1} types not resolved).</value>
  </data>
  <data name="AssemblyNotModified" xml:space="preserve">
    <value>Assembly has not been modified, analysis of this file is skipped.</value>
  </data>
  <data name="FoundInDatabase" xml:space="preserve">
    <value>Retrieved {0} types from the local database in {1:0.0000} seconds.</value>
  </data>
  <data name="JavaStartMessage" xml:space="preserve">
    <value>Java will be executed with the following arguments: {0}</value>
  </data>
  <data name="MasterCompleted" xml:space="preserve">
    <value>StarLight Master run completed successfully in {0:0.0000} seconds.</value>
  </data>
  <data name="MasterStartText" xml:space="preserve">
    <value>Preparing to start StarLight Java Master by collecting data.</value>
  </data>
  <data name="NumberOfReferencesToResolve" xml:space="preserve">
    <value>Referenced types to resolve: {0}.</value>
  </data>
  <data name="OpenDatabase" xml:space="preserve">
    <value>Opening repository file '{0}'.</value>
  </data>
  <data name="RemovingFileFromDatabase" xml:space="preserve">
    <value>Removing '{0}' from the database.</value>
  </data>
  <data name="SearchingInDatabase" xml:space="preserve">
    <value>Searching in local database for {0} unresolved types.</value>
  </data>
  <data name="StoreDebugLevel" xml:space="preserve">
    <value>Storing debug level {0} in the repository.</value>
  </data>
  <data name="StoreInDatabase" xml:space="preserve">
    <value>Storing type information for {0} assemblies in database.</value>
  </data>
  <data name="StoreInDatabaseCompleted" xml:space="preserve">
    <value>{0} assemblies with a total of {1} types stored in the database in {2:0.0000} seconds.</value>
  </data>
  <data name="UnableToResolve" xml:space="preserve">
    <value>Unable to resolve type '{0}', are you missing an assembly reference?</value>
  </data>
  <data name="VerificationCompleted" xml:space="preserve">
    <value>Verification of '{0}' assemblies executed in {1:0.0000} seconds.</value>
  </data>
  <data name="VerificationError" xml:space="preserve">
    <value>Verification error in '{0}', method '{2}' at {3}: {1}</value>
  </data>
  <data name="VerifyingAssembly" xml:space="preserve">
    <value>Verifying assembly '{0}' using PEVerify.</value>
  </data>
  <data name="WeavingCompleted" xml:space="preserve">
    <value>Weaving completed in {0:0.0000} seconds.</value>
  </data>
  <data name="WeavingFile" xml:space="preserve">
    <value>Weaving file '{0}'.</value>
  </data>
  <data name="WeavingStartText" xml:space="preserve">
    <value>Weaving the filter code using the Cecil IL Weaver.</value>
  </data>
</root>