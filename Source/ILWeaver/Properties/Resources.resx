<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblyNotOpen" xml:space="preserve">
    <value>The assembly is not open.</value>
  </data>
  <data name="ConstructorNotFound" xml:space="preserve">
    <value>The constructor .ctor() for the type {0} could not be found.</value>
  </data>
  <data name="CouldNotSaveAssembly" xml:space="preserve">
    <value>Could not write the assembly to file '{0}'. Check if the file is not in use and has the correct access permissions.</value>
  </data>
  <data name="FileNameNullOrEmpty" xml:space="preserve">
    <value>The supplied filename is null or empty.</value>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The file {0} could not be found.</value>
  </data>
  <data name="FilterJumpLabelIsNotSet" xml:space="preserve">
    <value>The label for the JumpFilterAction has not been set.</value>
  </data>
  <data name="ImageIsBad" xml:space="preserve">
    <value>The format of binary image {0} is invalid.</value>
  </data>
  <data name="NoSNKSpecified" xml:space="preserve">
    <value>Invalid configuration. No Strong Name Key file specified.</value>
  </data>
  <data name="RepositoryFilenameNotSpecified" xml:space="preserve">
    <value>The config collection did not contain a valid filename to the repository file.</value>
  </data>
  <data name="SNKFileNotFound" xml:space="preserve">
    <value>Failed to find Strong Name Key file at {0}.</value>
  </data>
  <data name="TypeNotFound" xml:space="preserve">
    <value>The type {0} could not be found.</value>
  </data>
  <data name="CecilVisitorRaisedException" xml:space="preserve">
    <value>An exception occured during the creation of IL instructions by the Cecil visitor. See the inner exception for more details.</value>
  </data>
  <data name="CannotDelaySignWithoutSigning" xml:space="preserve">
    <value>Invalid configuration. Cannot specify delaysign without shouldSign set to true</value>
  </data>
  <data name="InputImageNotFound" xml:space="preserve">
    <value>The input image {0} could not be found.
</value>
  </data>
  <data name="CouldNotResolveMethod" xml:space="preserve">
    <value>Unable to resolve the method '{0}' from '{1}' to a Type used by the weaver. Make sure all the references are in place and the method has bee specified correctly.</value>
  </data>
  <data name="ConditionNotFound" xml:space="preserve">
    <value>Could not find condition named '{0}'.</value>
  </data>
  <data name="MethodNotFound" xml:space="preserve">
    <value>Could not create a method reference for method named '{0}' in type '{1}' and assembly '{2}'.</value>
  </data>
  <data name="FieldNotFound" xml:space="preserve">
    <value>The field {0} could not be found.</value>
  </data>
  <data name="AdviceMethodNotFound" xml:space="preserve">
    <value>Could not find method named '{0}(JoinpointContext)' in type '{1}'</value>
  </data>
  <data name="AssemblyElementNotFound" xml:space="preserve">
    <value>Could not find the assembly named '{0}' in the database. The file is not analyzed and cannot be processed bij the weaver.</value>
  </data>
  <data name="CouldNotLoadAssembly" xml:space="preserve">
    <value>Unable to open assembly '{0}' due to the following error: {1}</value>
  </data>
</root>