// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using Composestar.StarLight.CpsParser;
using antlr.collections;
namespace Composestar.StarLight.CpsParser.Tests.UnitTests
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.CpsParser.CpsFileParser and is intended
    ///to contain all Composestar.StarLight.CpsParser.CpsFileParser Unit Tests
    ///</summary>
    [TestClass()]
    public class CpsFileParserFixture : CpsFileParserFixtureBase
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for CpsFileParser (CpsParserConfiguration)
        ///</summary>
        [TestMethod()]
        public void ConstructorTest()
        {
            CpsParserConfiguration configuration = new CpsParserConfiguration("test.cps");

            CpsFileParser target = new CpsFileParser(configuration);

            Assert.IsNotNull(target, "Composestar.StarLight.CpsParser.CpsFilePareser constructor did not return an object.");
        }

        /// <summary>
        ///A test for FileName
        ///</summary>
        [DeploymentItem("Composestar.StarLight.CpsParser.dll")]
        [TestMethod()]
        public void FileNameTest()
        {
            string val = "test.cps";

            CpsParserConfiguration configuration = new CpsParserConfiguration(val);

            CpsFileParser target = new CpsFileParser(configuration);

            Composestar.StarLight.CpsParser.Tests.UnitTests.Composestar_StarLight_CpsParser_CpsFileParserAccessor accessor = new Composestar.StarLight.CpsParser.Tests.UnitTests.Composestar_StarLight_CpsParser_CpsFileParserAccessor(target);

            Assert.AreEqual(val, accessor.FileName, "Composestar.StarLight.CpsParser.CpsFileParser.FileName was not set correctly.");
        }

        [TestMethod()]
        public void InvalidConcernFileTest()
        {
            CpsParserConfiguration configuration = new CpsParserConfiguration("Concerns\\invalid_concern.cps");

            CpsFileParser target = new CpsFileParser(configuration);

            try {
                target.Parse();
                Assert.Fail("Composestar.StarLight.CpsParser.CpsFileParser.Parse did not return the expected Composestar.StarLight.CoreServices.Exceptions.CpsParserException.");
            }
            catch (CoreServices.Exceptions.CpsParserException ex)
            {
                Assert.IsInstanceOfType(ex.InnerException, typeof(System.IO.FileNotFoundException), "Composestar.StarLight.CpsParser.CpsFileParser.Parse did not return the expected System.IO.FileNotFoundException.");
            }
        }
        
        /// <summary>
        ///A test for HasOutputFilters
        ///</summary>
        [TestMethod()]
        public void HasNoOutputFiltersTest()
        {
            CpsParserConfiguration configuration = new CpsParserConfiguration("Concerns\\Platypus.cps");

            CpsFileParser target = new CpsFileParser(configuration);

            target.Parse();
            
            Assert.AreEqual(false, target.HasOutputFilters, "Composestar.StarLight.CpsParser.CpsFileParser.HasOutputFilters was not set correctly.");
        }

        /// <summary>
        ///A test for HasOutputFilters
        ///</summary>
        [TestMethod()]
        public void HasOutputFiltersTest()
        {
            CpsParserConfiguration configuration = new CpsParserConfiguration("Concerns\\ParserTesting.cps");

            CpsFileParser target = new CpsFileParser(configuration);

            target.Parse();

            Assert.AreEqual(true, target.HasOutputFilters, "Composestar.StarLight.CpsParser.CpsFileParser.HasOutputFilters was not set correctly.");
        }

        /// <summary>
        ///A test for ReferencedTypes
        ///</summary>
        [TestMethod()]
        public void ReferencedTypesCountTest()
        {
            CpsParserConfiguration configuration = new CpsParserConfiguration("Concerns\\ParserTesting.cps");

            CpsFileParser target = new CpsFileParser(configuration);

            target.Parse();

            Assert.AreEqual(2, target.ReferencedTypes.Count, "Composestar.StarLight.CpsParser.CpsFileParser.ReferencedTypes does not contain the expected two types.");
        }


        /// <summary>
        ///A test to check that ReferencedTypes does not return a null value if there are no referenced types
        ///</summary>
        [TestMethod()]
        public void ReferencedTypesTest()
        {
            CpsParserConfiguration configuration = new CpsParserConfiguration("Concerns\\Simple.cps");

            CpsFileParser target = new CpsFileParser(configuration);

            target.Parse();

            Assert.IsNotNull(target.ReferencedTypes, "Composestar.StarLight.CpsParser.CpsFileParser.ReferencedTypes was not set correctly.");
            Assert.AreEqual(0, target.ReferencedTypes.Count, "Composestar.StarLight.CpsParser.CpsFileParser.ReferencedTypes returned unexpected count.");
        }

    }


}
