<modules>
	<module name="COPPER" fulltype="Composestar.core.COPPER.COPPER" input="java.lang.String" enabled="true" incremental="true" summary="Parsing concerns...">	
		<dependencies>
			<dependency type="FILE" name="cpsfile"></dependency>
		</dependencies>
	</module>
	<module name="EMBEX" fulltype="Composestar.core.EMBEX.EMBEX" phase="one" enabled="true" incremental="false" summary="Extracting embedded sources...">
		<dependencies></dependencies>	
	</module>
	<module name="HARVESTER" fulltype="Composestar.dotnet.TYM.TypeHarvester.DotNETHarvestRunner" input="java.lang.String" phase="two" enabled="true" incremental="true" summary="Harvesting type information...">
		<dependencies>
			<dependency type="FILE" name="assembly"></dependency>
		</dependencies>		
	</module>
	<module name="COLLECTOR" fulltype="Composestar.dotnet.TYM.TypeCollector.DotNETCollectorRunner" phase="two" enabled="true" incremental="true" summary="Collecting type information...">
		<dependencies>
			<dependency type="FILE" name="assembly"></dependency>
		</dependencies>		
	</module>
	<module name="AttributeCollector" fulltype="Composestar.dotnet.TYM.TypeCollector.AttributeCollector" phase="two" enabled="true" incremental="false" summary="Collecting attributes...">
		<dependencies></dependencies>	
	</module>
	<module name="REXREF" fulltype="Composestar.core.REXREF.Main" phase="two" enabled="true" incremental="false" summary="Resolving references...">
		<dependencies></dependencies>	
	</module>
	<module name="LOLA" fulltype="Composestar.dotnet.LOLA.DotNETLOLA" phase="two" enabled="true" incremental="true" summary="Evaluating predicate selectors...">
		<dependencies></dependencies>
		<comparisons>
			<type fullname="Composestar.core.CpsProgramRepository.PrimitiveConcern">
				<field name="platformRepr"></field>
			</type>
			<type fullname="Composestar.core.LOLA.metamodel.UnitResult">
				<field name="multiRes"></field>
				<field name="singleRes"></field>
			</type>
		</comparisons>		
	</module>
	<module name="CHKREP" fulltype="Composestar.core.CHKREP.Main" phase="two" enabled="true" incremental="false" summary="Checking repository...">
		<dependencies></dependencies>	
	</module>
	<module name="SANE" fulltype="Composestar.core.SANE.SANE" phase="two" enabled="true" incremental="false" summary="Resolving superimpositions...">
		<dependencies></dependencies>	
	</module>
	<module name="FILTH" fulltype="Composestar.core.FILTH.FILTH" input="Composestar.CTCommon.CpsProgramRepository.Concern" phase="two" enabled="true" incremental="true" summary="Determining order of filter modules at shared join points...">
		<dependencies>
			<dependency type="OBJECT" name="fmodules">
				<path>
					<node type="DYNAMIC" nodevalue="superImpInfo"></node>
					<node type="FIELD" nodevalue="theFmSIinfo"></node>
				</path>
			</dependency>	
		</dependencies>	
		<comparisons>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.References.FilterModuleReference">
				<field name="name"></field>
			</type>
		</comparisons>
	</module>
	<module name="SIGN" fulltype="Composestar.core.SIGN.SIGN" input="Composestar.CTCommon.CpsProgramRepository.Concern" phase="two" enabled="true" incremental="true" summary="Computing full signatures..." >
		<dependencies>
			<dependency type="OBJECT" name="signature" store="true" lookup="true">
				<path>
					<node type="FIELD" nodevalue="platformRepr"></node>
					<node type="FIELD" nodevalue="Methods"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="zmodules" store="true" lookup="true">
				<path>
					<node type="DYNAMIC" nodevalue="superImpInfo"></node>
					<node type="FIELD" nodevalue="theFmSIinfo"></node>
				</path>
			</dependency>
		</dependencies>
		<comparisons>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.References.FilterModuleReference">
				<field name="name"></field>
				<field name="ref"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.FilterModule">
				<field name="internals"></field>
				<field name="externals"></field>
				<field name="inputFilters"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.Internal">
				<path>
					<method name="getName"></method>
				</path>
				<path>
					<method name="getType"></method>
					<method name="getQualifiedName"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.External">
				<path>
					<method name="getName"></method>
				</path>
				<path>
					<method name="getType"></method>
					<method name="getQualifiedName"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.Filter">
				<field name="filterElements"></field>
				<path>
					<field name="type"></field>
					<method name="getType"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.FilterElement">
				<field name="conditionPart"></field>
				<field name="enableOperatorType"></field>
				<field name="matchingPatterns"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.Or">
				<field name="left"></field>
				<field name="right"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.MatchingPart">
				<field name="matchType"></field>
				<path>
					<method name="getTarget"></method>
					<method name="getName"></method>
				</path>
				<path>
					<method name="getSelector"></method>
					<method name="getName"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.SubstitutionPart">
				<path>
					<method name="getTarget"></method>
					<method name="getName"></method>
				</path>
				<path>
					<method name="getSelector"></method>
					<method name="getName"></method>
				</path>
			</type>
			<type fullname="Composestar.dotnet.TYM.TypeCollector.DotNETTypes.DotNETMethodInfo">
				<field name="Name"></field>
				<field name="ReturnTypeString"></field>
				<field name="Parameters"></field>
			</type>
			<type fullname="Composestar.dotnet.TYM.TypeCollector.DotNETTypes.DotNETParameterInfo">
				<field name="Name"></field>
				<field name="ParameterTypeString"></field>
			</type>
		</comparisons>
	</module>
	<module name="SECRET" fulltype="Composestar.core.CKRET.SECRET" input="Composestar.CTCommon.CpsProgramRepository.Concern" phase="two" enabled="true" incremental="true" summary="Checking for semantic conflicts among aspects...">
		<dependencies>
			<dependency type="FILE" name="SECRETConfigFile">
				<path>
					<node type="CONFIG" nodevalue="SECRETConfigFile"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="SECRETMode">
				<path>
					<node type="CONFIG" nodevalue="SECRETMode"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="filtermoduleorders">
				<path>
					<node type="DYNAMIC" nodevalue="FilterModuleOrders"></node>
				</path>		
			</dependency>
		</dependencies>	
		<comparisons>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.References.FilterModuleReference">
				<field name="name"></field>
				<field name="ref"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.FilterModule">
				<field name="inputFilters"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.Filter">
				<field name="filterElements"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.FilterElement">
				<field name="conditionPart"></field>
				<field name="matchingPatterns"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.ConditionLiteral">
				<path>
					<method name="getCondition"></method>
					<method name="getRef"></method>
					<method name="getQualifiedName"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.Or">
				<field name="left"></field>
				<field name="right"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.MatchingPart">
				<path>
					<method name="getTarget"></method>
					<method name="getName"></method>
				</path>
				<path>
					<method name="getSelector"></method>
					<method name="getName"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.SubstitutionPart">
				<path>
					<method name="getTarget"></method>
					<method name="getName"></method>
				</path>
				<path>
					<method name="getSelector"></method>
					<method name="getName"></method>
				</path>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.CpsConcern.Filtermodules.MessageSelector">
				<field name="typeList"></field>
			</type>
		</comparisons>
	</module>
	<module name="ASTRA" fulltype="Composestar.dotnet.TYM.SignatureTransformer.DotNETSignatureTransformer" phase="two" enabled="true" incremental="false" summary="">
		<dependencies></dependencies>	
	</module>
	<module name="RECOMA" fulltype="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager" input="java.lang.String" phase="two" enabled="true" incremental="true" summary="Compiling all sources...">
		<dependencies>
			<dependency type="OBJECT" name="ApplicationInfo" store="true" lookup="true">
				<path>
					<node type="CONFIG" nodevalue="ApplicationStart"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="RunDebugLevel" store="true" lookup="true">
				<path>
					<node type="CONFIG" nodevalue="RunDebugLevel"></node>
				</path>
			</dependency>
			<dependency type="FILE" name="source"></dependency>
			<dependency type="FILE" name="xternals">
				<path>
					<node type="METHOD" nodevalue="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager.externalSources"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="fullsignatures">
				<path>
					<node type="METHOD" nodevalue="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager.fullSignatures"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="ConcernsWithFMO">
				<path>
					<node type="METHOD" nodevalue="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager.getConcernsWithFMO"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="CastingInterceptions">
				<path>
					<node type="METHOD" nodevalue="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager.castingInterceptions"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="InstantiationClasses">
				<path>
					<node type="METHOD" nodevalue="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager.getAfterInstantiationClasses"></node>
				</path>
			</dependency>
			<dependency type="OBJECT" name="ConcernsWithOutputFilters">
				<path>
					<node type="METHOD" nodevalue="Composestar.dotnet.TYM.SrcCompiler.DotNETRealSourceManager.getConcernsWithOutputFilters"></node>
				</path>
			</dependency>
		</dependencies>
		<comparisons>
			<type fullname="Composestar.core.CpsProgramRepository.Signature">
				<field name="methodByKey"></field>
			</type>
			<type fullname="Composestar.core.CpsProgramRepository.MethodWrapper">
				<field name="RelationType"></field>
			</type>
		</comparisons>
	</module>
	<module name="CONE" fulltype="Composestar.dotnet.CONE.DotNETCONE" phase="two" enabled="true" incremental="false" summary="">
		<dependencies></dependencies>	
	</module>
	<module name="ILICIT" fulltype="Composestar.dotnet.ILICIT.ILICIT" phase="two" enabled="true" incremental="false" summary="Weaving assemblies...">
		<dependencies></dependencies>	
	</module>
</modules>
