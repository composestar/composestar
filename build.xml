<?xml version="1.0" encoding="UTF-8"?>
<project name="ComposeStar/Core/Compiletime" default="build" xmlns:cs="antlib:Composestar">

	<property name="build.core" location=".."/>
	<import file="${build.core}/common.xml"/>
	
	<echo>Processing: ${ant.project.name} ...</echo>
	<description>The Compose* Core Compiletime. This is the core of the Compose* compiler.</description>

	<target name="clean" depends="init" description="Clean compile results">

		<!-- Java build files -->
		<delete dir="${out.build}"/>
		<delete dir="${out.dist}"/>
		<delete>
			<fileset dir="src">
				<include name="**/*.class"/>
			</fileset>
			<fileset dir="test">
				<include name="**/*.class"/>
			</fileset>
		</delete>

		<!-- COPPER parser -->
		<delete>
			<fileset dir="src/Composestar/Core/COPPER">
				<include name="CpsLexer.java"/>
				<include name="CpsParser.java"/>
				<include name="CpsTokenTypes.*"/>
				<include name="CpsTreeWalker.java"/>
				<include name="CpsTreeWalkerTokenTypes.*"/>
				<include name="*.smap"/>
			</fileset>
		</delete>

	</target>
	
	<target name="local_init" depends="init">
		<mkdir dir="${out.build}"/>
		<mkdir dir="${out.dist}"/>
	</target>
	
	<target name="build" depends="local_init,antlr,compile,jar" description="Compile the code and create the jar file"/>
	
	<target name="antlr">
		<cs:antlr target="src/Composestar/Core/COPPER/grammar/cps.g" 
		          outputdirectory="src/Composestar/Core/COPPER"
		          classpathref="lib.core"/>
		<cs:antlr target="src/Composestar/Core/COPPER/grammar/cpsw.g"
		          outputdirectory="src/Composestar/Core/COPPER"
		          classpathref="lib.core"/>
	</target>
	
	<target name="compile" depends="local_init,antlr">
		<javac srcdir="src" destdir="${out.build}" classpathref="lib.core" source="${build.java.version}" target="${build.java.version}" debug="${build.debug}" deprecation="${build.deprecation}">
			<exclude name="**/AssemblyInfo.java"/>
		</javac>
	</target>
	
	<target name="jar" depends="compile">
		<copy todir="${out.build}"><!-- copy groove grammars -->
			<fileset dir="src">
				<include name="**/*.gpr"/>
				<include name="Composestar/Core/DIGGER/Xslt/*.xslt"/>
			</fileset>
		</copy>
		<jar destfile="${out.jar.core}" basedir="${out.build}" manifest="src/MANIFEST.MF"/>
	</target>
	
	<target name="install" depends="build" description="Install the core files">

		<copy file="src/Composestar/Core/INCRE/INCRE.css" todir="${composestar.installdir}"/>
		<copy file="src/Composestar/Core/CKRET/CKRET.css" todir="${composestar.installdir}"/>
		<copy file="src/Composestar/Core/CKRET/filterdesc.xml" todir="${composestar.installdir}"/>

		<copy todir="${composestar.installdir}/Binaries">
			<fileset dir="${out.dist}"/>
			<fileset file="binaries/antlr/antlr.jar"/>
		</copy>

		<copy todir="${composestar.installdir}/Binaries/prolog">
			<fileset dir="binaries/prolog">
				<include name="prolog.jar"/>
				<include name="lib.pro"/>
				<include name="connector.pro"/>
			</fileset>
		</copy>

		<copy todir="${composestar.installdir}/Binaries/groove">
			<fileset dir="binaries/groove">
				<include name="groove-1_2_0.jar"/>
				<include name="castor-0_9_5_2-xml.jar"/>
				<include name="jgraph.jar"/>
				<include name="xerces-2_6_0-xercesImpl.jar"/>
				<include name="xerces-2_6_0-xml-apis.jar"/>
			</fileset>
		</copy>

	</target>

	<target name="compile_tests" depends="local_init,compile">
		<path id="lib.test">
			<path refid="lib.core"/>
			<pathelement path="${out.build}"/>
		</path>
		<javac srcdir="test" destdir="test" classpathref="lib.test" source="1.4" target="1.4" debug="${build.debug}" deprecation="${build.deprecation}">
			<include name="**/*.java"/>
			<exclude name="**/AssemblyInfo.java"/>
		</javac>
	</target>

	<target name="unittest" depends="compile_tests" description="Runs JUnit tests">
		<path id="lib.junit">
			<fileset dir="${build.core}\Compiletime\binaries\junit" includes="*.jar"/>
		</path>
		<taskdef name="junit" classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" classpathref="lib.junit"/>
		<junit printsummary="on" haltonfailure="on">
			<classpath>
				<path refid="lib.test"/>
				<pathelement path="test"/>
			</classpath>
			<formatter type="plain"/>
			<batchtest todir="test">
				<fileset dir="test">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
</project>
