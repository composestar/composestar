// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
namespace TestContextInfo
{
    /// <summary>
    ///This is a test class for Composestar.StarLight.ContextInfo.JoinPointContext and is intended
    ///to contain all Composestar.StarLight.ContextInfo.JoinPointContext Unit Tests
    ///</summary>
    [TestClass()]
    public class JoinPointContextFixture
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for AddArgument (short, Type, object)
        ///</summary>
        [TestMethod()]
        public void AddArgumentTest()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            short ordinal = 1; 

            global::System.Type argumentType = typeof(string);

            object value = "123"; 

            target.AddArgument(ordinal, argumentType, value);

            Assert.AreEqual(argumentType, target.GetArgumentType(ordinal));
            Assert.AreEqual(value, target.GetArgumentValue(ordinal));            
        }

        /// <summary>
        ///A test for GetArgumentType (short)
        ///</summary>
        [TestMethod()]
        public void GetArgumentTypeTest()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            short ordinal = 0; 
            global::System.Type expected = typeof(int);
            global::System.Type actual;

            target.AddArgument(ordinal, expected, null); 

            actual = target.GetArgumentType(ordinal);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ContextInfo.JoinPointContext.GetArgumentType did not return" +
                    " the expected value.");           
        }

        /// <summary>
        ///A test for GetArgumentValue (short)
        ///</summary>
        [TestMethod()]
        public void GetArgumentValueTest()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            short ordinal = 0; 

            object expected = "123";
            object actual;

            target.AddArgument(ordinal, typeof(short), expected); 
            actual = target.GetArgumentValue(ordinal);

            Assert.AreEqual(expected, actual, "Composestar.StarLight.ContextInfo.JoinPointContext.GetArgumentValue did not return the expected value.");
            
        }

        /// <summary>
        ///A test for HasReturnValue
        ///</summary>
        [TestMethod()]
        public void HasReturnValueCheck()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            bool val = false; 
            
            Assert.AreEqual(val, target.HasReturnValue, "Composestar.StarLight.ContextInfo.JoinPointContext.HasReturnValue was not set correctly.");

            val =true;
            target.ReturnType = typeof(string);

            Assert.AreEqual(val, target.HasReturnValue, "Composestar.StarLight.ContextInfo.JoinPointContext.HasReturnValue was not set correctly.");
        }

        
        /// <summary>
        ///A test for MethodName
        ///</summary>
        [TestMethod()]
        public void MethodNamePersists()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            string val = "TestMethodName";

            target.MethodName = val;


            Assert.AreEqual(val, target.MethodName, "Composestar.StarLight.ContextInfo.JoinPointContext.MethodName was not set correctly.");            
        }

        /// <summary>
        ///A test for ReturnType
        ///</summary>
        [TestMethod()]
        public void ReturnTypePersists()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            global::System.Type val = typeof(double);

            target.ReturnType = val;


            Assert.AreEqual(val, target.ReturnType, "Composestar.StarLight.ContextInfo.JoinPointContext.ReturnType was not set correctly.");            
        }

        /// <summary>
        ///A test for ReturnValue
        ///</summary>
        [TestMethod()]
        [ExpectedException(typeof(ArgumentNullException)) ]
        public void ReturnValueMustRaiseExceptionWhenNoTypeHasBeenSet()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            object val = "234"; 

            target.ReturnValue = val;
            
            
        }

        /// <summary>
        ///A test for Target
        ///</summary>
        [TestMethod()]
        public void TargetTest()
        {
            global::Composestar.StarLight.ContextInfo.JoinPointContext target = new global::Composestar.StarLight.ContextInfo.JoinPointContext();

            object val = null; // TODO: Assign to an appropriate value for the property

            target.Target = val;


            Assert.AreEqual(val, target.Target, "Composestar.StarLight.ContextInfo.JoinPointContext.Target was not set correctly.");
            Assert.Inconclusive("Verify the correctness of this test method.");
        }

    }


}
