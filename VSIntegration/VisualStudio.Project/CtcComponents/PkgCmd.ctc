/***************************************************************************

Copyright (c) Microsoft Corporation. All rights reserved.
This code is licensed under the Visual Studio SDK license terms.
THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.

***************************************************************************/

//
// This is the file that defines the actual layout and type of the commands.
// It is divided in different sections (e.g. command definition, command
// placement, ...), with each defining a specific set of properties.
// See the comment before each section for more details about how to
// use it.
//


// The CTC compiler (the tool that translates this file into the binary
// format that VisualStudio will consume) has the ability to run a preprocessor
// on the ctc file; this preprocessor is (usually) the C++ preprocessor, so
// it is possible to define includes and macros with the same syntax used
// in C++ files. Using this ability of the compiler here, we include some files
// defining some of the constants that we will use inside the file.

#include "stdidcmd.h"      // This is the file that defines the IDs for all the
                           // commands exposed by VisualStudio.

#include "vsshlids.h"      // This header contains the command ids for the menus
                           // provided by the shell.

#include "msobtnid.h"      // Definition of some CTC specific constants. In this sample
                           // we use it for the IDs inside the guidOfficeIcon group.

#include "Guids.h"         // This is the file with the definition of the Guid
                           // specific for this sample.

#include "PkgCmdId.h"      // Definition of the IDs of the commands and CTC elements
                           // specific for this sample.


// The first section of this file is the CMDS_SECTION. This is where we define
// the commands, menus and menu groups. This section uses a Guid to identify the
// package that provides the command defined inside it.
CMDS_SECTION guidComposeStarProjectPkg

  // Inside this section we have different sub-sections: one for the menus, another 
  // for the menu groups, one for the buttons (the actual commands), one for the combos
  // and the last one for the bitmaps used. Each element is identified by a command id that 
  // is a unique pair of guid and numeric identifier; the guid part of the identifier is usually 
  // called "command set" and is used to group different command inside a logically related 
  // group; your package should define its own command set in order to avoid collisions 
  // with command ids defined by other packages.

  // This is the sub-section that defines the menus and toolbars.
  MENUS_BEGIN
    
    // To define an element in this group we need an ID, a parent group, a display priority,
    // a menu type, a name and a default text.
    // In this example we define a toolbar, so its menu type is TOOLBAR; also notice that we
    // use the menu as parent for itself because this it is not supposed to have any parent.
    
    // Menu's ID                          Parent                                 Priority    Type      Name          Text
    
  MENUS_END

  // In this section we can define new menu groups. A menu group is a container for
  // other menus or buttons (commands); from a visual point of view you can see the
  // group as the part of a menu contained between two lines. The parent of a group
  // must be a menu.
  NEWGROUPS_BEGIN

    // To define a menu group we have to specify its ID, the parent menu and its display priority.
    // In this case we use as parent menu the Tools menu of VS; its ID is defined in vsshlids.h

    // Group's ID                                 Parent                                Priority
    guidComposeStarProjectCmdSet:CodeFileGroup,    guidSHLMainMenu:IDM_VS_MENU_PROJECT,    0x600;
  
  NEWGROUPS_END

  // Button section.
  // This section defines the elements the user can interact with, like a menu command or a button 
  // or combo box in a toolbar.
  BUTTONS_BEGIN
    
    // An element inside this section is defined by its ID and must specify a parent group, a display 
    // priority, an image, a type, some visibility flags (optional) and a default text.

    // Command ID,                              Parent Group                                  Priority,   Image,                        Type,   Visibility,                           Text
   // guidComposeStarProjectCmdSet:cmdidSetAsMain, guidComposeStarProjectCmdSet:CodeFileGroup,    0x100,      guidOfficeIcon:msotcidNoIcon, BUTTON, DYNAMICVISIBILITY | DEFAULTINVISIBLE, "Set as Main";

  BUTTONS_END

  // The bitmaps section is used to define the bitmaps that are used for the commands.
  BITMAPS_BEGIN
    // The bitmap id is defined in a way that is a little bit different from the others:
    // the declaration starts with a guid for the bitmap strip, then there is the resource id of the
    // bitmap strip containing the bitmaps and then there are the numeric ids of the elements used
    // inside a button definition. An important aspect of this declaration is that the element id
    // must be the actual index (1-based) of the bitmap inside the bitmap strip.
    // In this example we have a bitmap strip with resource id 300 and that contains only one
    // element; we want to define as ID for this element guidMenuAndCommandsCmdSet:bmpArrow, so we
    // have to define bmpArrow as 1 and is the delaration of the bitmap:

    // Command set    ResourceID,  Id element1, Id element2, ..., Id elementN;
  BITMAPS_END

CMDS_END // End of the command definition section.


// Inside this section, we have the ability to place menu groups inside some other menu or
// menu / commands inside other groups.
// For instance, it is possible to place one of VisualStudio's menus or commands inside one of our 
// groups or one of our groups inside a menu defined somewhere else.
CMDPLACEMENT_SECTION

  // Here we place two commands inside the empty menu group we created in the NEWGROUPS section.
  // The elements are:
  // ID of the element to place					ID of the parent group							Priority
  guidComposeStarProjectCmdSet:CodeFileGroup,    guidSHLMainMenu:IDM_VS_CTXT_ITEMNODE,			0x600;
CMDPLACEMENT_END


// This section is where you can associate a command with a keyboard shortcut; this association is 
// valid within a specific UI context, that is when the shell is inside a specific mode, e.g. during 
// debugging, editing a file or when the user is using a specific designer.
KEYBINDINGS_SECTION

  // To define a binding, we have to specify the sequence of keys to press to activate the command 
  // (keystate); the syntax to use is <key>[:<special keys>] where the special keys section can be 
  // empty. The accepted special keys and their representation are:
  //   Alt - A
  //   Control - C
  //   Shift - S
  //   Windows Key - W
  // For example, if you want to define a binding for <Control>C the definition will be 'C':C; if the 
  // binding is <Control><Alt>C, then the keybinding is 'C':AC.
  //
  // Notice that Visual Studio has a lot of components and commands, so it can be difficult to find a 
  // key binding not used by somebody else; if the key bindings are conflicting only one will be used
  // and one problem is that the shell will not inform the user that a conflict was found. The only 
  // way to detect the problem is to start Visual Studio under debugger, try to execute any command 
  // and look if there is a message in the output window about a duplicated accelerator found.
  //
  // In this example we want to use the <Control><1> accelerator for the first command defined in
  // the BUTTON section above, so this is its definition:
  
  // Command ID                             when available  emulation       keybinding

KEYBINDINGS_END
