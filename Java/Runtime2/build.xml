<?xml version="1.0" encoding="UTF-8"?>
<project name="ComposeStar/Java/Runtime" default="build">

	<condition property="build.core" value="../../Core">
		<and>
			<not>
				<isset property="build.core" />
			</not>
			<available file="../../Core/common.xml" />
		</and>
	</condition>
	<import file="${build.core}/common.xml" />

	<description>Compose*/Java Runtime</description>

	<target name="clean" depends="init" description="clean the compilation results">
		<!-- Java build files -->
		<delete dir="${out.build}" />
		<delete dir="${out.dist}" />
		<delete>
			<fileset dir="src">
				<include name="**/*.class" />
			</fileset>
		</delete>
	</target>

	<target name="init_local" depends="init">
		<mkdir dir="${out.build}" />
		<mkdir dir="${out.dist}" />
		<mkdir dir="${out.dist}/lib" />
	</target>

	<target name="build" depends="init_local,compile_java,jar,src-jar" description="build the java runtime" />

	<target name="compile_java" depends="init_local">
		<javac srcdir="src" destdir="${out.build}" debug="${build.debug}" deprecation="${build.deprecation}">
			<classpath>
				<pathelement location="${build.core}/Compiletime/${out.jar.core}" />
			</classpath>
		</javac>
	</target>

	<target name="jar" depends="compile_java">
		<!--
		<jar destfile="${out.dist}/lib/ComposestarRuntimeInterpreter.jar">
			<fileset dir="${build.core}/Runtime/${out.build}" /> 
			<fileset dir="${out.build}" />
		</jar>
		-->
		<taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" />
		<jarjar jarfile="${out.dist}/lib/ComposestarRuntimeInterpreter.jar">
			<fileset dir="${out.build}" />
			<zipfileset src="${build.core}/Compiletime/${out.jar.core}">
				<include name="**/*.class" />
			</zipfileset>
			<zipfileset src="${build.java}/Compiletime/${out.jar.java}">
				<include name="**/*.class" />
			</zipfileset>
			<keep pattern="Composestar.Java.FLIRT.**" />
			<keep pattern="Composestar.Core.CpsRepository2.**" />
			<keep pattern="Composestar.Core.CpsRepository2Impl.**" />
			<keep pattern="Composestar.Core.LAMA.**" />
			<keep pattern="Composestar.Java.LAMA.**" />
		</jarjar>
	</target>

	<target name="src-jar" depends="jar" description="Create a source package for the runtime jar file">
		<zipfileset id="java.rt.classes" src="${out.dist}/lib/ComposestarRuntimeInterpreter.jar" prefix="src/">
			<include name="**/*.class" />
			<exclude name="**/*$*.class" />
		</zipfileset>
		<script language="javascript">
			<![CDATA[
			importClass(java.io.File);
			
			var filelist = project.getReference('java.rt.classes');
			var it = filelist.iterator();
			
			var resultJRT = project.createDataType('fileset');
			resultJRT.setDir(new File(project.getBaseDir(), 'src'));
			project.addReference('java.rt.source.javart', resultJRT);
			
			var resultC = project.createDataType('fileset');
			resultC.setDir(new File(project.getProperty('build.core')+'/Compiletime/src/'));
			project.addReference('java.rt.source.core', resultC);
			
			var resultJ = project.createDataType('fileset');
			resultJ.setDir(new File(project.getProperty('build.java')+'/Compiletime/src/'));
			project.addReference('java.rt.source.java', resultJ);
			
			while (it.hasNext()) {
				var entry = ""+it.next().getName();
				entry = entry.replace(/\.class$/, '\.java');
				var includeEntry;
				if (/^(Composestar\/Java\/FLIRT\/)/.test(entry)) {
					includeEntry = resultJRT.createInclude();
				}
				else if (/^(Composestar\/Java\/)/.test(entry)) {
					includeEntry = resultJ.createInclude();
				}
				else {
					includeEntry = resultC.createInclude();
				}
				includeEntry.setName(entry);
			}
			]]>
		</script>
		<zip destfile="${out.dist}/lib/ComposestarRuntimeInterpreter-src.zip">
			<fileset refid="java.rt.source.core" />
			<fileset refid="java.rt.source.java" />
			<fileset refid="java.rt.source.javart" />
		</zip>
	</target>

	<target name="install" depends="init_eclipse,build" description="install the java runtime">
		<copy todir="${eclipse.pluginsdir.java}${file.separator}">
			<fileset dir="${out.dist}" />
		</copy>
	</target>

</project>
