<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PurpleSharp</name>
    </assembly>
    <members>
        <member name="T:Purple.Actions.ActionUpdateHandler">
            <summary>
            Delegate that handles the event fired when an <see cref="T:Purple.Actions.IAction"/> gets updated.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
              <para>Update: 0.5</para>
            </remarks>
        </member>
        <member name="T:Purple.Actions.SimpleActionUpdateHandler">
            <summary>
            Delegate that handles the event fired when an <see cref="T:Purple.Actions.IAction"/> gets updated.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Last change: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Actions.Action">
            <summary>
            A simple generic action that uses a delegate for performing the 
            actual action.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Last change: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Actions.ActionBase">
            <summary>
            Abstract base class of an <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Last change: 0.6</para>
            </remarks>
        </member>
        <member name="T:Purple.Actions.IAction">
            <summary>
            Abstract interface for an action.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
              <para>Last change: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Actions.IAction.Update(System.Single)">
            <summary>
            Updates the current <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="deltaTime">Time since the last call of <c>Update</c>."/&gt;</param>
        </member>
        <member name="M:Purple.Actions.IAction.Finish">
            <summary>
            Finish the action.
            </summary>
        </member>
        <member name="M:Purple.Actions.IAction.Reset">
            <summary>
            Reset the action to its inital state.
            </summary>
        </member>
        <member name="E:Purple.Actions.IAction.Started">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> gets started.
            </summary>
        </member>
        <member name="E:Purple.Actions.IAction.SimpleStarted">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> get started.
            </summary>
        </member>
        <member name="E:Purple.Actions.IAction.Finished">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> has finished.
            </summary>
        </member>
        <member name="E:Purple.Actions.IAction.SimpleFinished">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> has finished.
            </summary>
        </member>
        <member name="P:Purple.Actions.IAction.Name">
            <summary>
            Returns the name of the <see cref="T:Purple.Actions.IAction"/> for debugging purposes.
            </summary>
        </member>
        <member name="P:Purple.Actions.IAction.TotalTime">
            <summary>
            Returns the total time of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
        </member>
        <member name="P:Purple.Actions.IAction.Time">
            <summary>
            Returns the current (passed) time.
            </summary>
        </member>
        <member name="P:Purple.Actions.IAction.Object">
            <summary>
            Internal object of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <remarks>
            This object can be used to store a reference on the object that should be 
            manipulated by the current <see cref="T:Purple.Actions.IAction"/> or some internal state.
            </remarks>
        </member>
        <member name="P:Purple.Actions.IAction.IsRunning">
            <summary>
            Returns true if the <see cref="T:Purple.Actions.IAction"/> is running.
            </summary>
        </member>
        <member name="P:Purple.Actions.IAction.IsFinished">
            <summary>
            Returns true if the <see cref="T:Purple.Actions.IAction"/> is finished.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionBase.setTime(System.Single)">
            <summary>
            Set the current time -> change to property in .NET 2.0
            </summary>
            <param name="time">The new time.</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.setIsRunning(System.Boolean)">
            <summary>
            Set the internal isRunning variable.
            </summary>
            <param name="isRunning">New value.</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.setIsFinished(System.Boolean)">
            <summary>
            Sets the internal value of isFinished. 
            </summary>
            <param name="isFinished">The new value for isFinished.</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Purple.Actions.ActionBase"/> with a given name.
            </summary>
            <param name="name">Name of <see cref="T:Purple.Actions.IAction"/>.</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.#ctor(System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:Purple.Actions.ActionBase"/> with a given name.
            </summary>
            <param name="name">Name of <see cref="T:Purple.Actions.IAction"/>.</param>
            <param name="internalObject">The object that is used by the action or some kind of internal state.</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.Finish">
            <summary>
            Finish the action.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionBase.HandleUpdate(System.Single)">
            <summary>
            The method that is called on every update.
            </summary>
            <param name="deltaTime">The time passed since the last update</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.Update(System.Single)">
            <summary>
            Updates the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="deltaTime">Time that has passed since the last update.</param>
        </member>
        <member name="M:Purple.Actions.ActionBase.OnFinish">
            <summary>
            The action finished.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionBase.DoStart">
            <summary>
            The action started.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionBase.Reset">
            <summary>
            Reset the action to its inital state.
            </summary>
        </member>
        <member name="E:Purple.Actions.ActionBase.Started">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> gets started.
            </summary>
        </member>
        <member name="E:Purple.Actions.ActionBase.SimpleStarted">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> get started.
            </summary>
        </member>
        <member name="E:Purple.Actions.ActionBase.Finished">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> has finished.
            </summary>
        </member>
        <member name="E:Purple.Actions.ActionBase.SimpleFinished">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> has finished.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionBase.Name">
            <summary>
            Returns the name of the <see cref="T:Purple.Actions.IAction"/> for debugging purposes.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionBase.Time">
            <summary>
            Returns the current (passed) time.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionBase.TotalTime">
            <summary>
            Returns the total time of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionBase.IsRunning">
            <summary>
            Returns true if the <see cref="T:Purple.Actions.IAction"/> is running.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionBase.IsFinished">
            <summary>
            Returns true if the <see cref="T:Purple.Actions.IAction"/> is finished.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionBase.Object">
            <summary>
            Internal object of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <remarks>
            This object can be used to store a reference on the object that should be 
            manipulated by the current <see cref="T:Purple.Actions.IAction"/> or some internal state.
            </remarks>
        </member>
        <member name="M:Purple.Actions.Action.#ctor(System.String,System.Single)">
            <summary>
            Creates a new generic <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="name">Name of the action.</param>
            <param name="totalTime">The total time of the <see cref="T:Purple.Actions.IAction"/>.</param>
        </member>
        <member name="M:Purple.Actions.Action.#ctor(System.String,System.Single,System.Object)">
            <summary>
            Creates a new generic <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="name">Name of the action.</param>
            <param name="totalTime">The total time of the <see cref="T:Purple.Actions.IAction"/>.</param>
            <param name="internalObject">The object that is used by the action or some kind of internal state.</param>
        </member>
        <member name="M:Purple.Actions.Action.HandleUpdate(System.Single)">
            <summary>
            The method that is called on every update.
            </summary>
            <param name="t">The time in the range of [0..1].</param>
        </member>
        <member name="M:Purple.Actions.Action.OnFinish">
            <summary>
            Finishe the current action.
            </summary>
            <remarks>
            The actions time is moved to one. Then it is updated and the the FinishedEvent 
            is fired.
            </remarks>
        </member>
        <member name="E:Purple.Actions.Action.OnSimpleUpdate">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.Action"/> should be updated.
            </summary>
        </member>
        <member name="E:Purple.Actions.Action.OnUpdate">
            <summary>
            Event that is fired when <see cref="T:Purple.Actions.IAction"/> should be updated.
            </summary>
        </member>
        <member name="P:Purple.Actions.Action.TotalTime">
            <summary>
            Returns the total time of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Purple.Actions.ActionHandler">
            <summary>
            Delegate that handles the event fired when an <see cref="T:Purple.Actions.IAction"/> is started or finished.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Last change: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Actions.SimpleActionHandler">
            <summary>
            Delegate that handles the event fired when an <see cref="T:Purple.Actions.IAction"/> is started or finished finished.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Last change: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Actions.ActionChain">
            <summary>
            An ActionChain is formed by a sequence of actions executed
            in sequential order.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
              <para>Last change: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Actions.ActionChain.#ctor(System.String)">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Actions.ActionChain"/>.
            </summary>
            <param name="name">Name of the <see cref="T:Purple.Actions.IAction"/>.</param>
        </member>
        <member name="M:Purple.Actions.ActionChain.Add(Purple.Actions.IAction)">
            <summary>
            Adds an <see cref="T:Purple.Actions.IAction"/> to the <see cref="T:Purple.Actions.ActionChain"/>.
            </summary>
            <param name="action">Action to add.</param>
        </member>
        <member name="M:Purple.Actions.ActionChain.Update(System.Single)">
            <summary>
            Updates the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <remarks>Removing actions from a running <see cref="T:Purple.Actions.ActionChain"/> may 
            cause strange behaviour.</remarks>
            <param name="deltaTime">Time that has passed since the last update.</param>
        </member>
        <member name="M:Purple.Actions.ActionChain.HandleUpdate(System.Single)">
            <summary>
            The method that is called on every update.
            </summary>
            <param name="t">The time passed since the last update</param>
        </member>
        <member name="M:Purple.Actions.ActionChain.OnFinish">
            <summary>
            Finish the action.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionChain.Reset">
            <summary>
            Reset the action to its inital state.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionChain.TotalTime">
            <summary>
            Returns the total time of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Purple.Actions.ActionGroup">
            <summary>
            An ActionGroup is formed by a group of actions executed in parallel
            order.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
              <para>Last change: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Actions.ActionGroup.#ctor(System.String)">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Actions.ActionGroup"/>.
            </summary>
            <param name="name">Name of the <see cref="T:Purple.Actions.IAction"/>.</param>
        </member>
        <member name="M:Purple.Actions.ActionGroup.Add(Purple.Actions.IAction)">
            <summary>
            Adds an <see cref="T:Purple.Actions.IAction"/> to the <see cref="T:Purple.Actions.ActionGroup"/>.
            </summary>
            <param name="action">Action to add.</param>
        </member>
        <member name="M:Purple.Actions.ActionGroup.Update(System.Single)">
            <summary>
            Updates the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="deltaTime">Time that has passed since the last update.</param>
        </member>
        <member name="M:Purple.Actions.ActionGroup.Reset">
            <summary>
            Reset the action to its inital state.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionGroup.HandleUpdate(System.Single)">
            <summary>
            The method that is called on every update.
            </summary>
            <param name="t">The time passed since the last update</param>
        </member>
        <member name="M:Purple.Actions.ActionGroup.OnFinish">
            <summary>
            Finish the action.
            </summary>
        </member>
        <member name="P:Purple.Actions.ActionGroup.TotalTime">
            <summary>
            Returns the total time of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Purple.Actions.ActionManager">
            <summary>
            Class that handles a certain group of <see cref="T:Purple.Actions.IAction"/> objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
              <para>Last change: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Actions.ActionManager.#ctor">
            <summary>
            Creates a new instance <see cref="T:Purple.Actions.ActionManager"/>.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionManager.Add(Purple.Actions.IAction)">
            <summary>
            Adds an <see cref="T:Purple.Actions.IAction"/> to the <see cref="T:Purple.Actions.ActionGroup"/>.
            </summary>
            <param name="action">Action to add.</param>
        </member>
        <member name="M:Purple.Actions.ActionManager.Remove(Purple.Actions.IAction)">
            <summary>
            Removes an <see cref="T:Purple.Actions.IAction"/> from the manager without firing the finish event.
            </summary>
            <param name="action">The action to remove.</param>
        </member>
        <member name="M:Purple.Actions.ActionManager.Clear">
            <summary>
            Removes all pending actions from the action manager.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionManager.Update(System.Single)">
            <summary>
            Updates the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="deltaTime">Time that has passed since the last update.</param>
        </member>
        <member name="M:Purple.Actions.ActionManager.Finish">
            <summary>
            Finish the action.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionManager.Contains(System.String)">
            <summary>
            Returns true if the actionManager contains an action with a given name.
            </summary>
            <param name="name">Name of the action to test for.</param>
            <returns>True if the actionManager contains an action with the given name.</returns>
        </member>
        <member name="T:Purple.Actions.ActionAlignment">
            <summary>
            A simple enumeration for aligning a simple action.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="F:Purple.Actions.ActionAlignment.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="F:Purple.Actions.ActionAlignment.End">
            <summary>
            End
            </summary>
        </member>
        <member name="F:Purple.Actions.ActionAlignment.Centered">
            <summary>
            Centered
            </summary>
        </member>
        <member name="T:Purple.Actions.ActionScheduler">
            <summary>
            Class that schedules the execution of certain actions.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.#ctor(System.String)">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Actions.ActionScheduler"/>.
            </summary>
            <param name="name">Name of the action.</param>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.Update(System.Single)">
            <summary>
            Updates the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
            <param name="deltaTime">Time that has passed since the last update.</param>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.Add(Purple.Actions.IAction,System.Single)">
            <summary>
            Add an <see cref="T:Purple.Actions.IAction"/> to the <see cref="T:Purple.Actions.ActionScheduler"/>.
            </summary>
            <param name="action">Action to add.</param>
            <param name="time">The time for starting the action.</param>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.Add(Purple.Actions.IAction,System.Single,Purple.Actions.ActionAlignment)">
            <summary>
            Add an <see cref="T:Purple.Actions.IAction"/> to the <see cref="T:Purple.Actions.ActionScheduler"/>.
            </summary>
            <param name="action">The action to add.</param>
            <param name="time">The time for starting the action.</param>
            <param name="alignment">The alignment of the action.</param>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.OnFinish">
            <summary>
            Finish the action and all its children.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.Reset">
            <summary>
            Reset the action to its inital state.
            </summary>
        </member>
        <member name="M:Purple.Actions.ActionScheduler.HandleUpdate(System.Single)">
            <summary>
            The method that is called on every update.
            </summary>
            <param name="deltaTime">The time passed since the last update</param>
        </member>
        <member name="P:Purple.Actions.ActionScheduler.TotalTime">
            <summary>
            Returns the total time of the action scheduler.
            </summary>
        </member>
        <member name="T:Purple.AI.FSM.IState">
            <summary>
            Abstract interface for a simple state of a finite state machine.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.AI.FSM.IState.IsA(Purple.AI.FSM.IState)">
            <summary>
            Tests if the current <see cref="T:Purple.AI.FSM.IState"/> or one of its parent is equal to the 
            given state.
            </summary>
            <param name="state"></param>
            <returns>True if the current <see cref="T:Purple.AI.FSM.IState"/> or one of its parent is equal to the 
            given state.</returns>
        </member>
        <member name="M:Purple.AI.FSM.IState.CanSwitch(Purple.AI.FSM.IState)">
            <summary>
            Returns true if there is a transition from the current to the target <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="target">The target state.</param>
            <returns>True if a transition is possible.</returns>
        </member>
        <member name="M:Purple.AI.FSM.IState.Switch(Purple.AI.FSM.IState)">
            <summary>
            Switches from the current to a given <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="target">The target state.</param>
            <returns>The current state.</returns>
        </member>
        <member name="M:Purple.AI.FSM.IState.Add(Purple.AI.FSM.IState)">
            <summary>
            Adds a <see cref="T:Purple.AI.FSM.IState"/> object to the list.
            </summary>
            <param name="state">State to add.</param>
        </member>
        <member name="P:Purple.AI.FSM.IState.Parent">
            <summary>
            Returns the parent <see cref="T:Purple.AI.FSM.IState"/> or null if there is none.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.IState.Root">
            <summary>
            Returns the root <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.IState.Children">
            <summary>
            The sub states.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.IState.Name">
            <summary>
            Returns the name of the state.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.IState.FullName">
            <summary>
            Returns the full name of the state.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.IState.Transitions">
            <summary>
            List of possible state transitions
            </summary>
        </member>
        <member name="T:Purple.AI.FSM.State">
            <summary>
            Standard implementation of <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.AI.FSM.State.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.AI.FSM.State"/> object.
            </summary>
            <param name="name">Name of state.</param>
        </member>
        <member name="M:Purple.AI.FSM.State.#ctor">
            <summary>
            parameterless for Serialization
            </summary>
        </member>
        <member name="M:Purple.AI.FSM.State.AddTransition(Purple.AI.FSM.IState)">
            <summary>
            Adds a new transition to a certain target element.
            </summary>
            <param name="target">The target state.</param>
        </member>
        <member name="M:Purple.AI.FSM.State.RemoveTransition(Purple.AI.FSM.IState)">
            <summary>
            Removes the transition to a certain target element.
            </summary>
            <param name="target">The target state.</param>
        </member>
        <member name="M:Purple.AI.FSM.State.IsA(Purple.AI.FSM.IState)">
            <summary>
            Tests if the current <see cref="T:Purple.AI.FSM.IState"/> or one of its parent is equal to the 
            given state.
            </summary>
            <param name="state"></param>
            <returns>True if the current <see cref="T:Purple.AI.FSM.IState"/> or one of its parent is equal to the 
            given state.</returns>
        </member>
        <member name="M:Purple.AI.FSM.State.CanSwitch(Purple.AI.FSM.IState)">
            <summary>
            Returns true if there is a transition from the current to the target <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="target">The target state.</param>
            <returns>True if a transition is possible.</returns>
        </member>
        <member name="M:Purple.AI.FSM.State.Switch(Purple.AI.FSM.IState)">
            <summary>
            Switches from the current to a given <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="target">The target state.</param>
            <returns>The current state.</returns>
        </member>
        <member name="M:Purple.AI.FSM.State.Add(Purple.AI.FSM.IState)">
            <summary>
            Adds a <see cref="T:Purple.AI.FSM.IState"/> object to the list.
            </summary>
            <param name="state">State to add.</param>
        </member>
        <member name="P:Purple.AI.FSM.State.Name">
            <summary>
            Returns the name of the state.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.State.FullName">
            <summary>
            Returns the full name of the state.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.State.Transitions">
            <summary>
            List of possible state transitions
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.State.Parent">
            <summary>
            Returns the parent <see cref="T:Purple.AI.FSM.IState"/> or null if there is none.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.State.Root">
            <summary>
            Returns the root <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.State.Children">
            <summary>
            The sub states.
            </summary>
        </member>
        <member name="T:Purple.AI.FSM.StateMachine">
            <summary>
            An object representing a <see cref="T:Purple.AI.FSM.StateMachine"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.AI.FSM.States">
            <summary>
            A collection of <see cref="T:Purple.AI.FSM.IState"/> objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Collections.CollectionBase">
            <summary>
            A helper class for strong typed collections.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="F:Purple.Collections.CollectionBase.collection">
            <summary>
            The collection to use as container.
            </summary>
        </member>
        <member name="M:Purple.Collections.CollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Collections.CollectionBase.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Collections.CollectionBase.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Collections.CollectionBase.Count">
            <summary>
            Returns the number of items contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Collections.CollectionBase.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="P:Purple.Collections.CollectionBase.IsReadOnly">
            <summary>
            Returns true if collection is readonly.
            </summary>
        </member>
        <member name="P:Purple.Collections.CollectionBase.IsFixedSize">
            <summary>
            Returns true if the collection is a fixed size collection.
            </summary>
        </member>
        <member name="F:Purple.AI.FSM.States.states">
            <summary>
            Hashtable containing name and IState object.
            </summary>
        </member>
        <member name="M:Purple.AI.FSM.States.#ctor(Purple.AI.FSM.IState)">
            <summary>
            Creates a new <see cref="T:Purple.AI.FSM.States"/> object.
            </summary>
            <param name="parent">Parent state.</param>
        </member>
        <member name="M:Purple.AI.FSM.States.Add(Purple.AI.FSM.IState)">
            <summary>
            Adds a <see cref="T:Purple.AI.FSM.IState"/> object to the list.
            </summary>
            <param name="state">State to add.</param>
        </member>
        <member name="M:Purple.AI.FSM.States.Remove(Purple.AI.FSM.IState)">
            <summary>
            Removes a <see cref="T:Purple.AI.FSM.IState"/> from the list.
            </summary>
            <param name="state">State to remove.</param>
        </member>
        <member name="P:Purple.AI.FSM.States.Item(System.String)">
            <summary>
            Returns the <see cref="T:Purple.AI.FSM.IState"/> with a certain name.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.States.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.AI.FSM.IState"/> for a given index.
            </summary>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.AI.FSM.StateMachine"/>.
            </summary>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.AddTransition(Purple.AI.FSM.ITransition)">
            <summary>
            Adds a new <see cref="T:Purple.AI.FSM.ITransition"/>.
            </summary>
            <param name="transition">Transition to add.</param>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:Purple.AI.FSM.StateMachine"/>.
            </summary>
            <returns>A shallow copy of the <see cref="T:Purple.AI.FSM.StateMachine"/>.</returns>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.CanSwitch(System.String)">
            <summary>
            Returns true if there is a transition from the current to the target <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="fullName">The full name of the target state.</param>
            <returns>True if a transition is possible.</returns>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.Switch(System.String)">
            <summary>
            Switches from the current to a given <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="fullName">The full name of the target state.</param>
            <returns>The current state.</returns>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.Set(System.String)">
            <summary>
            Sets a new <see cref="T:Purple.AI.FSM.IState"/>.
            </summary>
            <param name="fullName">The full name of the target state.</param>
            <returns>The current state.</returns>
        </member>
        <member name="M:Purple.AI.FSM.StateMachine.IsA(System.String)">
            <summary>
            Tests if the current <see cref="T:Purple.AI.FSM.IState"/> or one of its parent is equal to the 
            given state.
            </summary>
            <param name="fullName">Full name of the state.</param>
            <returns>True if the current <see cref="T:Purple.AI.FSM.IState"/> or one of its parent is equal to the 
            given state.</returns>
        </member>
        <member name="P:Purple.AI.FSM.StateMachine.Current">
            <summary>
            Returns the current state.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.StateMachine.Item(System.String)">
            <summary>
            Returns the <see cref="T:Purple.AI.FSM.IState"/> with a certain name.
            </summary>
        </member>
        <member name="T:Purple.AI.FSM.ITransition">
            <summary>
            Abstract interface for a state transition.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="P:Purple.AI.FSM.ITransition.From">
            <summary>
            The state to change from.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.ITransition.To">
            <summary>
            The state to change to.
            </summary>
        </member>
        <member name="T:Purple.AI.FSM.Transition">
            <summary>
            Standard implementation of an <see cref="T:Purple.AI.FSM.ITransition"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.AI.FSM.Transition.#ctor(Purple.AI.FSM.IState,Purple.AI.FSM.IState)">
            <summary>
            Creates a new transition between to states.
            </summary>
            <param name="from">The from state.</param>
            <param name="to">The state to change to.</param>
        </member>
        <member name="P:Purple.AI.FSM.Transition.From">
            <summary>
            The state to change from.
            </summary>
        </member>
        <member name="P:Purple.AI.FSM.Transition.To">
            <summary>
            The state to change to.
            </summary>
        </member>
        <member name="T:Purple.AI.FSM.Transitions">
            <summary>
            A simple collection of <see cref="T:Purple.AI.FSM.ITransition"/> objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.AI.FSM.Transitions.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.AI.FSM.Transitions"/> object.
            </summary>
        </member>
        <member name="M:Purple.AI.FSM.Transitions.Add(Purple.AI.FSM.ITransition)">
            <summary>
            Adds a new transition to the list.
            </summary>
            <param name="trans">Transition to add.</param>
        </member>
        <member name="M:Purple.AI.FSM.Transitions.Remove(Purple.AI.FSM.ITransition)">
            <summary>
            Removes a transition from the list.
            </summary>
            <param name="trans"></param>
        </member>
        <member name="P:Purple.AI.FSM.Transitions.Item(System.Int32)">
            <summary>
            Returns the transition at a given index.
            </summary>
        </member>
        <member name="T:Purple.AI.Gesture">
            <summary>
            This class stores one gesture command.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.AI.Gesture.#ctor">
            <summary>
            Create a new instance of a <see cref="T:Purple.AI.Gesture"/> object.
            </summary>
        </member>
        <member name="M:Purple.AI.Gesture.#ctor(System.Int32)">
            <summary>
            Create a new instance of a <see cref="T:Purple.AI.Gesture"/> object.
            </summary>
            <param name="segmentNum">The number of segments to split path into.</param>
        </member>
        <member name="M:Purple.AI.Gesture.Init(Purple.Math.Vector2[])">
            <summary>
            Initializes a certain gesture from an array of points.
            </summary>
            <param name="points">The array of points to create gesture from.</param>
        </member>
        <member name="M:Purple.AI.Gesture.Match(Purple.AI.Gesture)">
            <summary>
            Calculates the matching value of two gestures.
            </summary>
            <param name="gesture">The gesture to test the current with.</param>
            <returns>The matching value of two gestures.</returns>
        </member>
        <member name="M:Purple.AI.Gesture.Clone">
            <summary>
            Creates a clone of the gesture.
            </summary>
            <returns>The cloned gesture.</returns>
        </member>
        <member name="P:Purple.AI.Gesture.Name">
            <summary>
            Name of the gesture.
            </summary>
        </member>
        <member name="P:Purple.AI.Gesture.Segments">
            <summary>
            The segments of the gesture.
            </summary>
        </member>
        <member name="P:Purple.AI.Gesture.BoundingBox">
            <summary>
            The bounding box of the gesture.
            </summary>
        </member>
        <member name="P:Purple.AI.Gesture.Enabled">
            <summary>
            Flag that indicates if the gesture is enabled and should be used for matching.
            </summary>
        </member>
        <member name="T:Purple.AI.GestureBuilder">
            <summary>
            This class may be used for creating a new gesture easily.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.AI.GestureBuilder.#ctor(System.Int32)">
            <summary>
            Class that hels with building gestures.
            </summary>
            <param name="maxPoints">The maximum number of inserted points.</param>
        </member>
        <member name="M:Purple.AI.GestureBuilder.AddPoint(Purple.Math.Vector2)">
            <summary>
            Adds a new point to the gesture path.
            </summary>
            <param name="point">Adds a point to the gesture path.</param>
        </member>
        <member name="M:Purple.AI.GestureBuilder.AddPoint(Purple.Math.Vector2,System.Single)">
            <summary>
            Adds a new point if a certain time since the last point elapsed.
            </summary>
            <param name="point"></param>
            <param name="deltaTime"></param>
            <returns>True if the point was inserted - false if it was too soon to accept a new point.</returns>
        </member>
        <member name="M:Purple.AI.GestureBuilder.Reset">
            <summary>
            Resets the current gesture.
            </summary>
        </member>
        <member name="M:Purple.AI.GestureBuilder.Fill(Purple.AI.Gesture)">
            <summary>
            Fills a gesture with the data of the GestureBuilder.
            </summary>
            <param name="gesture">The gesture to fill.</param>
        </member>
        <member name="M:Purple.AI.GestureBuilder.Create(System.Int32)">
            <summary>
            Creates a gesture from the gathered points.
            </summary>
            <param name="size">Number of key points to use for the gesture.</param>
            <returns>The created gesture.</returns>
        </member>
        <member name="P:Purple.AI.GestureBuilder.PointsPerSecond">
            <summary>
            The maximum number of points that can be added to the gesture per second.
            </summary>
        </member>
        <member name="P:Purple.AI.GestureBuilder.PathLength">
            <summary>
            Length of the path of the current gesture.
            </summary>
        </member>
        <member name="P:Purple.AI.GestureBuilder.Count">
            <summary>
            Returns the number of inserted points.
            </summary>
        </member>
        <member name="T:Purple.AI.Gestures">
            <summary>
            A class for handling (mouse) gestures a la Opera ;-)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.AI.Gestures.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.AI.Gestures"/> object.
            </summary>
        </member>
        <member name="M:Purple.AI.Gestures.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new <see cref="T:Purple.AI.Gestures"/> object.
            </summary>
            <param name="gestures">Gestures to use.</param>
        </member>
        <member name="M:Purple.AI.Gestures.Add(Purple.AI.Gesture)">
            <summary>
            Adds a <see cref="T:Purple.AI.Gesture"/> to the list.
            </summary>
            <param name="gesture"></param>
        </member>
        <member name="M:Purple.AI.Gestures.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a certain number of <see cref="T:Purple.AI.Gesture"/> objects.
            </summary>
            <param name="gestures">The collection containing the <see cref="T:Purple.AI.Gesture"/> objects.</param>
        </member>
        <member name="M:Purple.AI.Gestures.RemoveAt(System.Int32)">
            <summary>
            Removes a gesture at a certain index.
            </summary>
            <param name="index">The index to remove gesture at.</param>
        </member>
        <member name="M:Purple.AI.Gestures.Match(Purple.AI.Gesture)">
            <summary>
            Tries to find the gesture in the list, that matches the passed gesture.
            </summary>
            <param name="gesture">The gesture to find in the list.</param>
            <returns>The gesture object in the list that matched the passed gesture.</returns>
        </member>
        <member name="M:Purple.AI.Gestures.Match(Purple.AI.Gesture,System.Single@)">
            <summary>
            Tries to find the gesture in the list, that matches the passed gesture.
            </summary>
            <param name="gesture">The gesture to find in the list.</param>
            <param name="matchFactor">The factor the returned gestures matches the passed gesture.</param>
            <returns>The gesture object in the list that matched the passed gesture.</returns>
        </member>
        <member name="M:Purple.AI.Gestures.ToArray">
            <summary>
            Converts the gestures object to an array.
            </summary>
            <returns>Returns the array.</returns>
        </member>
        <member name="M:Purple.AI.Gestures.Find(System.String)">
            <summary>
            Returns a gesture with a certain name.
            </summary>
            <param name="name">Name of the gesture.</param>
            <returns>Returns a gesture with a certain name.</returns>
        </member>
        <member name="T:Purple.AI.Pathfinding.AStar">
            <summary>
            Implementation of the famous A* algorithm used for searching
            the shortes path between two nodes, locations, ...
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.#ctor">
            <summary>
            creates an instance of the A* pathfinding class
            </summary>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.FindPath(Purple.AI.Pathfinding.AStar.IWaypoint,Purple.AI.Pathfinding.AStar.IWaypoint,Purple.AI.Pathfinding.AStar.IAgent)">
            <summary>
            finds a path between two waypoints
            </summary>
            <param name="start">the start waypoint</param>
            <param name="goal">the destination waypoint</param>
            <param name="agent">the agent to find path for</param>
            <returns>the path in form of an array of moves
            or null if there is no connection between from and to</returns>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.CreatePath(Purple.AI.Pathfinding.AStar.Node)">
            <summary>
            create the whole path
            </summary>
            <param name="goal">the goal node</param>
            <returns>returns the shortest path</returns>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.Init(Purple.AI.Pathfinding.AStar.IWaypoint,Purple.AI.Pathfinding.AStar.IWaypoint,Purple.AI.Pathfinding.AStar.IAgent)">
            <summary>
            initialised the variables for a new search
            </summary>
            <param name="start">the waypoint to start from</param>
            <param name="goal">the destination waypoint</param>
            <param name="agent">the agent to use for path</param>
        </member>
        <member name="P:Purple.AI.Pathfinding.AStar.ClosedNodes">
            <summary>
            returns the number of closed nodes
            </summary>
        </member>
        <member name="P:Purple.AI.Pathfinding.AStar.OpenNodes">
            <summary>
            number of open nodes
            </summary>
        </member>
        <member name="P:Purple.AI.Pathfinding.AStar.TotalNodes">
            <summary>
            number of created nodes
            </summary>
        </member>
        <member name="T:Purple.AI.Pathfinding.AStar.Move">
            <summary>
            represents one possible move/state change
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="F:Purple.AI.Pathfinding.AStar.Move.Waypoint">
            <summary>
            the waypoint to move to
            </summary>
        </member>
        <member name="F:Purple.AI.Pathfinding.AStar.Move.Cost">
            <summary>
            the cost to move to the waypoint
            </summary>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.Move.#ctor(Purple.AI.Pathfinding.AStar.IWaypoint,System.Single)">
            <summary>
            create one instance of move
            </summary>
            <param name="wp">to move to</param>
            <param name="cost">to move to waypoint</param>
        </member>
        <member name="T:Purple.AI.Pathfinding.AStar.IWaypoint">
            <summary>
            represents one location/state of the environment, the AStar algorithm is operating on
            GetHashCode() and Equals() must be overriden => dependent on location/state of IWaypoint
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.IWaypoint.EstimateCost(Purple.AI.Pathfinding.AStar.IWaypoint,Purple.AI.Pathfinding.AStar.IAgent)">
            <summary>
            returns the estimated cost/distance between the current and the destination waypoint
            </summary>
            <param name="to">the destination waypoint</param>
            <param name="agent">to calculate cost for</param>
            <returns>the estimated cost to the destination</returns>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.IWaypoint.GetMoves(Purple.AI.Pathfinding.AStar.IAgent)">
            <summary>
            get possible moves
            </summary>
            <param name="agent">agent to get moves for</param>
            <returns>array of moves</returns>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.IWaypoint.IsValid">
            <summary>
            returns true if waypoint is valid
            </summary>
            <returns>true if waypoint is valid</returns>
        </member>
        <member name="T:Purple.AI.Pathfinding.AStar.IAgent">
            <summary>
            an agent may be a car, boat, soldier, ...
            the costs for a passing a certain path may be dependent on the agent
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="T:Purple.AI.Pathfinding.AStar.Node">
            <summary>
            Node is an internal structure used by the AStar class to calculate the shortest path
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="F:Purple.AI.Pathfinding.AStar.Node.G">
            <summary>
            represents how far we have already gone
            </summary>
        </member>
        <member name="F:Purple.AI.Pathfinding.AStar.Node.H">
            <summary>
            estimate of how far is left
            </summary>
        </member>
        <member name="F:Purple.AI.Pathfinding.AStar.Node.Parent">
            <summary>
            parent node
            </summary>
        </member>
        <member name="F:Purple.AI.Pathfinding.AStar.Node.Waypoint">
            <summary>
            the current waypoint
            </summary>
        </member>
        <member name="M:Purple.AI.Pathfinding.AStar.Node.#ctor(Purple.AI.Pathfinding.AStar.IWaypoint)">
            <summary>
            creates an instance of node with a certain waypoint
            </summary>
            <param name="waypoint">to create node for</param>
        </member>
        <member name="P:Purple.AI.Pathfinding.AStar.Node.F">
            <summary>
            the total distance (G+H)
            </summary>
        </member>
        <member name="T:Purple.Aspect.Aspect">
            <summary>
            An aspect in the sense of "Aspect Oriented Programming"  
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            Usually AOP is realized by using special (cross)Compiler. 
            The Purple Way of AOP makes a different approach and integrates
            parts of the philosophy combined with my own ideas in the engine.
            
            An aspect implements several features which can then be added to components
            accessed over interfaces
            
            A more detailed documentation should soon be available at www.bunnz.com
            </remarks>
        </member>
        <member name="T:Purple.Aspect.IAspect">
            <summary>
            An aspect in the sense of "Aspect Oriented Programming"  
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            Usually AOP is realized by using special (cross)Compiler. 
            The Purple Way of AOP makes a different approach and integrates
            parts of the philosophy combined with my own ideas in the engine.
            
            An aspect implements several features which can then be added to components
            accessed over interfaces
            
            A more detailed documentation should soon be available at www.bunnz.com
            </remarks>
        </member>
        <member name="M:Purple.Aspect.IAspect.Before">
            <summary>
            called before original method is called
            </summary>        
        </member>
        <member name="M:Purple.Aspect.IAspect.Instead">
            <summary>
            called instead of original method
            </summary>        
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.IAspect.After">
            <summary>
            called after original method is called
            </summary>        
        </member>
        <member name="P:Purple.Aspect.IAspect.Object">
            <summary>
            object for which current method was called
            </summary>
        </member>
        <member name="P:Purple.Aspect.IAspect.Method">
            <summary>
            method which was called
            </summary>
        </member>
        <member name="P:Purple.Aspect.IAspect.Parameters">
            <summary>
            parameters passed to the method
            </summary>
        </member>
        <member name="M:Purple.Aspect.Aspect.Before">
            <summary>
            called before original method is called
            </summary>        
        </member>
        <member name="M:Purple.Aspect.Aspect.Instead">
            <summary>
            called instead of original method
            </summary>        
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.Aspect.After">
            <summary>
            called after original method is called
            </summary>        
        </member>
        <member name="P:Purple.Aspect.Aspect.Object">
            <summary>
            object for which current method was called
            </summary>
        </member>
        <member name="P:Purple.Aspect.Aspect.Method">
            <summary>
            method which was called
            </summary>
        </member>
        <member name="P:Purple.Aspect.Aspect.Parameters">
            <summary>
            parameters passed to the method
            </summary>
        </member>
        <member name="T:Purple.Aspect.AspectDispatcher">
            <summary>
            concrete implementation of IAspectDispatcher
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            A more detailed documentation should soon be available at www.bunnz.com
            </remarks>
        </member>
        <member name="T:Purple.Aspect.IAspectDispatcher">
            <summary>
            IAspectDispatcher gets informed by IAspectComponent when a method is called
            IAspectDispatcher has to send this information to all registered IAspects
            and/or has the task to call the base method
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            A more detailed documentation should soon be available at www.bunnz.com
            </remarks>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.OnMethodCall(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            called instead of original method
            </summary>
            <param name="obj">object for which method is called</param>
            <param name="method">method which is called</param>
            <param name="parameters">parameters passed to the method</param>
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.OnAdditionalMethodCall(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            called instead of additional methods
            </summary>
            <param name="obj">object for which method is called</param>
            <param name="method">method which is called</param>
            <param name="parameters">parameters passed to the method</param>
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.BaseMethod(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            calls original method
            </summary>
            <param name="obj">object for which method is called</param>
            <param name="method">method which is called</param>
            <param name="parameters">parameters passed to the method</param>
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.Add(Purple.Aspect.IAspect,System.Reflection.MethodBase)">
            <summary>
            links an aspect to a certain method
            </summary>
            <param name="aspect">aspect to link</param>
            <param name="method">method to inform aspect about</param>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.Add(Purple.Aspect.IAspect,System.Type)">
            <summary>
            links an aspect to all methods of a certain type
            </summary>
            <param name="aspect">aspect to link</param>
            <param name="iface">iface defining methods to link aspect to</param>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.SetInstead(Purple.Aspect.IAspect,System.Reflection.MethodBase)">
            <summary>
            sets an aspect to be called instead of a certain method
            </summary>
            <param name="aspect">aspect with implementation</param>
            <param name="method">method to replace</param>
            <returns>true if aspect was set; false if there was already another one set</returns>
        </member>
        <member name="M:Purple.Aspect.IAspectDispatcher.SetInstead(Purple.Aspect.IAspect,System.Type)">
            <summary>
            sets an aspect to be called instead of a certain method
            </summary>
            <param name="aspect">aspect with implementation</param>
            <param name="iface">interface defining methods to be replaced</param>
            <returns>true if aspect was set for all methods; false if for at least one method another aspect was already set</returns>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.Add(Purple.Aspect.IAspect,System.Reflection.MethodBase)">
            <summary>
            links an aspect to a certain method
            </summary>
            <param name="aspect">aspect to link</param>
            <param name="method">method to inform aspect about</param>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.Add(Purple.Aspect.IAspect,System.Type)">
            <summary>
            links an aspect to all methods of a certain type
            </summary>
            <param name="aspect">aspect to link</param>
            <param name="iface">iface defining methods to link aspect to</param>    
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.SetInstead(Purple.Aspect.IAspect,System.Reflection.MethodBase)">
            <summary>
            sets an aspect to be called instead of a certain method
            </summary>
            <param name="aspect">aspect with implementation</param>
            <param name="method">method to replace</param>
            <returns>true if aspect was set; false if there was already another one set</returns>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.SetInstead(Purple.Aspect.IAspect,System.Type)">
            <summary>
            sets an aspect to be called instead of a certain method
            </summary>
            <param name="aspect">aspect with implementation</param>
            <param name="iface">interface defining methods to be replaced</param>
            <returns>true if aspect was set for all methods; false if for at least one method another aspect was already set</returns>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.OnMethodCall(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            called instead of original method
            </summary>
            <param name="obj">object for which method is called</param>
            <param name="method">method which was called</param>
            <param name="parameters">parameters passed to the method</param>
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.OnAdditionalMethodCall(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            called instead of additional methods
            </summary>
            <param name="obj">object for which method is called</param>
            <param name="method">method which is called</param>
            <param name="parameters">parameters passed to the method</param>
            <returns>return value of method</returns>
        </member>
        <member name="M:Purple.Aspect.AspectDispatcher.BaseMethod(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            calls original method
            </summary>
            <param name="obj">object for which method is called</param>
            <param name="method">method which is called</param>
            <param name="parameters">parameters passed to the method</param>
            <returns>return value of method</returns>
        </member>
        <member name="T:Purple.Aspect.AspectException">
            <summary>
            exception which is thrown in case of Aspect errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="T:Purple.Exceptions.PurpleException">
            <summary>
            base class for exceptions thrown by PurpleLib 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Exceptions.PurpleException.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Exceptions.PurpleException.#ctor(System.String)">
            <summary>
            constructor taking string describing reasons for exception
            </summary>
            <param name="description">Description why exception is thrown</param>
        </member>
        <member name="M:Purple.Aspect.AspectException.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Aspect.AspectException.#ctor(System.String)">
            <summary>
            constructor taking string describing reasons for exception
            </summary>
            <param name="description">Description why exception is thrown</param>
        </member>
        <member name="T:Purple.Aspect.IAspectComponent">
            <summary>
            interface declaring abstract dependant functionality
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            A more detailed documentation should soon be available at www.bunnz.com
            </remarks>
        </member>
        <member name="P:Purple.Aspect.IAspectComponent.BaseInstance">
            <summary>
            property covering the base instance of the aspect component
            "original instance"
            </summary>
        </member>
        <member name="P:Purple.Aspect.IAspectComponent.AspectDispatcher">
            <summary>
            AspectDispatcher which is informed about OnMethodCall event
            </summary>
        </member>
        <member name="T:Purple.Aspect.Weaver">
            <summary>
            A weaver creates an aspect template from the interface of the 
            non-aspect component which can then be connected to an aspect configuration 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            A more detailed documentation should soon be available at www.bunnz.com
            </remarks>
        </member>
        <member name="M:Purple.Aspect.Weaver.#ctor(System.String)">
            <summary>
            Weaver for an aspect template
            </summary>
        </member>
        <member name="M:Purple.Aspect.Weaver.Init(System.String)">
            <summary>
            initializes the weaver
            </summary>
            <param name="assemblyName">name of assembly to create</param>
        </member>
        <member name="M:Purple.Aspect.Weaver.Save">
            <summary>
            saves assembly to disc
            </summary>
        </member>
        <member name="M:Purple.Aspect.Weaver.WeaveType(System.Type,System.Type[])">
            <summary>
            takes a certain baseInterface and weaves an IAspectComponent Type
            the objects of this type are wrappers which add a certain functionality defined
            by the connected aspect(s)
            </summary>
            <param name="iface">interface to create wrapper for</param>
            <param name="additional">additional interfaces the aspect/object component should support</param>
            <returns>created Type</returns>
        </member>
        <member name="M:Purple.Aspect.Weaver.WeaveType(System.Type)">
            <summary>
            takes a certain baseInterface and weaves an IAspectComponent Type
            the objects of this type are wrappers which add a certain functionality defined
            by the connected aspect(s)
            </summary>
            <param name="iface">interface to create wrapper for</param>
            <returns>created Type</returns>
        </member>
        <member name="P:Purple.Aspect.Weaver.AssemblyName">
            <summary>
            name of assembly to generate (without extension)
            </summary>
        </member>
        <member name="T:Purple.Aspect.IVec">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.IVec.SetX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Purple.Aspect.IVec.SetY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Aspect.Vec">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.Vec.SetX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Purple.Aspect.Vec.SetY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Aspect.IAdditional">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.IAdditional.method(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Aspect.ExampleAspect">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.ExampleAspect.Before">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.ExampleAspect.Instead">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Aspect.ExampleAspect.After">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.ExampleAspect.method(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Aspect.Test">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Aspect.Test.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Purple.Code.CodeBuilder">
            <summary>
            class to speed up dynamic code creation via System.Reflection.Emit
            especially responsible for creating Assemblies
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Code.CodeBuilder.#ctor(System.String)">
            <summary>
            for fast creation of assemblies
            </summary>
            <param name="assemblyName">name of assembly</param>
        </member>
        <member name="M:Purple.Code.CodeBuilder.Create(System.String)">
            <summary>
            creates an assembly/module for the current application domain and the given name
            </summary>
            <param name="assemblyName">name of assembly</param>
        </member>
        <member name="M:Purple.Code.CodeBuilder.DefineType(System.String)">
            <summary>
            define a new type for the created assembly
            </summary>
            <param name="name">name of type</param>
            <returns>TypeBuilder object to specify Type</returns>
        </member>
        <member name="M:Purple.Code.CodeBuilder.Save">
            <summary>
            save the assembly
            </summary>
        </member>
        <member name="P:Purple.Code.CodeBuilder.AssemblyName">
            <summary>
            returns the name of the assembly in form of a string object
            </summary>
        </member>
        <member name="P:Purple.Code.CodeBuilder.AssemblyBuilder">
            <summary>
            returns the assemblyBuilder object
            </summary>
        </member>
        <member name="P:Purple.Code.CodeBuilder.ModuleBuilder">
            <summary>
            returns the moduleBuilder object
            </summary>
        </member>
        <member name="T:Purple.Code.MethodHelper">
            <summary>
            provides some helper function for handling meta methods  
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Code.MethodHelper.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            returns array containing the types of the parameters of a certain method
            </summary>
            <param name="m">method</param>
            <returns>array of parameter types</returns>
        </member>
        <member name="M:Purple.Code.MethodHelper.GetMethod(System.Object,System.Reflection.MethodBase)">
            <summary>
            returns the exact method object for a certain object instance    
            </summary>
            <param name="obj">object instance</param>
            <param name="method">method to take name and parameters from</param>
            <returns>methodBase or null</returns>
        </member>
        <member name="T:Purple.Code.TypeCodeBuilder">
            <summary>
            class to speed up dynamic code creation via System.Reflection.Emit
            especially responsible for creating Types
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Code.TypeCodeBuilder.#ctor(Purple.Code.CodeBuilder,System.Reflection.Emit.TypeBuilder)">
            <summary>
            for fast creation of types
            </summary>
            <param name="codeBuilder"></param>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:Purple.Code.TypeCodeBuilder.DefineStandardProperty(System.String,System.Reflection.FieldInfo,System.Type,System.Boolean,System.Boolean,System.Reflection.MethodAttributes)">
            <summary>
            create an standard implementation of a property
            </summary>
            <param name="name">name of property</param>
            <param name="field">field to return or set</param>
            <param name="propertyType">type of property</param>
            <param name="hasSetter">property has a setter method?</param>
            <param name="hasGetter">property has a getter method?</param>
            <param name="visibility">can be public, protected, ...</param>
            <returns>of created property</returns>
        </member>
        <member name="P:Purple.Code.TypeCodeBuilder.CodeBuilder">
            <summary>
            codeBuilder object
            </summary>
        </member>
        <member name="P:Purple.Code.TypeCodeBuilder.TypeBuilder">
            <summary>
            current type builder object
            </summary>
        </member>
        <member name="T:Purple.Collections.Collection">
            <summary>
            Collection helper functions
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Collections.Collection.Copy(System.Collections.IList,System.Collections.IList)">
            <summary>
            copies data from a source to a destination list
            </summary>
            <param name="source">list to take data from</param>
            <param name="destination">list to copy data to</param>
        </member>
        <member name="M:Purple.Collections.Collection.Copy(System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            copies data from a source to a destination list
            </summary>
            <param name="source">list to take data from</param>
            <param name="destination">list to copy data to</param>
            <param name="length">number of items to copy</param>
        </member>
        <member name="M:Purple.Collections.Collection.Copy(System.Collections.IList,System.Int32,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            copies data from a source to a destination list
            </summary>
            <param name="source">list to take data from</param>
            <param name="sourceIndex">start index of source list</param>
            <param name="destination">list to copy data to</param>
            <param name="destinationIndex">start index of destination list</param>
            <param name="length">number of items to copy</param>
        </member>
        <member name="T:Purple.Collections.CollectionConverter">
            <summary>
            A specialied collection converter that is used by the 
            <see cref="T:System.Windows.Forms.PropertyGrid"/> class.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Collections.CollectionConverter.#ctor">
            <summary>
            Creates a new instance of a collection converter.
            </summary>
        </member>
        <member name="M:Purple.Collections.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, 
            using the specified context and attributes.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="value">An Object that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type Attribute that is used as a filter.</param>
            <returns>A PropertyDescriptorCollection with the properties that are exposed for this data type, 
            or a null reference (Nothing in Visual Basic) if there are no properties.</returns>
        </member>
        <member name="M:Purple.Collections.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <returns>True if GetProperties should be called to find the properties of this object; otherwise, false.</returns>
        </member>
        <member name="M:Purple.Collections.CollectionConverter.MyPropertyDescriptor.#ctor(System.Collections.ICollection,System.Int32,System.Attribute[])">
            <summary>
            Creates a new instance of <see cref="T:Purple.Collections.CollectionConverter.MyPropertyDescriptor"/> which takes a
            collection and the index of the element in the collection.
            </summary>
            <remarks>
            <note type="note">The collection must implement an indexer, otherwise the 
            <see cref="T:System.ArgumentException"/> is thrown.</note>
            </remarks>
            <param name="collection">The collection to use.</param>
            <param name="index">The index of the property.</param>
            <param name="attributes">Gets the collection of attributes for this member.</param>
            <exception cref="T:System.ArgumentException">If the collection doesn't implement an indexer that supports a 
            getter method.</exception>
        </member>
        <member name="M:Purple.Collections.CollectionConverter.MyPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value. </param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:Purple.Collections.CollectionConverter.MyPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. </param>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Purple.Collections.CollectionConverter.MyPropertyDescriptor.DisplayName">
            <summary>
            Returns the string which should be displayed in the <see cref="T:System.Windows.Forms.PropertyGrid"/>.
            </summary>
        </member>
        <member name="P:Purple.Collections.CollectionConverter.MyPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            </summary>
        </member>
        <member name="P:Purple.Collections.CollectionConverter.MyPropertyDescriptor.PropertyType">
            <summary>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </summary>
        </member>
        <member name="T:Purple.Collections.FixedBag">
            <summary>
            A bag with a fixed size where you can add items which are not order dependant.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Collections.FixedBag.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a fixed-size bag.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedBag.Add(System.Object)">
            <summary>
            Adds an object to the list.
            </summary>
            <param name="obj">Object to add.</param>
            <returns>Returns the position into which the object was inserted.</returns>
        </member>
        <member name="M:Purple.Collections.FixedBag.RemoveAt(System.Int32)">
            <summary>
            Removes the element at a certain index.
            </summary>
            <param name="index">The index to remove element at.</param>
        </member>
        <member name="M:Purple.Collections.FixedBag.Clear">
            <summary>
            Removes all elements of the bag.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedBag.ToArray(System.Type)">
            <summary>
            Converts the array to an array of a certain type.
            </summary>
            <param name="type">The type of the array.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Purple.Collections.FixedBag.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element at a certain position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Purple.Collections.FixedBag.Remove(System.Object)">
            <summary>
            Removes a certain element from the list.
            </summary>
            <param name="value">The object to test for.</param>
        </member>
        <member name="M:Purple.Collections.FixedBag.Contains(System.Object)">
            <summary>
            Method to test if a certain object is contained in the list.
            </summary>
            <param name="value">The object to test for.</param>
            <returns>True if the object is contained by the list.</returns>
        </member>
        <member name="M:Purple.Collections.FixedBag.IndexOf(System.Object)">
            <summary>
            Returns the index of a certain element.
            </summary>
            <param name="value">The object to return the index for.</param>
            <returns>Returns the index of the object or -1 if not found.</returns>
        </member>
        <member name="M:Purple.Collections.FixedBag.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the list to an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Purple.Collections.FixedBag.GetEnumerator">
            <summary>
            Returns the enumerator for the current collection.
            </summary>
            <returns>The enumerator for the current collection.</returns>
        </member>
        <member name="P:Purple.Collections.FixedBag.Count">
            <summary>
            Returns the number of items contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Collections.FixedBag.Capacity">
            <summary>
            The maximum capacity of the bag.
            </summary>
        </member>
        <member name="P:Purple.Collections.FixedBag.Item(System.Int32)">
            <summary>
            Returns the element at a certain position;
            </summary>
        </member>
        <member name="T:Purple.Collections.FixedBag.Enumerator">
            <summary>
            The enumerator class for the fixed bag.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedBag.Enumerator.#ctor(Purple.Collections.FixedBag)">
            <summary>
            Constructor.
            </summary>
            <param name="bag">The collection to enumerate.</param>
        </member>
        <member name="M:Purple.Collections.FixedBag.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedBag.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced.</returns>
        </member>
        <member name="P:Purple.Collections.FixedBag.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Purple.Collections.FixedRoundBuffer">
            <summary>
            A round buffer with a fixed size where you can add and remove 
            items at the start or end of the buffer very efficiently.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a fixed-size bag.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Add(System.Object)">
            <summary>
            Adds an object to the list.
            </summary>
            <param name="obj">Object to add.</param>
            <returns>The index where the element was inserted.</returns>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Append(System.Object)">
            <summary>
            Appends the object at the end of the list.
            </summary>
            <param name="obj">The object to append.</param>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Prepend(System.Object)">
            <summary>
            Inserts the object at the front of the list.
            </summary>
            <param name="obj">Object to prepend.</param>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.RemoveFirst">
            <summary>
            Removes the first element in the buffer.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.RemoveLast">
            <summary>
            Removes the last element in the buffer.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.RemoveAt(System.Int32)">
            <summary>
            Removes the element at a certain index.
            </summary>
            <param name="index">The index to remove element at.</param>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element at a certain position.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Remove(System.Object)">
            <summary>
            Removes a certain element from the list.
            </summary>
            <param name="value">The object to test for.</param>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Contains(System.Object)">
            <summary>
            Method to test if a certain object is contained in the list.
            </summary>
            <param name="value">The object to test for.</param>
            <returns>True if the object is contained by the list.</returns>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.IndexOf(System.Object)">
            <summary>
            Returns the index of a certain element.
            </summary>
            <param name="value">The object to return the index for.</param>
            <returns>Returns the index of the object or -1 if not found.</returns>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Clear">
            <summary>
            Removes all elements of the bag.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.ToArray(System.Type)">
            <summary>
            Converts the array to an array of a certain type.
            </summary>
            <param name="type">The type of the array.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.GetEnumerator">
            <summary>
            Returns the enumerator for the current collection.
            </summary>
            <returns>The enumerator for the current collection.</returns>
        </member>
        <member name="P:Purple.Collections.FixedRoundBuffer.Count">
            <summary>
            Returns the number of items contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Collections.FixedRoundBuffer.Capacity">
            <summary>
            The maximum capacity of the bag.
            </summary>
        </member>
        <member name="P:Purple.Collections.FixedRoundBuffer.Item(System.Int32)">
            <summary>
            Returns the element at a certain position;
            </summary>
        </member>
        <member name="T:Purple.Collections.FixedRoundBuffer.Enumerator">
            <summary>
            The enumerator class for the fixed bag.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Enumerator.#ctor(Purple.Collections.FixedRoundBuffer)">
            <summary>
            Constructor.
            </summary>
            <param name="bag">The collection to enumerate.</param>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Purple.Collections.FixedRoundBuffer.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>True if the enumerator was successfully advanced.</returns>
        </member>
        <member name="P:Purple.Collections.FixedRoundBuffer.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Purple.Collections.Heap">
            <summary>
            concreate implementation of a priority queue in form of a heap
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="T:Purple.Collections.IPriorityQueue">
            <summary>
            abstract interface for a priority queue
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="M:Purple.Collections.IPriorityQueue.Add(System.Object,System.Object)">
            <summary>
            add an object to the priority queue
            </summary>
            <param name="key">the key/priority for the object to insert</param>
            <param name="val">the value of the object to insert</param>
        </member>
        <member name="M:Purple.Collections.IPriorityQueue.Remove">
            <summary>
            removes the head of the priority queue
            </summary>
            <returns>the head of the priority queue</returns>
        </member>
        <member name="P:Purple.Collections.IPriorityQueue.Head">
            <summary>
            returns the head of the priority queue
            </summary>
        </member>
        <member name="M:Purple.Collections.Heap.#ctor">
            <summary>
            creates an instance of a heap
            intial capacity is 16
            </summary>
        </member>
        <member name="M:Purple.Collections.Heap.#ctor(System.Int32)">
            <summary>
            creates an instance of a heap
            </summary>
            <param name="capacity">the number of elements that the heap is initially capable of storing</param>
        </member>
        <member name="M:Purple.Collections.Heap.CopyTo(System.Array,System.Int32)">
            <summary>
            copies the elements of the heap to an array
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Collections.Heap.GetEnumerator">
            <summary>
            get the enumerator for the Heap
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Collections.Heap.Add(System.Object,System.Object)">
            <summary>
            add an object to the priority queue
            </summary>
            <param name="key">the key/priority for the object to insert</param>
            <param name="val">the value of the object to insert</param>
        </member>
        <member name="M:Purple.Collections.Heap.Remove">
            <summary>
            removes the head of the priority queue
            </summary>
            <returns>the head of the priority queue</returns>
        </member>
        <member name="M:Purple.Collections.Heap.Resize(System.Int32)">
            <summary>
            resize the array to the new size
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Purple.Collections.Heap.Parent(System.Int32)">
            <summary>
            calculates the parent index for the current index
            </summary>
            <param name="index">index of the current node</param>
            <returns>index of the parent</returns>
        </member>
        <member name="M:Purple.Collections.Heap.LeftChild(System.Int32)">
            <summary>
            calculates the index of the left child for the given node
            </summary>
            <param name="index">of the current node</param>
            <returns>index of left child</returns>
        </member>
        <member name="M:Purple.Collections.Heap.RightChild(System.Int32)">
            <summary>
            calculates the index of the right child for the given node
            </summary>
            <param name="index">of the current node</param>
            <returns>index of right child</returns>
        </member>
        <member name="M:Purple.Collections.Heap.getKey(System.Int32)">
            <summary>
            returns the key for a given index
            </summary>
            <param name="index">index to get key for</param>
            <returns>key object</returns>
        </member>
        <member name="M:Purple.Collections.Heap.BubbleUp">
            <summary>
            take the last inserted element and move it up in the tree to make it a heap again
            </summary>
        </member>
        <member name="M:Purple.Collections.Heap.HasHigherPriority(System.Int32,System.Int32)">
            <summary>
            tests if currentIndex has a higher priority and should therfore be moved up
            </summary>
            <param name="index1"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Collections.Heap.HasHigherPriority(System.Object,System.Int32)">
            <summary>
            tests if currentIndex has a higher priority and should therfore be moved up
            </summary>
            <param name="key"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Collections.Heap.HasLowerPriority(System.Object,System.Int32)">
            <summary>
            tests if currentIndex has a lower priority and should therfore be moved down
            </summary>
            <param name="key"></param>
            <param name="index2"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Collections.Heap.BubbleDown">
            <summary>
            removes the head, and bubbles children up to make it a heap again
            </summary>
        </member>
        <member name="M:Purple.Collections.Heap.Print">
            <summary>
            print the content of the heap
            (just for debugging)
            </summary>
        </member>
        <member name="M:Purple.Collections.Heap.IsHeap">
            <summary>
            tests if array is a valid heap
            </summary>
            <returns>true if array is a valid heap</returns>
        </member>
        <member name="P:Purple.Collections.Heap.Count">
            <summary>
            The number of elements contained in the Heap
            </summary>
        </member>
        <member name="P:Purple.Collections.Heap.IsSynchronized">
            <summary>
            returns true if heap is synchronized
            </summary>
        </member>
        <member name="P:Purple.Collections.Heap.SyncRoot">
            <summary>
            the object to use for synchronization
            </summary>
        </member>
        <member name="P:Purple.Collections.Heap.Head">
            <summary>
            returns the head of the priority queue
            </summary>
        </member>
        <member name="T:Purple.Collections.SortedMultiList">
            <summary>
            The SortedMultiList is similar to the SortedList but supports multiple elements with the same key.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.#ctor">
            <summary>
            Creates new instance of a <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.#ctor(System.Collections.IComparer)">
            <summary>
            Creates new instance of a <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.IComparer"/> implementation to use when comparing keys. -or- A null reference to use the IComparable implementation of each key.</param>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.Add(System.Object,System.Object)">
            <summary>
            Adds a new entry to the <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.Clear">
            <summary>
            Removes all elements from the <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.RemoveAll(System.Object)">
            <summary>
            Removes all elements with the specified key from <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
            <param name="key">The key to remove</param>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.GetAll(System.Object)">
            <summary>
            Returns all objects for a certain key.
            </summary>
            <param name="key">The key to return the elements for.</param>
            <returns>All objects for a certain key.</returns>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.CountAll(System.Object)">
            <summary>
            Returns the number of values for a certain key.
            </summary>
            <param name="key">The key to count values for.</param>
            <returns>The number of values for a certain key.</returns>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.Remove(System.Object)">
            <summary>
            Removes the first element with the specified key from <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
            <param name="key">The key to remove</param>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Purple.Collections.SortedMultiList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Collections.SortedMultiList.SortedList">
            <summary>
            The internal collection that is wrapped. It is internal to be accessible by the enumerator.
            </summary>
        </member>
        <member name="P:Purple.Collections.SortedMultiList.Count">
            <summary>
            The total number of elements.
            </summary>
        </member>
        <member name="P:Purple.Collections.SortedMultiList.Item(System.Object)">
            <summary>
            Returns the first object for a certain key.
            </summary>
            <param name="key">The key to return the first element for.</param>
            <returns>The first object for a certain key.</returns>
        </member>
        <member name="P:Purple.Collections.SortedMultiList.Item(System.Object,System.Int32)">
            <summary>
            Returns the a specific object for a certain key.
            </summary>
            <param name="key">The key to return an element for.</param>
            <param name="index">The index of the element to retur.</param>
            <returns>The nth object for a certain key.</returns>
        </member>
        <member name="P:Purple.Collections.SortedMultiList.ChangeCounter">
            <summary>
            The changeCounter stores the number of manipulations. 
            This way the enumerator can check easily if the collection has changed.
            </summary>
        </member>
        <member name="T:Purple.Collections.SortedMultiListEnumerator">
            <summary>
            The enumerator for a <see cref="T:Purple.Collections.SortedMultiList"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Collections.SortedMultiListEnumerator.#ctor(Purple.Collections.SortedMultiList)">
            <summary>
            Creates a new instance of an <see cref="T:System.Collections.IEnumerator"/> for enumerating 
            <see cref="T:Purple.Collections.SortedMultiList"/>s.
            </summary>
            <param name="sortedList">The sortedList to get enumerator for.</param>
        </member>
        <member name="M:Purple.Collections.SortedMultiListEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Purple.Collections.SortedMultiListEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Purple.Collections.SortedMultiListEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:Purple.Collections.SortedMultiListEnumerator.Key">
            <summary>
            Returns the key of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Purple.Collections.SortedMultiListEnumerator.Value">
            <summary>
            Returns the value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Purple.Collections.SortedMultiListEnumerator.Entry">
            <summary>
            Returns the key and the value of the current dictionary entry.
            </summary>
        </member>
        <member name="T:Purple.Data.Database">
            <summary>
            Helper class for accessing physical databases
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Data.Database.#ctor(System.String)">
            <summary>
            initializes Database object
            </summary>
            <param name="connectionString">string with info about location, ...</param>
            <exception cref="T:System.InvalidOperationException">
              Cannot connect without specifying a data source or server!
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">A connection-level error occurred while opening the connection.</exception>
        </member>
        <member name="M:Purple.Data.Database.#ctor">
            <summary>
            initializes Database object
            </summary>
        </member>
        <member name="M:Purple.Data.Database.Connect(System.String)">
            <summary>
            connects to a certain database
            </summary>
            <param name="connectionString">string with info about location, ...</param>
            <exception cref="T:System.InvalidOperationException">
              Cannot connect without specifying a data source or server!
            </exception>
            <exception cref="T:System.Data.SqlClient.SqlException">A connection-level error occurred while opening the connection.</exception>
        </member>
        <member name="M:Purple.Data.Database.Open">
            <summary>
            opens the connection to a certain database
            </summary>
        </member>
        <member name="M:Purple.Data.Database.IsOpen">
            <summary>
            tests if connection is open
            </summary>
            <returns>true if connection is open, false otherwise</returns>
        </member>
        <member name="M:Purple.Data.Database.Close">
            <summary>
            closes the connection to the database
            </summary>
        </member>
        <member name="M:Purple.Data.Database.LoadTable(System.String)">
            <summary>
            loads a whole table into a DataSet
            </summary>
            <param name="tableName">name of table to load</param>
            <returns>filled DataSet</returns>
        </member>
        <member name="M:Purple.Data.Database.Load(System.String,System.String)">
            <summary>
            loads a certain view defined by a SQL statement into the dataset
            </summary>
            <param name="sql">sql statement</param>
            <param name="viewName">name of view</param>
            <returns>filled dataSet</returns>
        </member>
        <member name="M:Purple.Data.Database.Execute(System.String)">
            <summary>
            executes an SQL statement on a certain database
            </summary>
            <param name="sql">SQL statement</param>
            <returns>true if successful otherwise false</returns>
        </member>
        <member name="T:Purple.Debug.ConsoleForm">
            <summary>
            Summary description for Console.
            </summary>
        </member>
        <member name="T:Purple.Debug.IContainsTraceListener">
            <summary>
            interface to mark, that object contains a TraceListener for
            processing debug output
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Debug.IContainsTraceListener.GetTraceListener">
            <summary>
            returns TraceListener to send debug output to
            </summary>
            <returns>TraceListener object</returns>
        </member>
        <member name="F:Purple.Debug.ConsoleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Purple.Debug.ConsoleForm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Purple.Debug.ConsoleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Purple.Debug.ConsoleForm.GetTraceListener">
            <summary>
            returns TraceListener to send debug output to
            </summary>
            <returns>TraceListener object</returns>
        </member>
        <member name="M:Purple.Debug.ConsoleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Purple.Debug.ConsoleForm.DoLoad">
            <summary>
            opens the OpenFileDialog and loads the chosen file
            </summary>
        </member>
        <member name="P:Purple.Debug.ConsoleForm.ScriptingHost">
            <summary>
            property for setting and retrieving the used scripting Host
            </summary>
        </member>
        <member name="T:Purple.Debug.ExceptionForm">
            <summary>
            Summary description for ExceptionForm.
            </summary>
        </member>
        <member name="F:Purple.Debug.ExceptionForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Purple.Debug.ExceptionForm.#ctor">
            <summary>
            Creates a new ExceptionForm.
            </summary>
        </member>
        <member name="M:Purple.Debug.ExceptionForm.#ctor(System.Exception)">
            <summary>
            Creates a new ExceptionForm.
            </summary>
            <param name="ex">The exception to visualize.</param>
        </member>
        <member name="M:Purple.Debug.ExceptionForm.#ctor(System.String)">
            <summary>
            Creates a new ExceptionForm.
            </summary>
            <param name="ex">The string to visualize.</param>
        </member>
        <member name="M:Purple.Debug.ExceptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Purple.Debug.ExceptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Purple.Debug.ExceptionForm.ExceptionHandler(System.Exception)">
            <summary>
            ExceptionHandler that outpus the exception in a form.
            </summary>
            <param name="ex">The exception to output.</param>
        </member>
        <member name="T:Purple.Debug.ScriptingHostTemplateForm">
            <summary>
            Summary description for ScriptingHostTemplateForm.
            </summary>
        </member>
        <member name="F:Purple.Debug.ScriptingHostTemplateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Purple.Debug.ScriptingHostTemplateForm.#ctor(Purple.Scripting.IScriptingHost)">
            <summary>
            constructor filling textboxes with info from ScriptingHost
            </summary>
            <param name="sh">ScriptingHost to take info from</param>
        </member>
        <member name="M:Purple.Debug.ScriptingHostTemplateForm.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Debug.ScriptingHostTemplateForm.SetScriptingHost(Purple.Scripting.IScriptingHost)">
            <summary>
            sets the scriptingHost from which textBoxes should take their content
            </summary>
            <param name="sh">scriptingHost to set</param>
        </member>
        <member name="M:Purple.Debug.ScriptingHostTemplateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Purple.Debug.ScriptingHostTemplateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Purple.Debug.TextBoxListener">
            <summary>
            Listens to debug output and writes it into a text box
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Debug.TextBoxListener.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
            constructor taking a text box as parameter
            </summary>
            <param name="textBox">target of debug information</param>
        </member>
        <member name="M:Purple.Debug.TextBoxListener.Write(System.String)">
            <summary>
            writes a string into the text box
            </summary>
            <param name="text">string to write</param>
        </member>
        <member name="M:Purple.Debug.TextBoxListener.WriteLine(System.String)">
            <summary>
            writes a string into the text box and then starts new line
            </summary>
            <param name="text">string to write</param>
        </member>
        <member name="T:Purple.Debug.WatchList">
            <summary>
            a tool that allows to add and remove objects to the watch list
            these objects can then be queried and their value read out
            this class doesn't influences garbage collection of these objects
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Debug.WatchList.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Debug.WatchList.Add(System.String,System.Object)">
            <summary>
            adds an object to the watch list
            </summary>
            <param name="name">name of variable</param>
            <param name="obj">object instance</param>
        </member>
        <member name="M:Purple.Debug.WatchList.Remove(System.String)">
            <summary>
            removes an object from the watch list
            </summary>
            <param name="name">name of object to remove</param>
        </member>
        <member name="M:Purple.Debug.WatchList.Contains(System.String)">
            <summary>
            determine if a certain variable is contained by the watch list
            </summary>
            <param name="name">name of object</param>
            <returns>true if object is contained</returns>
        </member>
        <member name="M:Purple.Debug.WatchList.IsAlive(System.String)">
            <summary>
            tests if object specified by name is not garbage collected
            </summary>
            <param name="name">name of object</param>
            <returns>true if object is not garbaged collected</returns>
        </member>
        <member name="P:Purple.Debug.WatchList.Instance">
            <summary>
            get default instance of the watch list
            </summary>
        </member>
        <member name="P:Purple.Debug.WatchList.Item(System.String)">
            <summary>
            get object specified by name
            </summary>
        </member>
        <member name="T:Purple.ExceptionEventHandler">
            <summary>
            Handler that handles thrown exceptions.
            </summary>
        </member>
        <member name="T:Purple.RenderEventHandler">
            <summary>
            Handler that handles render events.
            </summary>
        </member>
        <member name="T:Purple.Engine">
            <summary>
            The core engine of Purple# that units the other modules.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Last change: 0.7</para>
            </remarks>
        </member>
        <member name="T:Purple.IO.IFileSystemContainer">
            <summary>
            Marker interface for class holding a <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
            </remarks>
        </member>
        <member name="P:Purple.IO.IFileSystemContainer.FileSystem">
            <summary>
            The contained <see cref="P:Purple.IO.IFileSystemContainer.FileSystem"/>.
            </summary>
        </member>
        <member name="M:Purple.Engine.Init">
            <summary>
            Initializes the game engine.
            </summary>
        </member>
        <member name="M:Purple.Engine.Connect(Purple.Framework.IApplication)">
            <summary>
            Initializes the engine with a given application object.
            </summary>
            <param name="application">game to start</param>
        </member>
        <member name="M:Purple.Engine.Run">
            <summary>
            Starts game and blocks until game is shut down.
            </summary>
        </member>
        <member name="M:Purple.Engine.InternalRun">
            <summary>
            starts game and blocks until game is shut down
            </summary>
        </member>
        <member name="M:Purple.Engine.Update">
            <summary>
            Can be used to manually update the game => without Engine.Run().
            </summary>
        </member>
        <member name="M:Purple.Engine.InternalUpdate">
            <summary>
            called every frame
            can be used to manually update the game => without Engine.Run()
            </summary>
        </member>
        <member name="M:Purple.Engine.Close">
            <summary>
            Shuts down the game.
            </summary>
        </member>
        <member name="P:Purple.Engine.FrameCount">
            <summary>
            number of current frame
            </summary>
        </member>
        <member name="P:Purple.Engine.TimeFactor">
            <summary>
            The factor with which time passes.
            </summary>
        </member>
        <member name="P:Purple.Engine.Paused">
            <summary>
            update isn't called if application is paused
            </summary>
        </member>
        <member name="P:Purple.Engine.ExceptionHandler">
            <summary>
            This may be used to globally handle exceptions.
            </summary>
            <remarks>In debug output no exception handler is assigned for default. In this case we let the 
            debugger handle the exception. In release mode we assign the <c>Purple.Debug.ExceptionForm.ExceptionHandler</c> 
            to handle exceptions, however this default setting can easily be overriden by setting the ExceptionHandler property.</remarks>
        </member>
        <member name="P:Purple.Engine.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:Purple.Engine"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Purple.Engine.FileSystem">
            <summary>
            Returns the base file system.
            </summary>
        </member>
        <member name="P:Purple.Engine.Time">
            <summary>
            The time since the first frame in seconds.
            </summary>
        </member>
        <member name="P:Purple.Engine.FrameRate">
            <summary>
            The number of frames per second.
            </summary>
        </member>
        <member name="P:Purple.Engine.Random">
            <summary>
            The random number generator used for the game.
            </summary>
        </member>
        <member name="P:Purple.Engine.TotalTime">
            <summary>
            get the current time (since start of render loop) in ms
            </summary>
        </member>
        <member name="P:Purple.Engine.PassedTime">
            <summary>
            passed time since the last render event
            </summary>
        </member>
        <member name="P:Purple.Engine.SleepTime">
            <summary>
            The time, the application should sleep after every rendered frame.
            </summary>
            <remarks>The value is passed on to Thread.Sleep(SleepTime). If the property 
            ist set to -1, the Sleep method won't be invoked.</remarks>
        </member>
        <member name="P:Purple.Engine.InActiveSleepTime">
            <summary>
            The time, the application should sleep after every frame if the application is not active.
            </summary>
            <remarks>The value is passed on to Thread.Sleep(SleepTime). If the property 
            ist set to -1, the Sleep method won't be invoked.</remarks>
        </member>
        <member name="E:Purple.Engine.OnInit">
            <summary>
            event is fired on initialisation of application
            </summary>
        </member>
        <member name="E:Purple.Engine.OnRender">
            <summary>
            event is fired every frame
            </summary>
        </member>
        <member name="E:Purple.Engine.OnClose">
            <summary>
            event is fired when application gets closed down
            </summary>
        </member>
        <member name="T:Purple.VoidEventHandler">
            <summary>
            Simple EventHandler without parameters.
            </summary>
        </member>
        <member name="T:Purple.IntEventHandler">
            <summary>
            Simple EventHandler with an int paramter.
            </summary>
        </member>
        <member name="T:Purple.FloatEventHandler">
            <summary>
            Simple EventHandler with a float parameter.
            </summary>
        </member>
        <member name="T:Purple.Exceptions.StreamException">
            <summary>
            exception which is thrown in case of Stream errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Exceptions.StreamException.#ctor(System.String)">
            <summary>
            exception which is thrown in case of Stream errors
            </summary>
            <param name="s">reason for exception</param>
        </member>
        <member name="T:Purple.Framework.IApplication">
            <summary>
            the interface an application has to implement to make it drivable 
            from external objects
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Last change: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.IRender">
            <summary>
            A simple interface for a class that handles the render event.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.IRender.OnRender(System.Single)">
            <summary>
            Renders the object.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Framework.IApplication.OnInit">
            <summary>
            Initializes the application.
            </summary>
        </member>
        <member name="M:Purple.Framework.IApplication.OnClose">
            <summary>
            Closes the application.
            </summary>
        </member>
        <member name="P:Purple.Framework.IApplication.Control">
            <summary>
            The target control for rendering.
            </summary>
            <remarks>The control property has to be set before <c>Init</c>.</remarks>
        </member>
        <member name="T:Purple.Framework.PurpleControl">
            <summary>
            control in which the game will be visualized
            usually this control will fill up the whole window
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Framework.PurpleControl.#ctor">
            <summary>
            control which shows the game screen
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Purple.Framework.PurpleForm">
            <summary>
            Abstract base form for creating a game.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Framework.PurpleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.EnableDebugOverlay(System.Boolean)">
            <summary>
            Enable or disable the debug overlay.
            </summary>
            <param name="flag">Flag to enable the debug overlay.</param>    
        </member>
        <member name="M:Purple.Framework.PurpleForm.Run">
            <summary>
            Starts the game loop.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnFormClose(System.Object,System.EventArgs)">
            <summary>
            gets called if form/application closes
            </summary>
            <param name="sender">sender of event</param>
            <param name="args">arguments</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called when form gets repainted.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.InitInputEngine">
            <summary>
            Initializes the InputEngine.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.SetMouse(Purple.Input.IMouse)">
            <summary>
            Set the mouse as the main mouse.
            </summary>
            <param name="mouse">The new mouse object.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.Purple#Framework#IApplication#OnInit">
            <summary>
            Initializes the application.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.Purple#IRender#OnRender(System.Single)">
            <summary>
            Renders one frame of the game.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.Purple#Framework#IApplication#OnClose">
            <summary>
            Shuts down the game.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.Exit">
            <summary>
            Closes the window.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnInit">
            <summary>
            Method which should initialize the application.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.PreRender(System.Single)">
            <summary>
            Called before the scene is rendered.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnRender(System.Single)">
            <summary>
            Method that is called for every frame.
            </summary>
            <param name="deltaTime">The passed time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.PostRender(System.Single)">
            <summary>
            Called after the scene is rendered.
            </summary>
            <param name="deltaTime"></param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnClose">
            <summary>
            Method that is called when the game shuts down.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that is called when a mouse event occurs.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button the event was fired for.</param>
            <param name="pressed">Flag that indicates if the button was pressed or released.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that is called when a key event occurs.
            </summary>
            <param name="key">The key the event was fired for.</param>
            <param name="pressed">Flag that indicates if the key was ressed or released.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.OnChar(System.Char)">
            <summary>
            Method that is called if a valid character was entered.
            </summary>
            <param name="character">The character ented via the keyboard.</param>
        </member>
        <member name="M:Purple.Framework.PurpleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Purple.Framework.PurpleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Purple.Framework.PurpleForm.MouseCursor">
            <summary>
            The used mouseCurosr;
            </summary>
        </member>
        <member name="P:Purple.Framework.PurpleForm.TopGui">
            <summary>
            The TopGui used for the DebugOverlay the Mouse.
            </summary>
        </member>
        <member name="P:Purple.Framework.PurpleForm.Control">
            <summary>
            The control used for rendering.
            </summary>
            <remarks>Has to be set before Init is called.</remarks>
        </member>
        <member name="T:Purple.Graphics.Alignment">
            <summary>
            All possible alignments of a certain object.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Alignment.Top">
            <summary>
            Top/Left/Near alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Left">
            <summary>
            Top/Left/Near alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Near">
            <summary>
            Top/Left/Near alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Center">
            <summary>
            Centered alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Right">
            <summary>
            Right/Bottom/Far alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Far">
            <summary>
            Right/Bottom/Far alignment.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Alignment.Offset">
            <summary>
            Right/Bottom/Far alignment.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.AnimationPlayer">
            <summary>
            A specialised player for animating models.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="T:Purple.Player.ClipPlayer">
            <summary>
            A simple class implementing the <see cref="T:Purple.Player.IClipPlayer"/> interface.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Last Change: 0.7</para>
            <seealso cref="T:Purple.Player.IPlayer"/>
            </remarks>
        </member>
        <member name="T:Purple.Player.Player">
            <summary>
            A simple class that implements the time related methods 
            of a multimedia player.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Last Update: 0.7</para>
            This class may be used to calculate the current time for a song, 
            animation or whatever.
            </remarks>
        </member>
        <member name="T:Purple.Player.IPlayer">
            <summary>
            An abstract interface that defines the time related methods 
            of a multimedia player.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Last Update: 0.7</para>
            This class may be used to calculate the current time for a song, 
            animation or whatever.
            </remarks>
        </member>
        <member name="M:Purple.Player.IPlayer.Stop">
            <summary>
            Stops playing a certain animation.
            </summary>
        </member>
        <member name="M:Purple.Player.IPlayer.Play">
            <summary>
            Starts playing a certain animation.
            </summary>
        </member>
        <member name="M:Purple.Player.IPlayer.Pause">
            <summary>
            Pauses a certain animation.
            </summary>
        </member>
        <member name="P:Purple.Player.IPlayer.Time">
            <summary>
            Returns the current animation time.
            </summary>
        </member>
        <member name="P:Purple.Player.IPlayer.State">
            <summary>
            Current state of the <see cref="T:Purple.Player.IPlayer"/> object.
            </summary>
        </member>
        <member name="P:Purple.Player.IPlayer.Speed">
            <summary>
            Play speed of the animation.
            </summary>
        </member>
        <member name="F:Purple.Player.Player.dirty">
            <summary>
            Flag that indicates if the position, time, clip, ... of the player has changed.
            </summary>
        </member>
        <member name="F:Purple.Player.Player.state">
            <summary>
            Current state of the <see cref="T:Purple.Player.IPlayer"/> object.
            </summary>
        </member>
        <member name="M:Purple.Player.Player.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Player.Player"/> object.
            </summary>
        </member>
        <member name="M:Purple.Player.Player.Stop">
            <summary>
            Stops playing a certain animation.
            </summary>
        </member>
        <member name="M:Purple.Player.Player.Play">
            <summary>
            Starts playing a certain animation.
            </summary>
        </member>
        <member name="M:Purple.Player.Player.Pause">
            <summary>
            Pauses a certain animation.
            </summary>
        </member>
        <member name="M:Purple.Player.Player.Update(System.Single)">
            <summary>
            Updates the player.
            </summary>
            <param name="deltaTime">The time passed since the last frame.</param>
        </member>
        <member name="P:Purple.Player.Player.Time">
            <summary>
            Returns the current animation time.
            </summary>
        </member>
        <member name="P:Purple.Player.Player.State">
            <summary>
            Current state of the <see cref="T:Purple.Player.IPlayer"/> object.
            </summary>
        </member>
        <member name="P:Purple.Player.Player.Speed">
            <summary>
            Play speed of the animation.
            </summary>
        </member>
        <member name="T:Purple.Player.IClipPlayer">
            <summary>
            An abstract interface that defines multi clip functionality for 
            a multimedia player.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Last Update: 0.7</para>
            <seealso cref="T:Purple.Player.IPlayer"/>
            </remarks>
        </member>
        <member name="M:Purple.Player.IClipPlayer.PrevClip">
            <summary>
            Moves to the previous clip.
            </summary>
        </member>
        <member name="M:Purple.Player.IClipPlayer.NextClip">
            <summary>
            Advances to the next clip.
            </summary>
        </member>
        <member name="M:Purple.Player.IClipPlayer.FindClip(System.String)">
            <summary>
            Returns a clip for a certain name.
            </summary>
            <param name="name">Name of the clip.</param>
            <returns>The matching clip or null.</returns>
        </member>
        <member name="M:Purple.Player.IClipPlayer.GetIndexOf(System.String)">
            <summary>
            Returns the index of a certain clip.
            </summary>
            <param name="name">The name of the clip.</param>
            <returns>The index of the clip or -1.</returns>
        </member>
        <member name="P:Purple.Player.IClipPlayer.ClipIndex">
            <summary>
            The index of the current clip.
            </summary>
        </member>
        <member name="P:Purple.Player.IClipPlayer.Clips">
            <summary>
            The collection of <see cref="P:Purple.Player.IClipPlayer.Clip"/>s.
            </summary>
        </member>
        <member name="P:Purple.Player.IClipPlayer.Clip">
            <summary>
            Returns the current clip.
            </summary>
        </member>
        <member name="P:Purple.Player.IClipPlayer.ClipTime">
            <summary>
            Returns the position within the clip as a float in the range of [0,1].
            </summary>
        </member>
        <member name="F:Purple.Player.ClipPlayer.clipIndex">
            <summary>
            The index of the current played clip.
            </summary>
        </member>
        <member name="M:Purple.Player.ClipPlayer.#ctor(Purple.Player.Clip[])">
            <summary>
            Creates a new instance of <see cref="T:Purple.Player.ClipPlayer"/>.
            </summary>
            <param name="clips">The array of clips to initialize with.</param>
        </member>
        <member name="M:Purple.Player.ClipPlayer.PrevClip">
            <summary>
            Moves to the previous clip.
            </summary>
        </member>
        <member name="M:Purple.Player.ClipPlayer.NextClip">
            <summary>
            Advances to the next clip.
            </summary>
        </member>
        <member name="M:Purple.Player.ClipPlayer.FindClip(System.String)">
            <summary>
            Returns a clip for a certain name.
            </summary>
            <param name="name">Name of the clip.</param>
            <returns>The matching clip or null.</returns>
        </member>
        <member name="M:Purple.Player.ClipPlayer.GetIndexOf(System.String)">
            <summary>
            Returns the index of a certain clip.
            </summary>
            <param name="name">The name of the clip.</param>
            <returns>The index of the clip or -1.</returns>
        </member>
        <member name="M:Purple.Player.ClipPlayer.CalcClipTime(System.Single,Purple.Player.Clip)">
            <summary>
            Caluclates the relative clipTime in the range of [0..1].
            </summary>
            <param name="t">The time in seconds.</param>
            <param name="clip">The clip to use.</param>
            <returns></returns>
        </member>
        <member name="P:Purple.Player.ClipPlayer.ClipIndex">
            <summary>
            The index of the current played clip.
            </summary>
        </member>
        <member name="P:Purple.Player.ClipPlayer.Clips">
            <summary>
            The array of <see cref="P:Purple.Player.ClipPlayer.Clip"/>s.
            </summary>
        </member>
        <member name="P:Purple.Player.ClipPlayer.Clip">
            <summary>
            Returns the current clip.
            </summary>
        </member>
        <member name="P:Purple.Player.ClipPlayer.ClipTime">
            <summary>
            Returns the position within the clip as a float in the range of [0,1]. 
            </summary>
        </member>
        <member name="P:Purple.Player.ClipPlayer.TimeLeft">
            <summary>
            Returns the time left of the current clip.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.AnimationPlayer.FrameIndex2">
            <summary>
            The next frameIndex of the current clip.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.AnimationPlayer.BlendFactor">
            <summary>
            The blend factor of the current clip.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.AnimationPlayer.ClipBlendFactor">
            <summary>
            The blend factor between the last and the current clip.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.AnimationPlayer.FadeTime">
            <summary>
            The time in seconds to fade from one clip to another.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationPlayer.#ctor(Purple.Graphics.Geometry.AnimationClip[])">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Geometry.AnimationPlayer"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationPlayer.Fade(System.Int32)">
            <summary>
            Fades to the clip with a given index.
            </summary>
            <param name="clipIndex">The index to fade to.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationPlayer.SetClip(System.Int32)">
            <summary>
            Set the clip with a given index.
            </summary>
            <param name="clipIndex">The clip to set.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationPlayer.SetFrame(System.Int32)">
            <summary>
            Sets a frame with a given index.
            </summary>
            <param name="frameIndex">The frame to set.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationPlayer.Update(System.Single)">
            <summary>
            Updates the player.
            </summary>
            <param name="deltaTime">The time passed since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationPlayer.CalcClipIndex(System.Int32)">
            <summary>
            Calculates the clipIndex from a given frameIndex.
            </summary>
            <param name="frameIndex">The frameIndex to calculate the clipIndex for.</param>
            <returns>The clipIndex or -1 if the frameIndex was invalid.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationPlayer.AnimationClip">
            <summary>
            Returns the current AnimationClip.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationPlayer.LastFrameIndex">
            <summary>
            The frameIndex of the last clip.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationPlayer.LastFrameIndex2">
            <summary>
            The next frameIndex of the last clip.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationPlayer.LastBlendFactor">
            <summary>
            The blend factor of the last clip.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationPlayer.FrameIndex">
            <summary>
            The frameIndex of the current clip.
            </summary>
        </member>
        <member name="T:Purple.Graphics.BufferManager">
            <summary>
            Buffer Manager manages the mapping of graphics streams
            to physical buffers	(just online virtual buffers are managed)	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.BufferManager.GetBuffer(Purple.Graphics.IGraphicsStream)">
            <summary>
            returns physical buffer
            </summary>
            <param name="stream">to return physical buffer fpr</param>
            <returns>physical buffer</returns>
        </member>
        <member name="M:Purple.Graphics.BufferManager.RemoveBuffer(Purple.Graphics.IGraphicsStream)">
            <summary>
            removes stream from buffer
            </summary>
            <param name="stream">stream to remove</param>
        </member>
        <member name="M:Purple.Graphics.BufferManager.Create(System.Object,Purple.Graphics.IGraphicsStream)">
            <summary>
            creates new hashtable entry (key, ArrayList) for a given stream format
            </summary>
            <param name="key">key of entry</param>
            <param name="stream">stream to create list for</param>
        </member>
        <member name="M:Purple.Graphics.BufferManager.AddDataChunk(System.Object,Purple.Graphics.IGraphicsStream)">
            <summary>
            adds a new DataChunk for the given stream format
            </summary>
            <param name="key">of entry</param>
            <param name="stream">stream to create DataChunk for</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.BufferManager.Insert(System.Object,Purple.Graphics.IGraphicsStream)">
            <summary>
            insert stream into ArrayList of DataChunks (or append)
            </summary>
            <param name="key">key of entry</param>
            <param name="stream">stream to add</param>
            <returns>used physical buffer</returns>
        </member>
        <member name="M:Purple.Graphics.BufferManager.getKey(Purple.Graphics.IGraphicsStream)">
            <summary>
            returns the hashtable key for a given stream format
            </summary>
            <param name="stream">stream to get key for</param>
            <returns>key object</returns>
        </member>
        <member name="M:Purple.Graphics.BufferManager.CreatePhysicalBuffer(Purple.Graphics.IGraphicsStream)">
            <summary>
            create new physical buffer for a given stream
            </summary>
            <param name="stream">to create physical buffer for</param>
            <returns>new physical buffer</returns>
        </member>
        <member name="M:Purple.Graphics.BufferManager.Statistics">
            <summary>
            prints the statistics to the debug output
            </summary>
        </member>
        <member name="T:Purple.Graphics.BufferManager.Slot">
            <summary>
            slots are available memory regions
            </summary>
        </member>
        <member name="F:Purple.Graphics.BufferManager.Slot.Position">
            <summary>
            position in physical buffer
            </summary>
        </member>
        <member name="F:Purple.Graphics.BufferManager.Slot.Size">
            <summary>
            size of free slot
            </summary>
        </member>
        <member name="M:Purple.Graphics.BufferManager.Slot.#ctor(System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="position">position in physical buffer</param>
            <param name="size">size of free slot</param>
        </member>
        <member name="T:Purple.Graphics.BufferManager.DataChunk">
            <summary>
            maps graphics streams to physical Buffers
            </summary>
        </member>
        <member name="F:Purple.Graphics.BufferManager.DataChunk.PhysicalBuffer">
            <summary>
            physical VertexBuffer
            </summary>
        </member>
        <member name="F:Purple.Graphics.BufferManager.DataChunk.Available">
            <summary>
            total amount of (fragmented) available memory
            </summary>
        </member>
        <member name="F:Purple.Graphics.BufferManager.DataChunk.GraphicsStreams">
            <summary>
            list of graphics streams
            </summary>
        </member>
        <member name="F:Purple.Graphics.BufferManager.DataChunk.FreeSlots">
            <summary>
            list of free slots
            </summary>
        </member>
        <member name="M:Purple.Graphics.BufferManager.DataChunk.#ctor(Purple.Graphics.Core.IPhysicalGraphicsBuffer,Purple.Graphics.IGraphicsStream)">
            <summary>
            constructor 
            </summary>
            <param name="physicalBuffer"></param>
            <param name="graphicsStream"></param>
        </member>
        <member name="M:Purple.Graphics.BufferManager.DataChunk.#ctor(Purple.Graphics.Core.IPhysicalGraphicsBuffer)">
            <summary>
            constructor
            </summary>
            <param name="physicalBuffer"></param>
        </member>
        <member name="M:Purple.Graphics.BufferManager.DataChunk.Remove(Purple.Graphics.IGraphicsStream)">
            <summary>
            removes stream from dataChunk
            </summary>
            <param name="stream">to remove</param>
        </member>
        <member name="M:Purple.Graphics.BufferManager.DataChunk.IsEmpty">
            <summary>
            tests if there is no stream in buffer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.BufferManager.DataChunk.Dispose">
            <summary>
            frees ressources
            </summary>
        </member>
        <member name="M:Purple.Graphics.BufferManager.DataChunk.Add(Purple.Graphics.IGraphicsStream)">
            <summary>
            tries to add the graphicsStream to this chunk
            </summary>
            <param name="stream">stram to add</param>
            <returns>true if succeeded otherwise false</returns>
        </member>
        <member name="T:Purple.Graphics.VertexBufferManager">
            <summary>
            Vertex Buffer Manager 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexBufferManager.GetBuffer(Purple.Graphics.IGraphicsStream)">
            <summary>
            Reserves a new region in the physical buffer and returns the 
            used (eventually newly created physical buffer).
            </summary>
            <remarks>
            Currently the <c>GetBuffer</c> method also ensures, that the space 
            for all streams of a certain <see cref="T:Purple.Graphics.VertexUnit"/> is reserved 
            at the same time. This is because "older" cards like the Geforce3 and 
            Radeon8500 don't support rendering multiple streams starting at a different index.
            </remarks>
            <param name="stream">To return physical buffer for.</param>
            <returns>Physical buffer.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexBufferManager.getKey(Purple.Graphics.IGraphicsStream)">
            <summary>
            returns the hashtable key for a given stream format
            </summary>
            <param name="stream">stream to get key for</param>
            <returns>key object</returns>
        </member>
        <member name="M:Purple.Graphics.VertexBufferManager.CreatePhysicalBuffer(Purple.Graphics.IGraphicsStream)">
            <summary>
            create new physical buffer for a given stream
            </summary>
            <param name="stream">to create physical buffer for</param>
            <returns>new physical buffer</returns>
        </member>
        <member name="P:Purple.Graphics.VertexBufferManager.Instance">
            <summary>
            singleton instance
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexBufferManager.Key">
            <summary>
            key of vertexBuffer
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexBufferManager.Key.#ctor(Purple.Graphics.Core.IVertexDeclaration,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="declaration">declaration</param>
            <param name="streamIndex">index of current stream in format</param>
        </member>
        <member name="M:Purple.Graphics.VertexBufferManager.Key.Equals(System.Object)">
            <summary>
            Tests two keys for equality.
            </summary>
            <param name="obj">Key to test with.</param>
            <returns>True if the two objects are the same.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexBufferManager.Key.GetHashCode">
            <summary>
            Returns the hash code of the current key.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Purple.Graphics.IndexBufferManager">
            <summary>
            Index Buffer Manager 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IndexBufferManager.getKey(Purple.Graphics.IGraphicsStream)">
            <summary>
            returns the hashtable key for a given stream format
            </summary>
            <param name="stream">stream to get key for</param>
            <returns>key object</returns>
        </member>
        <member name="M:Purple.Graphics.IndexBufferManager.CreatePhysicalBuffer(Purple.Graphics.IGraphicsStream)">
            <summary>
            create new physical buffer for a given stream
            </summary>
            <param name="stream">to create physical buffer for</param>
            <returns>new physical buffer</returns>
        </member>
        <member name="P:Purple.Graphics.IndexBufferManager.Instance">
            <summary>
            singleton instance
            </summary>
        </member>
        <member name="T:Purple.Graphics.Camera">
            <summary>
            A simple perspective camera.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="T:Purple.IApply">
            <summary>
            Abstract interface for objects that can be applied.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.IApply.Apply">
            <summary>
            Applies a certain state.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Camera.#ctor">
            <summary>
            Creates a new perspective camera.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Camera.Apply">
            <summary>
            Applies the camera.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Camera.Near">
            <summary>
            The distance to the near clipping plane.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Camera.Far">
            <summary>
            The distance to the far clipping plane.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Camera.Aspect">
            <summary>
            The aspect ration width/height.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Camera.FovY">
            <summary>
            Field of view of the y-Axis.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Camera.View">
            <summary>
            The view matrix.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Camera.Projection">
            <summary>
            Projection matrix.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ICameraController">
            <summary>
            Abstract interface for a camera controller.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.ICameraController.Update(System.Single)">
            <summary>
            Update the controller.
            </summary>
            <param name="deltaTime">The time passed since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.ICameraController.Reset(Purple.Graphics.Camera)">
            <summary>
            Reset the controller to the view of the camera.
            </summary>
            <param name="camera">The camera to use for resetting the controller.</param>
        </member>
        <member name="T:Purple.Graphics.MayaCameraController">
            <summary>
            A simple Maya like camera controller.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.MayaCameraController.#ctor(Purple.Graphics.Camera)">
            <summary>
            Creates a new maya like camera controller.
            </summary>
            <param name="camera">The camera to controll.</param>
        </member>
        <member name="M:Purple.Graphics.MayaCameraController.Reset(Purple.Graphics.Camera)">
            <summary>
            Reset the controller to the view of the camera.
            </summary>
            <param name="camera">The camera to use for resetting the controller.</param>
        </member>
        <member name="M:Purple.Graphics.MayaCameraController.Update(System.Single)">
            <summary>
            Update the camera controller.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
            <returns>The new view matrix.</returns>
        </member>
        <member name="M:Purple.Graphics.MayaCameraController.Rotate(System.Single,System.Single)">
            <summary>
            rotate the 
            </summary>
            <param name="deltaX"></param>
            <param name="deltaY"></param>
        </member>
        <member name="P:Purple.Graphics.MayaCameraController.MouseSpeed">
            <summary>
            mouse speed influencing speed of rotation
            </summary>
        </member>
        <member name="T:Purple.Graphics.QuakeCameraController">
            <summary>
            A simple Quake like camera controller.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.QuakeCameraController.#ctor(Purple.Graphics.Camera)">
            <summary>
            Creates a new quake like camera controller.
            </summary>
            <param name="camera">The camera to control.</param>
        </member>
        <member name="M:Purple.Graphics.QuakeCameraController.Reset(Purple.Graphics.Camera)">
            <summary>
            Reset the controller to the view of the camera.
            </summary>
            <param name="camera">The camera to use for resetting the controller.</param>
        </member>
        <member name="M:Purple.Graphics.QuakeCameraController.SetRotation(System.Single,System.Single)">
            <summary>
            sets the rotation of the view according to the angles
            </summary>
            <param name="leftRight">for looking left, right (angle)</param>
            <param name="upDown">for looking up, down (angle)</param>
        </member>
        <member name="M:Purple.Graphics.QuakeCameraController.Rotate(System.Single,System.Single)">
            <summary>
            rotates the views
            </summary>
            <param name="leftRight">for looking left, right (angle)</param>
            <param name="upDown">for looking up, down (angle)</param>
        </member>
        <member name="M:Purple.Graphics.QuakeCameraController.Move(Purple.Math.Vector3)">
            <summary>
            moves the camera in view space
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Purple.Graphics.QuakeCameraController.Update(System.Single)">
            <summary>
            Update the camera controller.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
            <returns>The new view matrix.</returns>
        </member>
        <member name="P:Purple.Graphics.QuakeCameraController.Speed">
            <summary>
            movement speed in all 3 directions
            </summary>
        </member>
        <member name="P:Purple.Graphics.QuakeCameraController.MouseSpeed">
            <summary>
            mouse speed influencing speed of rotation
            </summary>
        </member>
        <member name="P:Purple.Graphics.QuakeCameraController.Rotation">
            <summary>
            3x3 rotation matrix of camera
            </summary>
        </member>
        <member name="P:Purple.Graphics.QuakeCameraController.Position">
            <summary>
            position of camera in world space
            </summary>
        </member>
        <member name="T:Purple.Graphics.Capabilities">
            <summary>
            Capabilites of the device
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Capabilities.VertexShaderVersion">
            <summary>
            version of supported vertex shaders
            </summary>
        </member>
        <member name="F:Purple.Graphics.Capabilities.PixelShaderVersion">
            <summary>
            version of supported pixel shaders
            </summary>
        </member>
        <member name="F:Purple.Graphics.Capabilities.SupportsTwoSidedStencil">
            <summary>
            is two sided stencil mode supported?
            </summary>
        </member>
        <member name="F:Purple.Graphics.Capabilities.SupportsStreamOffset">
            <summary>
            is offset for streams supported?
            </summary>
        </member>
        <member name="F:Purple.Graphics.Capabilities.RequiresPowerOfTwo">
            <summary>
            Flag that indicates if the graphics hardware requires power of two textures.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Capabilities.SupportsAutoGenerateMipMap">
            <summary>
            Gpu supports generating mipmap surfaces.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Capabilities.VertexConstants">
            <summary>
            The number of vertex shader constants.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Capabilities.#ctor">
            <summary>
            Creates a new instance of the capabilites class.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Color">
            <summary>
            Capabilites of the device
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Color.From(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the argb color value from its components.
            </summary>
            <param name="alpha">The alpha component of the color.</param>
            <param name="red">The red component of the color.</param>
            <param name="green">The green component of the color.</param>
            <param name="blue">The blue component of the color.</param>
            <returns>The argb color value.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.From(System.UInt32)">
            <summary>
            Converts the argb color value from an uint.
            </summary>
            <param name="value">Value 0xaarrggbb to convert.</param>
            <returns>The color value.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.GetAlpha(System.Int32)">
            <summary>
            Extracts the alpha value from a color.
            </summary>
            <param name="color">The color to extract alpha from.</param>
            <returns>The alpha value of the color.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.SetAlpha(System.Int32,System.Int32)">
            <summary>
            Sets the alpha value of a color.
            </summary>
            <param name="color">Color to set alpha value for.</param>
            <param name="alpha">The alpha value to set.</param>
            <returns>The new color with the alpha value set.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.GetARGB(System.Int32,System.Byte@,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Extracts the color components.
            </summary>
            <param name="color">Color to extract components from.</param>
            <param name="alpha">The alpha component.</param>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component</param>
        </member>
        <member name="M:Purple.Graphics.Color.Vector4(System.Int32)">
            <summary>
            Creates a Vector4 from a color.
            </summary>
            <param name="color">The color to create vector for.</param>
            <returns>The converted vector.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.From(Purple.Math.Vector4)">
            <summary>
            Calculates the color value from a vector.
            </summary>
            <param name="vec">The vector to calculate color from.</param>
            <returns>The color vector.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.Multiply(Purple.Math.Vector4,System.Single)">
            <summary>
            Multiplies the color components with a scalar.
            </summary>
            <param name="color">The color to multiply with the scalar.</param>
            <param name="scalar">The scalar.</param>
            <returns>The new color vector.</returns>
        </member>
        <member name="M:Purple.Graphics.Color.Blend(Purple.Math.Vector4,Purple.Math.Vector4,System.Single)">
            <summary>
            Blends from one color to another.
            </summary>
            <param name="from">The color to blend from (factor == 0.0f).</param>
            <param name="to">The destination color (factor == 1.0f).</param>
            <param name="factor">The blend factor.</param>
            <returns>The blended color.</returns>
        </member>
        <member name="P:Purple.Graphics.Color.Empty">
            <summary>
            Returns the value for an empty color.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Color.Black">
            <summary>
            Returns the value for a black color.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Color.White">
            <summary>
            Returns the value for a white color.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Color.Red">
            <summary>
            Returns the value for a red color.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Color.Green">
            <summary>
            Returns the value for a green color.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Color.Blue">
            <summary>
            Returns the value for a blue color.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IDevice">
            <summary>
            abstract interface defining a graphical device
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.Switch(Purple.Graphics.GraphicsSettings)">
            <summary>
            Switches the current graphics mode.
            </summary>
            <param name="settings">The new settings.</param>
            <returns>Returns true if switch was successful.</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.BeginScene">
            <summary>
            starts a new scene for drawing to the control
            </summary>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.EndScene">
            <summary>
            end scene
            </summary>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.Present">
            <summary>
            Presents the scene.
            </summary>
            <returns>Returns false if present fails because the device is lost and needs to be reset.</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.Reset">
            <summary>
            Tries to reset the device.
            </summary>
            <returns>True if resetting the device was successful.</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.Clear(Purple.Graphics.ClearFlags)">
            <summary>
            Clears the back buffers.
            </summary>
            <param name="clearFlags">Flags that determine which buffers should be cleared.</param>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.CreateVertexBuffer(System.Type,System.Int32)">
            <summary>
            creates a new vertex Buffer
            </summary>
            <param name="vertexFormat">type of custom vertex format</param>
            <param name="numVertices">number of vertices to store in vertexBuffer</param>		
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.CreateIndexBuffer(System.Type,System.Int32)">
            <summary>
            creates an index buffer
            </summary>
            <param name="indexFormat">format of indices</param>
            <param name="size">size of buffer in vertices</param>		
            <returns>indexBuffer</returns>		
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.CreateTextureLoader">
            <summary>
            creates an instance of a TextureLoader class
            </summary>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.CreateShaderCompiler">
            <summary>
            creates a shader compiler
            </summary>
            <returns>shader compiler</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.CreateHLSLShaderCompiler">
            <summary>
            Creates a hlsl shader compiler.
            </summary>
            <returns>The hlsl shader compiler.</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.CreateVertexDeclaration(Purple.Graphics.VertexElement[])">
            <summary>
            creates a vertex declaration object
            </summary>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.SetVertexBuffer(System.Int32,Purple.Graphics.Core.IPhysicalGraphicsBuffer,System.Int32)">
            <summary>
            vertexBuffer to set for rendering
            </summary>
            <param name="stream">stream to set vertex buffer for</param>
            <param name="buffer">which should be used for rendering</param>
            <param name="offset">offset to first element in bytes</param>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.SetTexture(System.Int32,Purple.Graphics.Core.ITexture)">
            <summary>
            sets a texture for the rendered primitives
            </summary>
            <param name="stage">to set texture for</param>
            <param name="tex">texture to use</param>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.Draw(System.Int32,System.Int32)">
            <summary>
            renders the triangles defined by the vertexBuffer
            </summary>
            <param name="startVertex">vertex of first primitive</param>
            <param name="primitiveCount">number of primitives to render</param>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.DrawIndexed(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            renders the triangles defined by the indexBuffer
            </summary>	
            <param name="baseIndex">realIndex = Index + baseIndex </param>	
            <param name="minVertex">min vertexBuffer index</param>
            <param name="numVertices">num vertexBuffer indices</param>
            <param name="startIndex">index of indexBuffer to start with</param>		
            <param name="primitiveCount">Number of primitives to render</param>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.SetViewport(Purple.Graphics.Viewport)">
            <summary>
            update the viewport - used by Device
            may be used to update internal viewport
            </summary>
            <param name="viewport">new viewport</param>
        </member>
        <member name="M:Purple.Graphics.Core.IDevice.DisposeManagedResources">
            <summary>
            Disposes all managed resources;
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.RenderStates">
            <summary>
            The RenderStates object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.VertexShaderConstants">
            <summary>
            The vertex shader constants.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.PixelShaderConstants">
            <summary>
            The pixel shader constants.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.InternalObject">
            <summary>
            ptr to OpenGl, DirectX9, ... handle
            it's for internal use only
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.DisplayModes">
            <summary>
            Returns a list of supported <see cref="T:Purple.Graphics.DisplayMode"/> objects
            </summary>
            <returns>DisplayMode objects.</returns>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.CurrentDisplayMode">
            <summary>
            Returns the current displaymode.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.Name">
            <summary>
            name of device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.Description">
            <summary>
            description of device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.OverrideProperties">
            <summary>
            if false, properties are only set if different
            if ture, properties are set in any case
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.Resolution">
            <summary>
            get the resolution used for the internal buffers
            should optimally be the same as the output size
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.Capabilities">
            <summary>
            returns capabilities of this device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.SamplerStates">
            <summary>
            get access to samplerStates
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.IndexBuffer">
            <summary>
            indexBuffer to set for rendering
            </summary>		
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.VertexShader">
            <summary>
            current active vertex shader
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.VertexDeclaration">
            <summary>
            get/sets the vertexDeclaration for vertex shader
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.PixelShader">
            <summary>
            current active pixel shader
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.BackBuffer">
            <summary>
            The backBuffer used for rendering the scene to.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.DepthStencilBuffer">
            <summary>
            The combined depth and stencil buffer surface.
            </summary>
            <remarks>
            The property may return null if no depth and no stencil buffer is used.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.RenderTarget">
            <summary>
            access to the current renderTarget
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.EffectCompiler">
            <summary>
            The standard effect compiler for this Device.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.ClearColor">
            <summary>
            Color for clearing the frame buffer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.ClearDepth">
            <summary>
            Value to use for clearing the z-Buffer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IDevice.ClearStencil">
            <summary>
            The clear value for the stencil value;
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IGraphicsEngine">
            <summary>
            abstract interface assembling the main functionality for rendering
            graphics
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.IGraphicsEngine.GetDevices">
            <summary>
            returns a list of DisplayModes
            </summary>
            <returns>IDevice objects</returns>
        </member>
        <member name="P:Purple.Graphics.Core.IGraphicsEngine.Name">
            <summary>
            name of graphics engine (DirectX9, OpenGL, ...)
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IPhysicalGraphicsBuffer">
            <summary>
            Buffer holding all vertices/indices of a certain mesh	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para> 
              <para>Last Update: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.IPhysicalGraphicsBuffer.Upload(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>
            uploads the buffer data
            </summary>
            <param name="vertices">array of vertices/indices</param>
            <param name="offset">to start in buffer</param>
            <param name="start">The index of the vertices array to start with.</param>
            <param name="size">The number of element of the vertices array to upload.</param>
        </member>
        <member name="M:Purple.Graphics.Core.IPhysicalGraphicsBuffer.Download(System.Int32,System.Int32)">
            <summary>
            downloads the buffer data
            not recommended - slow
            </summary>
            <param name="size">size of array to download</param>
            <param name="offset">to start in buffer</param>
        </member>
        <member name="P:Purple.Graphics.Core.IPhysicalGraphicsBuffer.Size">
            <summary>
            returns number of vertices/indices
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IPhysicalGraphicsBuffer.Type">
            <summary>
            type of vertex/index
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IPhysicalGraphicsBuffer.ChangeCounter">
            <summary>
            This property contains how often the graphics buffer was (re)created.
            That way streams can test if their data was destroyed and has to be uploaded again.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IPixelShader">
            <summary>
            abstract interface for a pixel shaders
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.IShader">
            <summary>
            abstract interface for a shaders
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.IRenderState">
            <summary>
            abstract interface for all different kinds of renderStates
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IRenderState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.IRenderState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="T:Purple.Graphics.IShaderConstantHolder">
            <summary>
            Abstract interface that defines the ability, to hold shader 
            constants and upload them to the graphics card.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IShaderConstantHolder.UploadConstants">
            <summary>
            Upload the shader constants to the graphics card.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IShaderConstantHolder.Constants">
            <summary>
            Collection of shader constants.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IRenderStates">
            <summary>
            abstract for supported renderstates
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Change: 0.6</para>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.SourceBlend">
            <summary>
            Sets the source blend factor.
            </summary>
            <remarks>
            <c>Final color = source color * SourceBlend + destination color * DestinationBlend.</c>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.DestinationBlend">
            <summary>
            Sets the destination blend factor.
            </summary>
            <remarks>
            <c>Final color = source color * SourceBlend + destination color * DestinationBlend.</c>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.Clipping">
            <summary>
            enable clipping by engine
            The default value is true.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.CullMode">
            <summary>
            Specifies how back-facing triangles are culled, if at all. 
            The default value is CounterClockwise.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.ZBuffer">
            <summary>
            turn ZBuffer on/off
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.ZBufferFunction">
            <summary>
            function to use for ZBuffer
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilTest">
            <summary>
            retrieves or enables/disables stencil testing
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilFail">
            <summary>
            Retrieves or sets the stencil operation to perform if the stencil test fails.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilPass">
            <summary>
            Stencil operation to perform if both the stencil and the depth (z) tests pass. This can be one member of the D3dstencilop enumerated type. The default value is Keep.
            </summary>																																																										
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilZBufferFail">
            <summary>
            Stencil operation to perform if the stencil test passes and the depth test (z-test) fails. This can be one of the members of the D3dstencilop enumerated type. Keep
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilFunction">
            <summary>
            Comparison function for the stencil test. This can be one member of the Compare enumerated type. The default value is Always. 
            The comparison function is used to compare the reference value to a stencil buffer entry. 
            This comparison applies only to the bits in the reference value and stencil buffer entry that are set in the stencil mask (set by the StencilMask render state). 
            If true, the stencil test passes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilMask">
            <summary>
            Mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test. 
            The default mask is 0xFFFFFFFF.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilWriteMask">
            <summary>
            Write mask applied to values written into the stencil buffer. The default mask is 0xFFFFFFFF.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.ShadeMode">
            <summary>
            One or more members of the D3dshademode enumerated type. The default value is Gouraud.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.ZBufferWriteEnable">
            <summary>
            true to enable the application to write to the depth buffer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.StencilReference">
            <summary>
            An int reference value for the stencil test. The default value is 0.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.TwoSidedStencilMode">
            <summary>
            A bool value. True enables two-sided stenciling, false disables it. 
            The application should set CullMode to None to enable two-sided stencil mode. 
            If the triangle winding order is clockwise, the Stencil* operations will be used. 
            If the winding order is counterclocwise, the CounterClockWiseStencil* operations will be used.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.CounterClockwiseStencilFunction">
            <summary>		
            The comparison function. ccw stencil test passes if ((ref AND mask) stencil function (stencil AND mask)) is true.
            </summary>	
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.CounterClockwiseStencilZBufferFail">
            <summary>
            Stencil operation to perform if ccw stencil test passes and z-test fails.
            </summary>	
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.CounterClockwiseStencilFail">
            <summary>
            Stencil operation to perform if ccw stencil test fails.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.CounterClockwiseStencilPass">
            <summary>
            Stencil operation to perform if both ccw stencil and z-tests pass.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.AlphaEnable">
            <summary>
            Flag that indicates if alpha blending is enabled.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.Wireframe">
            <summary>
            Enable/disable wireframe mode.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.ColorWriteEnable">
            <summary>
            Enables/disables writing the color value to the frame buffer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.DepthBias">
            <summary>
            Polygons with a high z-bias value appear in front of polygons with a low value, without requiring sorting for drawing order. 
            For example, polygons with a value of 1 appear in front of polygons with a value of 0.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.IRenderStates.Dither">
            <summary>
            Enable dithering.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.ISamplerStates">
            <summary>
            interface for SamplerStates
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.ISamplerStates.Item(System.Int32)">
            <summary>
            access Sampler by Index
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISamplerStates.Length">
            <summary>
            The number of ISamplers contained within this object;
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.ISampler">
            <summary>
            abstract interface for a sampler
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.AddressU">
            <summary>
            Texture-address mode for the u coordinate.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.AddressV">
            <summary>
            Texture-address mode for the v coordinate.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.AddressW">
            <summary>
            Texture-address mode for the w coordinate.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.BorderColor">
            <summary>
            Border color or type Color.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.DMapOffset">
            <summary>
            Vertex offset in the presampled displacement map. This is a constant used by the tessellator, its value is 256.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.ElementIndex">
            <summary>
            When a multi-element texture is assigned to the sampler, this indicates which element index to use. 
            The default value is 0.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.MagFilter">
            <summary>
            Magnification filter
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.MinFilter">
            <summary>
            Minification filter
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.MipFilter">
            <summary>
            Mipmap filter to use during minification.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.MaxAnisotropy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.MaxMipLevel">
            <summary>
            LOD index of largest map to use. Values range from 0 to (n-1) where 0 is the largest.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.MipMapLevelOfDetailBias">
            <summary>
            Mipmap level of detail bias.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ISampler.SrgbTexture">
            <summary>Gamma correction value. The default value is 0, which means gamma is 1.0 and no correction is required. 
            Otherwise, this value means that the sampler should assume gamma of 2.2 on the content and convert it to linear (gamma 1.0) before presenting it to the pixel shader.</summary>		
        </member>
        <member name="T:Purple.Graphics.Core.IShaderCompiler">
            <summary>
            abstract interface for a shader compiler
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderCompiler.CompileVertexShader(System.IO.Stream)">
            <summary>
            creates a vertex shader
            </summary>
            <param name="stream">stream to compile</param>
            <returns>shader</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderCompiler.CompileVertexShader(System.String)">
            <summary>
            creates a vertex shader
            </summary>
            <param name="fileName">vertexShader filename</param>
            <returns>shader</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderCompiler.CompilePixelShader(System.IO.Stream)">
            <summary>
            creates a pixel shader
            </summary>
            <param name="stream">stream to compile</param>
            <returns>pixelshader</returns>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderCompiler.CompilePixelShader(System.String)">
            <summary>
            creates a pixel shader
            </summary>
            <param name="fileName">pixelShader fileName</param>
            <returns>pixelshader</returns>
        </member>
        <member name="P:Purple.Graphics.Core.IShaderCompiler.CompilationError">
            <summary>
            get error string if Compile... returned null
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IShaderConstants">
            <summary>
            abstract interface for Shader constant registers
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para> 
              <para>Last Update: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderConstants.Set(System.Int32,System.Single[])">
            <summary>
            Sets an array of floats.
            </summary>
            <param name="startRegister">The register to start with.</param>
            <param name="floats">The array of floats.</param>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderConstants.Set(System.Int32,System.Int32[])">
            <summary>
            Sets an array of ints.
            </summary>
            <param name="startRegister">The register to start with.</param>
            <param name="ints">The array of ints.</param>
        </member>
        <member name="M:Purple.Graphics.Core.IShaderConstants.Set(System.Int32,System.Boolean[])">
            <summary>
            Sets an array of bools.
            </summary>
            <param name="startRegister">The register to start with.</param>
            <param name="bools">The array of bools.</param>
        </member>
        <member name="T:Purple.Graphics.Core.IVertexShaderConstants">
            <summary>
            abstract interface for vertexShader constant registers
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Core.IPixelShaderConstants">
            <summary>
            abstract interface for vertexShader constant registers
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Core.ISurface">
            <summary>
            Abstract interface for a Surface.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.ISurface.Description">
            <summary>
            Returns the <see cref="T:Purple.Graphics.SurfaceDescription"/> about the current Surface.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.ITexture">
            <summary>
            abstract interface for a texture
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para> 
              <para>Last Change: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.ITexture.Upload">
            <summary>
            Uploads the offline data to the gpu.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Core.ITexture.DisposeOnlineData">
            <summary>
            Disposes the online data.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture.Usage">
            <summary>
            The usage of the texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture.Id">
            <summary>
            Returns the id of the texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture.Description">
            <summary>
            Returns the description of the surface.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture.HasOnlineData">
            <summary>
            Returns true if the texture was already uploaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Purple.Graphics.Core.ITexture2d">
            <summary>
            abstract interface for a 2d texture
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.ITexture2d.CopyBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Copies a rectangular area of the bitmap to the texture.
            </summary>
            <param name="bitmap">The bitmap to copy.</param>
            <param name="source">The source rectangle (Rectangle.Empty to copy the whole bitmap).</param>
            <param name="target">The target position.</param>
        </member>
        <member name="M:Purple.Graphics.Core.ITexture2d.Clear(System.Drawing.Color)">
            <summary>
            Clears the texture to a certain color.
            </summary>
            <param name="color">Color to use for clearing texture.</param>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture2d.TextureCoordinates">
            <summary>
            get the absolute texture coordinates of this texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture2d.Parent">
            <summary>
            returns the parent texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture2d.Root">
            <summary>
            returns the physical texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.Core.ITexture2d.ImageDescription">
            <summary>
            returns a description of the image
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.ITexture3d">
            <summary>
            abstract interface for a 3d texture
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Core.ITextureCube">
            <summary>
            abstract interface for a cube texture
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Core.ITextureLoader">
            <summary>
            abstract interface for a TextureLoader
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Core.ITextureLoader.Create(System.Int32,System.Int32,System.Int32,Purple.Graphics.Format,Purple.Graphics.TextureUsage)">
            <summary>
            creates an empty texture
            </summary>
            <param name="width">width of texture in pixel</param>
            <param name="height">height of texture in pixel</param>
            <param name="mipLevels">number of mip levels</param>
            <param name="format">format to use for texture</param>
            <param name="usage">special texture usage</param>
            <returns>new texture</returns>
        </member>
        <member name="M:Purple.Graphics.Core.ITextureLoader.Load(System.IO.Stream,System.Int32,System.Int32,System.Int32,Purple.Graphics.Format,Purple.Graphics.Filter,Purple.Graphics.Filter,Purple.Graphics.TextureUsage)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="stream">Stream to load texture from.</param>
            <param name="width">Width of texture or 0 to keep original width.</param>
            <param name="height">Height of texture or 0 to keep original height.</param>
            <param name="mipLevels">Number of mipmap levels to create or 0 to create whole mipmap chain.</param>
            <param name="format">Format of texture.</param>
            <param name="resizeFilter">The filter used for resizing the texture or none.</param>
            <param name="mipFilter">The filter used for generating the mipMapLevels or none.</param>
            <param name="usage">The hints for creating the texture.</param>
            <returns>Texture object.</returns>
        </member>
        <member name="M:Purple.Graphics.Core.ITextureLoader.LoadCube(System.IO.Stream)">
            <summary>
            loads a cube texture from a stream
            </summary>
            <param name="stream">stream to load texture from</param>
            <returns>texture object</returns>
        </member>
        <member name="M:Purple.Graphics.Core.ITextureLoader.GetSurfaceDescription(System.IO.Stream)">
            <summary>
            gets a description of a stream texture without loading it.
            </summary>
            <param name="stream">the stream to get information about</param>
            <returns>a description of the stream texture</returns>
        </member>
        <member name="M:Purple.Graphics.Core.ITextureLoader.Save(System.IO.Stream,Purple.Graphics.Core.ISurface)">
            <summary>
            Saves a surface to a stream.
            </summary>
            <param name="stream">Stream to save surfaces to.</param>
            <param name="surface">Surface to save.</param>
        </member>
        <member name="P:Purple.Graphics.Core.ITextureLoader.AvailableMemory">
            <summary>
            Returns the available texture memory.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Core.IVertexDeclaration">
            <summary>
            vertex format
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Core.IVertexShader">
            <summary>
            abstract interface for a vertexShader
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Core.IVertexShader.InputSemantics">
            <summary>
            Returns the input semantics of a vertex shader.
            </summary>
            <returns>The input semantics of a vertex shader.</returns>
        </member>
        <member name="T:Purple.Graphics.CubeMapFaces">
            <summary>
            All six faces of the cube map.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.CubeMapFaces.PositiveX">
            <summary>
            Positive x-face of the cube map.
            </summary>
        </member>
        <member name="F:Purple.Graphics.CubeMapFaces.NevativeX">
            <summary>
            Negative x-face of the cube map. 
            </summary>
        </member>
        <member name="F:Purple.Graphics.CubeMapFaces.PositiveY">
            <summary>
            Positive y-face of the cube map.
            </summary>
        </member>
        <member name="F:Purple.Graphics.CubeMapFaces.NegativeY">
            <summary>
            Negative y-face of the cube map.
            </summary>
        </member>
        <member name="F:Purple.Graphics.CubeMapFaces.PositiveZ">
            <summary>
            Positive z-face of the cube map.
            </summary>
        </member>
        <member name="F:Purple.Graphics.CubeMapFaces.NegativeZ">
            <summary>
            Negative z-face of the cube map.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ClearFlags">
            <summary>
            Enumerator for all clear buffers.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.ClearFlags.FrameBuffer">
            <summary>
            Clear the frame buffer.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ClearFlags.DepthBuffer">
            <summary>
            Clear the depth buffer (z-buffer).
            </summary>
        </member>
        <member name="F:Purple.Graphics.ClearFlags.StencilBuffer">
            <summary>
            Clear the stencil buffer.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ClearFlags.All">
            <summary>
            Clears all.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ShaderType">
            <summary>
            Enumerator for all shader types.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.ShaderType.VertexShader">
            <summary>
            Vertex Shader.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderType.PixelShader">
            <summary>
            Pixel Shader.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderType.Both">
            <summary>
            Vertex and Pixel Shader.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ShadeMode">
            <summary>
            ShadeMode
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.ShadeMode.Flat">
            <summary>
            Flat shading mode. The color and specular component of the first vertex in the triangle 
            are used to determine the color and specular component of the face. 
            These colors remain constant across the triangle; that is, they are not interpolated. 
            The specular alpha is interpolated. See Remarks.</summary>
        </member>
        <member name="F:Purple.Graphics.ShadeMode.Gouraud">
            <summary>
            Gouraud shading mode. 
            The color and specular components of the face are determined by a linear interpolation between all three of the triangle's vertices.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShadeMode.Phong">
            <summary>Not supported.</summary>
        </member>
        <member name="T:Purple.Graphics.Filter">
            <summary>
            Enumeration over all filters.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Filter.None">
            <summary>Mipmapping disabled. The rasterizer uses the magnification filter instead.</summary>
        </member>
        <member name="F:Purple.Graphics.Filter.Point">
            <summary>Each destination pixel is computed by sampling the nearest pixel from the source image.</summary>
        </member>
        <member name="F:Purple.Graphics.Filter.Linear">
            <summary>Bilinear interpolation filtering is used as a texture magnification or minification filter. A weighted average of a 2x2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer interpolates pixel color in a linear manner, using the texels of the two nearest textures.</summary>
        </member>
        <member name="F:Purple.Graphics.Filter.Triangle">
            <summary>Each pixel in the source image contributes equally to the destination image. This is the slowest of the filters.</summary>
        </member>
        <member name="F:Purple.Graphics.Filter.Box">
            <summary>Each pixel is computed by averaging a 2x2(x2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.</summary>
        </member>
        <member name="T:Purple.Graphics.Format">
            <summary>
            Format of textures
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Format.R8G8B8">
            <summary>24-bit RGB pixel format with 8 bits per channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A8R8G8B8">
            <summary>32-bit ARGB pixel format with alpha, using 8 bits per channel.</summary>		
        </member>
        <member name="F:Purple.Graphics.Format.X8R8G8B8">
            <summary>32-bit RGB pixel format, where 8 bits are reserved for each color.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.R5G6B5">
            <summary>16-bit RGB pixel format with 5 bits for red, 6 bits for green, and 5 bits for blue.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.X1R5G5B5">
            <summary>16-bit pixel format where 5 bits are reserved for each color.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A1R5G5B5">
            <summary>16-bit pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A4R4G4B4">
            <summary>16-bit ARGB pixel format with 4 bits for each channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.R3G3B2">
            <summary>8-bit RGB texture format using 3 bits for red, 3 bits for green, and 2 bits for blue.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A8">
            <summary>8-bit alpha only.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A8R3G3B2">
            <summary>16-bit ARGB texture format using 8 bits for alpha, 3 bits each for red and green, and 2 bits for blue</summary>
        </member>
        <member name="F:Purple.Graphics.Format.X4R4G4B4">
            <summary>16-bit RGB pixel format using 4 bits for each color.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A8B8G8R8">
            <summary>32-bit ARGB pixel format with alpha, using 8 bits per channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.X8B8G8R8">
            <summary>32-bit RGB pixel format, where 8 bits are reserved for each color.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A16B16G16R16">
            <summary>64-bit pixel format using 16 bits for each component.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A2B10G10R10">
            <summary>32-bit RGB pixel format, where 8 bits are reserved for each color.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.D24SingleS8">
            <summary>Nonlockable format that contains 24 bits of depth (in a 24-bit floating-point format - 20e4) and 8 bits of stencil.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.D32SingleLockable">
            <summary>Lockable format in which the depth value is represented as a standard IEEE floating-point number. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.D24X4S4">
            <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.D24X8">
            <summary>A 2-bit z-buffer bit depth that uses 24 bits for the depth channel. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.L16">
            <summary>16-bit luminance only.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.D16">
            <summary>A 16-bit z-buffer bit depth.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.D24S8">
            <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.D15S1">
            <summary>A 16-bit z-buffer bit depth that reserves 15 bits for the depth channel and 1 bit for the stencil channel. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.D32">
            <summary>A 32-bit z-buffer bit depth. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.D16Lockable">
            <summary>A 16-bit z-buffer bit depth. </summary>
        </member>
        <member name="F:Purple.Graphics.Format.R16F">
            <summary>16-bit float format using 16 bits for the red channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.R32F">
            <summary>32-bit float format using 32 bits for the red channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.G16R16F">
            <summary>32-bit float format using 16 bits for the red channel and 16 bits for the green channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.G32R32F">
            <summary>64-bit float format using 32 bits for the red channel and 32 bits for the green channel.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A16B16G16R16F">
            <summary>64-bit float format using 16 bits for the each channel (alpha, blue, green, red).</summary>
        </member>
        <member name="F:Purple.Graphics.Format.A32B32G32R32F">
            <summary>128-bit float format using 32 bits for the each channel (alpha, blue, green, red).</summary>
        </member>
        <member name="F:Purple.Graphics.Format.G16R16">
            <summary>32-bit pixel format using 16 bits each for green and red.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.Dxt1">
            <summary>0 or 1 bit alpha.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.Dxt2">
            <summary>Explicit 4-bit alpha, color data is premultiplied by alpha.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.Dxt3">
            <summary>Explicit 4-bit alpha, not premultiplied.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.Dxt4">
            <summary>Interpolated alpha, color data is premultiplied by alpha.</summary>
        </member>
        <member name="F:Purple.Graphics.Format.Dxt5">
            <summary>Interpolated alpha, not premultiplied.</summary>
        </member>
        <member name="T:Purple.Graphics.CullMode">
            <summary>
            CullingMode
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.CullMode.CounterClockwise">
            <summary>cull faces that are defined counterClockwise</summary>
        </member>
        <member name="F:Purple.Graphics.CullMode.Clockwise">
            <summary>cull faces that are defined clockwise</summary>
        </member>
        <member name="F:Purple.Graphics.CullMode.None">
            <summary>don't cull back faces</summary>
        </member>
        <member name="T:Purple.Graphics.TextureOperation">
            <summary>
            TextureOperations
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Disable">
            <summary>Disables output from this texture stage and all stages with a higher index. 
            To disable texture mapping, set this as the color operation for the first texture stage (stage 0). Alpha operations cannot be disabled when color operations are enabled. 
            Setting the alpha operation to Disable when color blending is enabled causes undefined behavior. </summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.SelectArg1">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.SelectArg2">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Modulate">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Modulate2x">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Modulate4x">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Add">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.AddSigned">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.AddSigned2x">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Subtract">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.AddSmooth">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BlendDiffuseAlpha">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BlendTextureAlpha">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BlendFactorAlpha">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BlendTextureAlphaPM">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BlendCurrentAlpha">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.PreModulate">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.ModulateAlphaAddColor">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.ModulateColorAddAlpha">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.ModulateInvAlphaAddColor">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.ModulateInvColorAddAlpha">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BumpEnvironmentMap">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.BumoEnvironmentMapLuminance">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.DotProduct3">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.MultiplyAdd">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureOperation.Lerp">
            <summary></summary>
        </member>
        <member name="T:Purple.Graphics.TextureStageState">
            <summary>
            TextureStageState
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.ColorOperation">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.ColorArgument1">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.ColorArgument2">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.AlphaOperation">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.AlphaArgument1">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.AlphaArgument2">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.BumpEnvironmentMaterial00">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.BumpEnvironmentMaterial01">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.BumpEnvironmentMaterial10">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.BumpEnvironmentMaterial11">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.TextureCoordinateIndex">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.BumpEnvironmentLuminanceScale">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.BumpEnvironmentLuminanceOffset">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.TextureTransformFlags">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.ColorArgument0">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.AlphaArgument0">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureStageState.ResultArgument">
            <summary></summary>
        </member>
        <member name="T:Purple.Graphics.TextureArgument">
            <summary>
            TextureArguments
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.Specular">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.Diffuse">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.AlphaReplicate">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.Complement">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.Temp">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.TFactor">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.TextureColor">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.Current">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.SelectMask">
            <summary></summary>
        </member>
        <member name="F:Purple.Graphics.TextureArgument.Constant">
            <summary></summary>
        </member>
        <member name="T:Purple.Graphics.TextureTransform">
            <summary>
            TextureTransform
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureTransform.Disable">
            <summary>Texture coordinates are passed directly to the rasterizer. </summary>
        </member>
        <member name="F:Purple.Graphics.TextureTransform.Count1">
            <summary>The rasterizer should expect 1-D texture coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureTransform.Count2">
            <summary>The rasterizer should expect 2-D texture coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureTransform.Count3">
            <summary>The rasterizer should expect 3-D texture coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureTransform.Count4">
            <summary>The rasterizer should expect 4-D texture coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureTransform.Projected">
            <summary>
            The texture coordinates are all divided by the last element before being passed to the rasterizer. 
            For example, if this flag is specified with the Count3flag, 
            the first and second texture coordinates is divided by the third coordinate before being passed to the rasterizer. 
            </summary>
        </member>
        <member name="T:Purple.Graphics.TextureAddress">
            <summary>
            TextureAddress
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureAddress.Wrap">
            <summary>Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed. </summary>
        </member>
        <member name="F:Purple.Graphics.TextureAddress.Mirror">
            <summary>
            Similar to wRAP, except that the texture is flipped at every integer junction. 
            For u values between 0 and 1, for example, the texture is addressed normally; 
            between 1 and 2, the texture is flipped (mirrored); 
            between 2 and 3, the texture is normal again, and so on. 
            </summary>
        </member>
        <member name="F:Purple.Graphics.TextureAddress.Clamp">
            <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively. </summary>
        </member>
        <member name="F:Purple.Graphics.TextureAddress.Border">
            <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border color. </summary>
        </member>
        <member name="F:Purple.Graphics.TextureAddress.MirrorOnce">
            <summary>
            Similar to Mirror and Clamp. 
            Takes the absolute value of the texture coordinate (thus, mirroring around 0), 
            and then clamps to the maximum value. The most common usage is for volume textures, 
            where support for the full MirrorOnce texture-addressing mode is not necessary,
            but the data is symmetric around the one axis. 
            </summary>
        </member>
        <member name="T:Purple.Graphics.TextureFilter">
            <summary>
            TextureAddress
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureFilter.None">
            <summary>Mipmapping disabled. The rasterizer should use the magnification filter instead.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureFilter.Point">
            <summary>Mipmapping disabled. The rasterizer should use the magnification filter instead.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureFilter.Linear">
            <summary>Mipmapping disabled. The rasterizer should use the magnification filter instead.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureFilter.Anisotropic">
            <summary>Mipmapping disabled. The rasterizer should use the magnification filter instead.</summary>
        </member>
        <member name="F:Purple.Graphics.TextureFilter.PyramidalQuad">
            <summary>Not supported so far</summary>
        </member>
        <member name="F:Purple.Graphics.TextureFilter.GaussianQuad">
            <summary>Not supported so far</summary>
        </member>
        <member name="T:Purple.Graphics.Compare">
            <summary>
            Compare functions
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Compare.Never">
            <summary>Always fail the test. </summary>
        </member>
        <member name="F:Purple.Graphics.Compare.Less">
            <summary>Accept the new pixel if its value is less than the value of the current pixel. </summary>
        </member>
        <member name="F:Purple.Graphics.Compare.Equal">
            <summary>Accept the new pixel if its value equals the value of the current pixel. </summary>		
        </member>
        <member name="F:Purple.Graphics.Compare.LessEqual">
            <summary>Accept the new pixel if its value is less than or equal to the value of the current pixel. </summary>
        </member>
        <member name="F:Purple.Graphics.Compare.Greater">
            <summary>Accept the new pixel if its value is greater than the value of the current pixel. </summary>
        </member>
        <member name="F:Purple.Graphics.Compare.NotEqual">
            <summary>Accept the new pixel if its value does not equal the value of the current pixel. </summary>
        </member>
        <member name="F:Purple.Graphics.Compare.GreaterEqual">
            <summary>Accept the new pixel if its value is greater than or equal to the value of the current pixel. </summary>
        </member>
        <member name="F:Purple.Graphics.Compare.Always">
            <summary>Always pass the test. </summary>
        </member>
        <member name="T:Purple.Graphics.DeclarationType">
            <summary>
            DeclarationType - Defines a vertex declaration data type.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Float1">
            <summary>1-D float expanded to (float, 0, 0, 1)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Float2">
            <summary>2-D float expanded to (float, float, 0, 1)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Float3">
            <summary>3-D float expanded to (float, float, float, 1)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Float4">
            <summary>4-D float expanded to (float, float, float, float).</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Color">
            <summary>4-D packed unsigned bytes mapped to 0 to 1 range. Input is in D3DCOLOR format (ARGB) expanded to (R, G, B, A)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.UByte4">
            <summary>4-D unsigned byte</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Short2">
            <summary>2-D signed short expanded to (value, value, 0, 1)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Short4">
            <summary>4-D signed short expanded to (value, value, value, value)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.UByte4N">
            <summary>Each of 4 bytes is normalized by dividing to 255.0. This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Short2N">
            <summary>Normalized, 2-D signed short, expanded to (First byte/32767.0, second byte/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Short4N">
            <summary>Normalized, 4-D signed short, expanded to (First byte/32767.0, second byte/32767.0, third byte/32767.0, fourth byte/32767.0). This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.UShort2N">
            <summary>Normalized, 2-D unsigned short, expanded to (First byte/65535.0, second byte/65535.0, 0, 1). This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.UShort4N">
            <summary>A normalized 4-D unsigned short, expanded to (First byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0). This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.UDec3">
            <summary>3-D unsigned 10 10 10 format expanded to (value, value, value, 1). This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Dec3N">
            <summary>3-D signed 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1). This type is valid for vertex shader version 2.0 or higher</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Float16Two">
            <summary>Two 16-bit floating point values expanded to (value, value, 0, 1)</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Float16Four">
            <summary>Four 16-bit floating point values expanded to (value, value, value, value).</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Unused">
            <summary>The type field in the declaration is unused. This is designed for use with D3DDECLMETHOD_UV and D3DDECLMETHOD_LOOKUPPRESAMPLED</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationType.Software">
            <summary>This vertex element is just for software.</summary>
        </member>
        <member name="T:Purple.Graphics.DeclarationMethod">
            <summary>
            DeclarationMethod -Defines the vertex declaration method. 
            The method tells the tessellator what data needs to be generated from the vertex data during tessellation.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.Default">
            <summary>
            Default value. The tessellator copies the vertex data (spline data for patches) as is, with no additional calculations. 
            When the tessellator is used, this element is interpolated. Otherwise vertex data is copied into the input register. 
            The input and output type can be any value.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.PartialU">
            <summary>
            Computes the tangent at a point on the rectangle or triangle patch in the U direction. 
            The input type can be Float3, Float4, Color, UByte4, Short4. 
            The output type is always float3.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.PartialV">
            <summary>
            Computes the tangent at a point on the rectangle or triangle patch in the V direction. 
            The input type can be Float3, Float4, Color, UByte4, or Short4. 
            The output type is always Float3.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.CrossUV">
            <summary>
            Computes the normal at a point on the rectangle or triangle patch by taking the cross product of the two tangents. 
            The input type can be Float[43], Color, UByte4, or Short4. The output type is always Float3.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.UV">
            <summary>
            Copy out the U, V values at a point on the rectangle or triangle patch. 
            This results in a 2-D float. The input type must be set to Unused. 
            The output data type is always Float2. The input stream and offset are also unused (but must be set to 0).
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.LookUp">
            <summary>
            Look up a displacement map. The input type can be Float2, Float3, or Float4. 
            Only the .x and .y components are used for the texture map lookup. The output type is always Float1. 
            The device must support displacement mapping. For more information about displacement mapping, see Displacement Mapping. 
            This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled. 
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationMethod.LookUpPresampled">
            <summary>
            Look up a presampled displacement map. The input type must be set to Unused. 
            The stream index and the stream offset must be set to 0. The output type for this operation is always Float1. 
            The device must support displacement mapping. For more information about displacement mapping, see Displacement Mapping. 
            This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled. 
            </summary>
        </member>
        <member name="T:Purple.Graphics.DeclarationUsage">
            <summary>
            DeclarationUsage - Identifies the intended use of vertex data.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Position">
            <summary>Position data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.BoneWeights">
            <summary>Blending weight data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.BoneIndices">
            <summary>Blending indices data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Normal">
            <summary>Vertex normal data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.PointSize">
            <summary>Point size data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.TextureCoordinate">
            <summary>Diffuse color data.</summary>		
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Tangent">
            <summary>Vertex tangent data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Binormal">
            <summary>Vertex binormal data.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.TessellateFactor">
            <summary>A single positive floating point value that controls the rate of tessellation. For more information about the data type, see Float1.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.PositionTransformed">
            <summary>Vertex data contains position data that has been transformed and lit.</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Color">
            <summary>Vertex data contains diffuse or specular color. 0 specifies diffuse color and 1 specifies specular color. This usage is for fixed function vertex processing and pixel shaders prior to ps_3_0. </summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Fog">
            <summary>Vertex data contains fog data</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Depth">
            <summary>Vertex data contains depth data</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.Sample">
            <summary>Vertex data contains sampler data</summary>
        </member>
        <member name="F:Purple.Graphics.DeclarationUsage.None">
            <summary>None</summary>
        </member>
        <member name="T:Purple.Graphics.Blend">
            <summary>
            Defines the supported blend factors. 
            </summary>
            <remarks>
            <c>Final color = source color * SourceBlend + destination color * DestinationBlend.</c>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Blend.Zero">
            <summary>Blend factor is (0, 0, 0, 0). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.One">
            <summary>Blend factor is (1, 1, 1, 1). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.SourceColor">
            <summary>Blend factor is (Rs,Gs,Bs,As). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.InvSourceColor">
            <summary>Blend factor is (1–Rs,1–Gs,1–Bs,1–As). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.SourceAlpha">
            <summary>Blend factor is (As,As,As,As). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.InvSourceAlpha">
            <summary>Blend factor is (1–As,1–As,1–As,1–As). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.DestinationAlpha">
            <summary>Blend factor is (Ad,Ad,Ad,Ad). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.InvDestinationAlpha">
            <summary>Blend factor is (1–Ad,1–Ad,1–Ad,1–Ad). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.DestionationColor">
            <summary>Blend factor is (Rd,Gd,Bd,Ad). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.InvDestionationColor">
            <summary>Blend factor is (1–Rd,1–Gd,1–Bd,1–Ad).</summary>
        </member>
        <member name="F:Purple.Graphics.Blend.SourceAlphaSat">
            <summary>Blend factor is (f, f, f, 1); f = min(A, 1 –Ad). </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.BothSourceAlpha">
            <summary>Obsolete. For Microsoft® DirectX® 6.0 and later, you can achieve the same effect by setting the source and destination blend factors to D3DBLEND_SRCALPHA and D3DBLEND_INVSRCALPHA in separate calls. </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.BothInvSourceAlpha">
            <summary>Source blend factor is (1–As,1–As,1–As,1–As), and destination blend factor is (As,As,As,As); the destination blend selection is overridden. This blend mode is supported only for the D3DRS_SRCBLEND render state. </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.BlendFactor">
            <summary>Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if D3DPBLEND_BLENDFACTOR is on. </summary>
        </member>
        <member name="F:Purple.Graphics.Blend.InvBlendFactor">
            <summary>Inverted constant color blending factor used by the frame-buffer blender. This blend mode is supported only if D3DPBLEND_BLENDFACTOR is on.</summary>
        </member>
        <member name="T:Purple.Graphics.StencilOperation">
            <summary>
            Stencil Operations
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.Keep">
            <summary>Do not update the entry in the stencil buffer. This is the default value.</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.Zero">
            <summary>Set the stencil-buffer entry to 0</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.Replace">
            <summary>Replace the stencil-buffer entry with reference value.</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.IncrementClamp">
            <summary>Increment the stencil-buffer entry, clamping to the maximum value.</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.DecrementClamp">
            <summary>Decrement the stencil-buffer entry, clamping to zero.</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.Invert">
            <summary>Invert the bits in the stencil-buffer entry.</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.Increment">
            <summary>Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value.</summary>
        </member>
        <member name="F:Purple.Graphics.StencilOperation.Decrement">
            <summary>Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</summary>
        </member>
        <member name="T:Purple.Graphics.TextureUsage">
            <summary>
            Type of texture
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TextureUsage.Normal">
            <summary>
            use it as a normal texture
            </summary>
        </member>
        <member name="F:Purple.Graphics.TextureUsage.RenderTarget">
            <summary>
            use texture as render target
            </summary>
        </member>
        <member name="F:Purple.Graphics.TextureUsage.DepthStencil">
            <summary>
            use texture as depth/stencil buffer
            </summary>
        </member>
        <member name="F:Purple.Graphics.TextureUsage.Dynamic">
            <summary>
            This is a dynamic texture.
            </summary>
            <remarks>This flag is only valid for Normal textures.</remarks>
        </member>
        <member name="T:Purple.Graphics.ColorChannels">
            <summary>
            The enumeration of all color channels.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.ColorChannels.None">
            <summary>
            No channel.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ColorChannels.Red">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ColorChannels.Green">
            <summary>
            The channel for the green component.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ColorChannels.Blue">
            <summary>
            The channel for the blue component.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ColorChannels.Alpha">
            <summary>
            All channels.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ColorChannels.All">
            <summary>
            The channel for the red component.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Device">
            <summary>
            adds some advanced functionality to IDevice
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Device.Dispose">
            <summary>
            dispose the device
            </summary>
        </member>
        <member name="M:Purple.Graphics.Device.BeginScene">
            <summary>
            starts a new scene for drawing to the control
            </summary>
        </member>
        <member name="M:Purple.Graphics.Device.EndScene">
            <summary>
            end scene
            </summary>
        </member>
        <member name="M:Purple.Graphics.Device.Present">
            <summary>
            present scene to control
            </summary>
        </member>
        <member name="M:Purple.Graphics.Device.Switch(Purple.Graphics.GraphicsSettings)">
            <summary>
            Switches the current graphics mode.
            </summary>
            <param name="settings">The new settings.</param>
        </member>
        <member name="M:Purple.Graphics.Device.Reset">
            <summary>
            reset the device
            </summary>
        </member>
        <member name="M:Purple.Graphics.Device.Clear(Purple.Graphics.ClearFlags)">
            <summary>
            Clears the back buffers.
            </summary>
            <param name="clearFlags">Flags that determine which buffers should be cleared.</param>
        </member>
        <member name="M:Purple.Graphics.Device.CreateVertexDeclaration(Purple.Graphics.VertexElement[])">
            <summary>
            creates an vertex declaration object
            </summary>
        </member>
        <member name="M:Purple.Graphics.Device.SetTexture(System.Int32,Purple.Graphics.Core.ITexture)">
            <summary>
            sets a texture for the rendered primitives
            </summary>
            <param name="stage">to set texture for</param>
            <param name="tex">texture to use</param>
        </member>
        <member name="M:Purple.Graphics.Device.Draw(System.Int32,System.Int32)">
            <summary>
            renders the triangles defined by the vertexBuffer
            </summary>
            <param name="startVertex">vertex of first primitive</param>
            <param name="primitiveCount">number of primitives to render</param>
        </member>
        <member name="M:Purple.Graphics.Device.DrawIndexed(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            renders the triangles defined by the indexBuffer
            </summary>
            <param name="baseIndex">realIndex = Index + baseIndex </param>	
            <param name="minVertex">min vertexBuffer index</param>
            <param name="numVertices">num vertexBuffer indices</param>
            <param name="startIndex">index of indexBuffer to start with</param>		
            <param name="primitiveCount">Number of primitives to render</param>
        </member>
        <member name="M:Purple.Graphics.Device.DisposeManagedResources">
            <summary>
            Disposes all managed resources;
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.TrianglesRendered">
            <summary>
            TrianglesRendered in the last frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Control">
            <summary>
            Returns the current target control of the device.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.PixelShaderConstants">
            <summary>
            Get pixel shader constant registers.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.VertexShaderConstants">
            <summary>
            Get vertex shader constant registers.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.RenderStates">
            <summary>
            Get the render states object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Viewport">
            <summary>
            access to the viewport
            viewport is overwritten on reset, RenderTarget, ..
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Instance">
            <summary>
            returns currently used device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.IsLost">
            <summary>
            is device currently lost (try reset)
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.DisplayModes">
            <summary>
            Returns a list of <see cref="T:Purple.Graphics.DisplayMode"/> objects.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.CurrentDisplayMode">
            <summary>
            Returns the current displaymode.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.PlugIn">
            <summary>
            OpenGl, DirectX IDevice Plugin
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Name">
            <summary>
            name of device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Capabilities">
            <summary>
            returns capabilities of this device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Description">
            <summary>
            description of device
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.BackBuffer">
            <summary>
            The backBuffer used for rendering the scene to.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.DepthStencilBuffer">
            <summary>
            The combined depth and stencil buffer surface.
            </summary>
            <remarks>
            The property may return null if no depth and no stencil buffer is used.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Device.RenderTarget">
            <summary>
            texture to render to
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Resolution">
            <summary>
            get the resolution used for the internal buffers
            should optimally be the same as the output size
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.Transformations">
            <summary>
            get access to transformation matrices
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.SamplerStates">
            <summary>
            get access to samplerStates
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.TextureStages">
            <summary>
            Access to the textures.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.IndexStream">
            <summary>
            virtual indexBuffer to set for rendering
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.VertexUnit">
            <summary>
            VertexUnit to set for rendering
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.VertexShader">
            <summary>
            current active vertex shader
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.ShaderCompiler">
            <summary>
            returns the shader compiler
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.HLSLShaderCompiler">
            <summary>
            Returns the shader compiler for the high level shader language.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.ShaderConstants">
            <summary>
            returns the shader consant table
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.PixelShader">
            <summary>
            current active pixel shader
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.ClearColor">
            <summary>
            Color for clearing the frame buffer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.ClearDepth">
            <summary>
            Value to use for clearing the z-Buffer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Device.ClearStencil">
            <summary>
            The clear value for the stencil value;
            </summary>
        </member>
        <member name="T:Purple.Graphics.DisplayMode">
            <summary>
            The struct defining a certain DisplayMode.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.DisplayMode.Width">
            <summary>
            Width of screen in pixel.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DisplayMode.Height">
            <summary>
            Height of screen in pixel.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DisplayMode.Format">
            <summary>
            The color format.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DisplayMode.RefreshRate">
            <summary>
            Refresh rate of screen.
            </summary>
        </member>
        <member name="M:Purple.Graphics.DisplayMode.#ctor(System.Int32,System.Int32,Purple.Graphics.Format,System.Int32)">
            <summary>
            Create a new DisplayMode object.
            </summary>
            <param name="width">Width of screen in pixel.</param>
            <param name="height">Height of screen in pixel.</param>
            <param name="format">Color format.</param>
            <param name="refreshRate">Refresh rate of screen.</param>
        </member>
        <member name="M:Purple.Graphics.DisplayMode.ToString">
            <summary> 
            Returns the Displaymode as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.DisplayMode.HasAspectRatio(System.Int32,System.Int32)">
            <summary>
            Returns true if the current mode has the given aspect ratio.
            </summary>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>True if the current mode has the given aspect ratio.</returns>
        </member>
        <member name="P:Purple.Graphics.DisplayMode.BitsPerPixel">
            <summary>
            Returns the number of BitsPerPixel for the current DisplayMode.
            </summary>
        </member>
        <member name="P:Purple.Graphics.DisplayMode.AspectRatio">
            <summary>
            The aspect ratio of this DisplayMode.
            </summary>
        </member>
        <member name="P:Purple.Graphics.DisplayMode.None">
            <summary>
            An invalid DisplayMode. May be used to express that no DisplayMode was found or whatever.
            </summary>
        </member>
        <member name="T:Purple.Graphics.DisplayModes">
            <summary>
            A collection for storing <see cref="T:Purple.Graphics.DisplayMode"/> objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.DisplayModes.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Purple.Graphics.DisplayModes"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.DisplayModes.Find(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns a suiting <see cref="T:Purple.Graphics.DisplayMode"/> or null if not supported 
            by device.
            </summary>
            <param name="width">Width in pixels of the desired mode.</param>
            <param name="height">Height in pixels of the desired mode.</param>
            <param name="bpp">Color depth in bits per pixel of the desired mode.</param>
            <param name="refreshRate">The desired refresh rate. If no such refresh rate was found but a 
            displayMode exists, another displayMode is returned. A refreshRate of 0 means the refresh rate 
            doesn't matter.</param>
            <returns>A suiting <see cref="T:Purple.Graphics.DisplayMode"/> or null if not supported 
            by device.</returns>
        </member>
        <member name="M:Purple.Graphics.DisplayModes.Add(Purple.Graphics.DisplayMode)">
            <summary>
            Adds a new <see cref="T:Purple.Graphics.DisplayMode"/> to the list.
            </summary>
            <param name="displayMode">Mode to add.</param>
        </member>
        <member name="M:Purple.Graphics.DisplayModes.HighestRefreshRates">
            <summary>
            Just keeps the displaymodes with the highest frameRates.
            </summary>
        </member>
        <member name="P:Purple.Graphics.DisplayModes.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.DisplayMode"/> for a certain index.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Edge">
            <summary>
            Structure for storing an edge (two indices) and the adjacent faces.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Edge.A">
            <summary>
            First index.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Edge.B">
            <summary>
            Second index.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Edge.FaceA">
            <summary>
            The first adjacent face.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Edge.FaceB">
            <summary>
            The second adjacent face.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Edge.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new edge.
            </summary>
            <param name="index1">First index.</param>
            <param name="index2">Second index.</param>
            <param name="face1">The first adjacent face.</param>
            <param name="face2">The second adjacent face.</param>
        </member>
        <member name="M:Purple.Graphics.Edge.IsSame(Purple.Graphics.Edge,Purple.Graphics.Edge)">
            <summary>
            test if the two edges are the same
            </summary>
            <param name="edge1">first edge</param>
            <param name="edge2">second edge</param>
        </member>
        <member name="M:Purple.Graphics.Edge.GetHashCode">
            <summary>
            new hashcode function for Edge structure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.Edge.Equals(System.Object)">
            <summary>
            new equals function for Edge structure
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Graphics.SimpleEdge">
            <summary>
            Structure for storing an edge (two indices).
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.SimpleEdge.A">
            <summary>
            First index.
            </summary>
        </member>
        <member name="F:Purple.Graphics.SimpleEdge.B">
            <summary>
            Second index.
            </summary>
        </member>
        <member name="M:Purple.Graphics.SimpleEdge.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new edge.
            </summary>
            <param name="A">First index.</param>
            <param name="B">Second index.</param>
        </member>
        <member name="M:Purple.Graphics.SimpleEdge.GetHashCode">
            <summary>
            new hashcode function for Edge structure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.SimpleEdge.Equals(System.Object)">
            <summary>
            new equals function for Edge structure
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Graphics.Effect.EffectCompiler">
            <summary>
            The EffectCompiler class.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.#ctor">
            <summary>
            Creates a new instance of a Purple# <see cref="T:Purple.Graphics.Effect.EffectCompiler"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.LoadCompile(System.String,System.String)">
            <summary>
            Compiles an effect from the source or loads a preCompiled file.
            </summary>
            <param name="source">The file path to the effect source.</param>
            <param name="preCompiled">The file path to the preCompiled effect.</param>
            <returns>The compiled effect.</returns>
            <remarks>
            This method tries to load an effect from a preCompiled effect file.
            If the file doesn't exist or source file is newer, it precompiles the effect, 
            stores it as preCompiled file if possible.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.Load(System.String)">
            <summary>
            Loads an <see cref="T:Purple.Graphics.Effect.IEffect"/> from a file.
            </summary>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.EffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.Load(System.IO.Stream)">
            <summary>
            Loads an <see cref="T:Purple.Graphics.Effect.IEffect"/> from a precompiled stream.
            </summary>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.EffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
            <param name="stream">The stream containing the effect.</param>
            <returns>The compiled effect.</returns>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.Compile(System.String)">
            <summary>
            Compiles an <see cref="T:Purple.Graphics.Effect.IEffect"/> from a file.
            </summary>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.EffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.Compile(System.IO.Stream)">
            <summary>
            Compiles an <see cref="T:Purple.Graphics.Effect.IEffect"/> from a stream.
            </summary>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.EffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
            <param name="stream">The stream containing the effect.</param>
            <returns>The compiled effect.</returns>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.PreCompile(System.String)">
            <summary>
            Creates a precompiled effect from its source.
            </summary>
            <param name="fileName">File containing the effect source.</param>
            <returns>The preompiled bytecode stream.</returns>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.EffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.EffectCompiler.PreCompile(System.IO.Stream)">
            <summary>
            Creates a precompiled effect from its source.
            </summary>
            <param name="stream">The source of the effect.</param>
            <returns>The preompiled bytecode stream.</returns>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.EffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Effect.EffectCompiler.CompilationError">
            <summary>
            Contains the error string of the last compilation.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.EffectCompiler.Instance">
            <summary>
            Returns the default instance of the <see cref="T:Purple.Graphics.Effect.EffectCompiler"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.EffectCompiler.FileSystem">
            <summary>
            The contained <see cref="P:Purple.Graphics.Effect.EffectCompiler.FileSystem"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.EffectCompiler.PreProcesser">
            <summary>
            The used preProcessor;
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.EffectCompiler.Current">
            <summary>
            The effect compiler plugIn to use.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.Effects">
            <summary>
            A typed collection for effects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.Effects.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.Effect.Effects"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.Effects.Add(Purple.Graphics.Effect.IEffect)">
            <summary>
            Adds a <see cref="T:Purple.Graphics.Effect.IEffect"/> object to the list.
            </summary>
            <param name="state">Effect to add.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Effects.Remove(Purple.Graphics.Effect.IEffect)">
            <summary>
            Removes an <see cref="T:Purple.Graphics.Effect.IEffect"/> from the list.
            </summary>
            <param name="state">Effect to remove.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Effects.Clear">
            <summary>
            Clears the effect list.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Effects.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Effect.IEffect"/> with a certain index.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.IEffect">
            <summary>
            An abstract interface for a Purple# effect.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            <para>An effect describes the way a certain mesh is rendered. 
            It may consists of several techniques, where each technique may 
            contain several render passes.</para>
            </remarks>
        </member>
        <member name="T:Purple.IMultiPassApply">
            <summary>
            Abstract interface for a multi pass apply.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
              <para>Last Update: 0.7</para>
            </remarks>
            <example>
            // set common data for all objects here that isn't already in the effect
            int passes = effect.Begin()
            foreach pass {
              effect.BeginPass(pass) 
              foreach object {
                // set the instance data for the current draw call
                effect.Commitchanges()  
                // call draws to draw the object
               }
              effect.EndPass()
            }
            effect.End()
            </example>
        </member>
        <member name="M:Purple.IMultiPassApply.Begin">
            <summary>
            Starts with applying and returns the number of passes.
            </summary>
        </member>
        <member name="M:Purple.IMultiPassApply.BeginPass(System.Int32)">
            <summary>
            Applies a certain pass.
            </summary>
            <param name="pass">The pass to apply state for.</param>
        </member>
        <member name="M:Purple.IMultiPassApply.CommitChanges">
            <summary>
            Commit changes that were done inside a pass.
            </summary>
        </member>
        <member name="M:Purple.IMultiPassApply.EndPass">
            <summary>
            Ends a certain pass.
            </summary>
        </member>
        <member name="M:Purple.IMultiPassApply.End">
            <summary>
            Ends a multi pass effect.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.IEffect.IsTechniqueValid(System.Int32)">
            <summary>
            Tests it the technique is valid.
            </summary>
            <param name="techniqueIndex">The index of the technique to test if valid.</param>
            <returns>True if the technique is valid.</returns>
        </member>
        <member name="P:Purple.Graphics.Effect.IEffect.Name">
            <summary>
            Name of the <see cref="T:Purple.Graphics.Effect.IEffect"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.IEffect.Techniques">
            <summary>
            The list of contained <see cref="P:Purple.Graphics.Effect.IEffect.Technique"/>s.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.IEffect.TechniqueIndex">
            <summary>
            Access to the index of the current technique.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.IEffect.Technique">
            <summary>
            Returns the current technique.
            </summary>
            <remarks>
            The technique can be set via the <c>TechniqueIndex</c> property.
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Effect.Effect">
            <summary>
            The Effect class contains some helper methods for working with effects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.Effect.Render(Purple.Graphics.Effect.IEffect,Purple.Graphics.IRenderAble)">
            <summary>
            Render a IRenderAble object with a certain effect.
            </summary>
            <param name="effect">The effect to use.</param>
            <param name="renderAble">The object to render.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Effect.Render(Purple.Graphics.Effect.IEffect,Purple.Graphics.IRenderAble[])">
            <summary>
            Renders IRenderAble object with a certain effect.
            </summary>
            <param name="effect">The effect to use.</param>
            <param name="renderAbles">The IRenderAble objects.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Effect.Render(Purple.Graphics.Effect.IEffect,System.Collections.IList)">
            <summary>
            Renders IRenderAble object with a certain effect.
            </summary>
            <param name="effect">The effect to use.</param>
            <param name="renderAbles">The IRenderAble objects.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Effect.Render(Purple.Graphics.Effect.IEffect,Purple.Graphics.RenderHandler)">
            <summary>
            Calls the RenderHandler for every pass to render the IRenderAble objects.
            </summary>
            <param name="effect">The used effect.</param>
            <param name="handle">The handler that is called for every pass.</param>
        </member>
        <member name="T:Purple.Graphics.Effect.IEffectCompiler">
            <summary>
            Abstract interface for an effect compiler ...
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.IEffectCompiler.Compile(System.IO.Stream)">
            <summary>
            Compiles an <see cref="T:Purple.Graphics.Effect.IEffect"/> from a stream containing the effect source or the 
            precompiled bytecode.
            </summary>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.IEffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.IEffectCompiler.Load(System.IO.Stream)">
            <summary>
            Loads an <see cref="T:Purple.Graphics.Effect.IEffect"/> from a precompiled stream.
            </summary>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.IEffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
            <param name="stream">The stream containing the effect.</param>
            <returns>The compiled effect.</returns>
        </member>
        <member name="M:Purple.Graphics.Effect.IEffectCompiler.PreCompile(System.IO.Stream)">
            <summary>
            Creates a precompiled effect from its source.
            </summary>
            <param name="stream">The source of the effect.</param>
            <returns>The preompiled bytecode stream.</returns>
            <remarks>
            If the compilation fails, the result is null and the <see cref="P:Purple.Graphics.Effect.IEffectCompiler.CompilationError"/> 
            flag contains the error message.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Effect.IEffectCompiler.CompilationError">
            <summary>
            Contains the error string if compilation failed or null.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.Pass">
            <summary>
            Class for an effect pass.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            <para>An <see cref="T:Purple.Graphics.Effect.Pass"/> represents one render pass of a 
            certain <see cref="T:Purple.Graphics.Effect.Technique"/>. While simple effects just need 
            one render pass, more complex effects (especially on older hardware) 
            need multiple render passes.</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.Pass.#ctor(System.String)">
            <summary>
            Creates a new pass.
            </summary>
            <param name="name">Name of the pass.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Pass.#ctor(System.String,Purple.Graphics.Core.IVertexShader,Purple.Graphics.Core.IPixelShader)">
            <summary>
            Creates a new pass with a vertex and a pixel shader.
            </summary>
            <param name="name">Name of the pass.</param>
            <param name="vertexShader">VertexShader to use for pass.</param>
            <param name="pixelShader">PixelShader to use for pass.</param>
        </member>
        <member name="P:Purple.Graphics.Effect.Pass.Name">
            <summary>
            Name of the current pass.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Pass.Annotations">
            <summary>
            Annotations for current pass.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Pass.VertexShader">
            <summary>
            The vertex shader that is used for the current pass.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Pass.PixelShader">
            <summary>
            The pixelShader to use for the current pass.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.Passes">
            <summary>
            This class represents a collection of <see cref="T:Purple.Graphics.Effect.Pass"/>es.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.Passes.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Purple.Graphics.Effect.Passes"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.Passes.Add(Purple.Graphics.Effect.Pass)">
            <summary>
            Addes a new <see cref="T:Purple.Graphics.Effect.Pass"/> to the list.
            </summary>
            <param name="pass">Pass to add.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Passes.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a collection of <see cref="T:Purple.Graphics.Effect.Pass"/> objects.
            </summary>
            <param name="collection">Collection containing passes.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Passes.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.Effect.Passes.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.Effect.Passes.Item(System.Int32)">
            <summary>
            Return <see cref="T:Purple.Graphics.Effect.Pass"/> pass by index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Passes.Item(System.String)">
            <summary>
            Return <see cref="T:Purple.Graphics.Effect.Pass"/> by name.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Passes.Count">
            <summary>
            Returns the number of passes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Passes.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Passes.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.PreProcessor">
            <summary>
            The preprocessor for effect files.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.PreProcessor.#ctor">
            <summary>
            Creates a new preprocessor object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.PreProcessor.Process(System.String)">
            <summary>
            Processes a certain file.
            </summary>
            <param name="fileName">Name of file to process.</param>
            <returns>The output stream.</returns>
        </member>
        <member name="M:Purple.Graphics.Effect.PreProcessor.Process(System.IO.Stream,System.String)">
            <summary>
            Processes a certain stream.
            </summary>
            <param name="input">The stream containing the input data.</param>
            <param name="fileName">The fileName of the stream or null - for debugging purposes.</param>
            <returns>The output stream.</returns>
        </member>
        <member name="M:Purple.Graphics.Effect.PreProcessor.Process(System.IO.Stream)">
            <summary>
            Processes a certain stream.
            </summary>
            <param name="input">The stream containing the input data.</param>
            <returns>The output stream.</returns>
        </member>
        <member name="P:Purple.Graphics.Effect.PreProcessor.FileSystem">
            <summary>
            The fileSystem to use for the preprocessor.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.PreProcessor.SysFileSystem">
            <summary>
            The fileSystem that is used for system includes.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.ShaderEffect">
            <summary>
            A implementation of an <see cref="T:Purple.Graphics.Effect.IEffect"/> that is built 
            by a vertex and a pixel shader.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            <para>An effect describes the way a certain mesh is rendered. 
            It may consists of several techniques, where each technique may 
            contain several render passes.</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.UploadConstants">
            <summary>
            Upload the shader constants to the graphics card.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.IsTechniqueValid(System.Int32)">
            <summary>
            Tests it the technique is valid.
            </summary>
            <param name="techniqueIndex">The index of the technique to test if valid.</param>
            <returns>True if the technique is valid.</returns>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Effect.ShaderEffect"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.#ctor(Purple.Graphics.Core.IVertexShader,Purple.Graphics.Core.IPixelShader)">
            <summary>
            Creates an effect with on technique and one pass.
            </summary>
            <param name="vs">VertexShader to use.</param>
            <param name="ps">PixelShader to use.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.Begin">
            <summary>
            Starts with applying and returns the number of passes.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.BeginPass(System.Int32)">
            <summary>
            Applies a certain pass.
            </summary>
            <param name="pass">The pass to apply state for.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.CommitChanges">
            <summary>
            Commit changes that were done inside a pass.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.EndPass">
            <summary>
            Ends a certain pass.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.End">
            <summary>
            Ends a multi pass effect.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.ShaderEffect.Dispose">
            <summary>
            Disposes the effect.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.ShaderEffect.Name">
            <summary>
            Name of the <see cref="T:Purple.Graphics.Effect.IEffect"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.ShaderEffect.Techniques">
            <summary>
            The list of contained <see cref="P:Purple.Graphics.Effect.ShaderEffect.Technique"/>s.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.ShaderEffect.TechniqueIndex">
            <summary>
            Access to the index of the current technique.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.ShaderEffect.Technique">
            <summary>
            Returns the current technique.
            </summary>
            <remarks>
            The technique can be set via the <c>TechniqueIndex</c> property.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Effect.ShaderEffect.Constants">
            <summary>
            Collection of shader constants.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.Technique">
            <summary>
            Technique class.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            <para>A technique implements a certain effect for one certain 
            target hardware. This allows to put more features into the same 
            effect for newer hardware, while it also works for older hardware 
            (maybe not that nice, and with more required passes).</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.Technique.#ctor(System.String)">
            <summary>
            Creates a new technique.
            </summary>
            <param name="name">Name of the technique.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Technique.#ctor(System.String,Purple.Graphics.Effect.Pass)">
            <summary>
            Creates a new technique.
            </summary>
            <param name="name">Name of the technique.</param>
            <param name="pass">The pass to add.</param>
        </member>
        <member name="P:Purple.Graphics.Effect.Technique.Name">
            <summary>
            Name of technique.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Technique.Annotations">
            <summary>
            List of annotations.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Technique.Passes">
            <summary>
            List of passes.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Effect.Techniques">
            <summary>
            This class represents a collection of <see cref="T:Purple.Graphics.Effect.Technique"/>s.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Effect.Techniques.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Purple.Graphics.Effect.Techniques"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Effect.Techniques.Add(Purple.Graphics.Effect.Technique)">
            <summary>
            Adds an <see cref="T:Purple.Graphics.Effect.Technique"/> to the list.
            </summary>
            <param name="tech">Technique to add.</param>
        </member>
        <member name="M:Purple.Graphics.Effect.Techniques.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.Effect.Techniques.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.Effect.Techniques.Item(System.Int32)">
            <summary>
            Return technique by index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Techniques.Item(System.String)">
            <summary>
            Return technique by name.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Techniques.Count">
            <summary>
            Return the number of techniques.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Techniques.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.Effect.Techniques.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.AnimationClip">
            <summary>
            This class contains information about a certain animation clip.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="T:Purple.Player.Clip">
            <summary>
            A simple clip.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Player.Clip.length">
            <summary>
            The duration of the clip.
            </summary>
        </member>
        <member name="M:Purple.Player.Clip.#ctor">
            <summary>
            Parameterless constructor for serialization.
            </summary>
        </member>
        <member name="M:Purple.Player.Clip.#ctor(System.String,System.Single,System.Boolean)">
            <summary>
            Creates a new clip.
            </summary>
            <param name="name">Name of the clip.</param>
            <param name="length">Length of the clip in seconds.</param>
            <param name="looping">Flag that indicates if the clip should be looped.</param>
        </member>
        <member name="P:Purple.Player.Clip.Name">
            <summary>
            The name of the clip.
            </summary>
        </member>
        <member name="P:Purple.Player.Clip.Length">
            <summary>
            Returns the duration of the clip.
            </summary>
        </member>
        <member name="P:Purple.Player.Clip.Looping">
            <summary>
            Returns true if the clip should be looped.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationClip.#ctor">
            <summary>
            Parameterless constructor for serialization.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationClip.#ctor(System.String,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a new clip.
            </summary>
            <param name="name">The name of the clip.</param>
            <param name="from">The start frame.</param>
            <param name="to">The end frame of the clip, that isn't played anymore.</param>
            <param name="length">Length of the clip in seconds.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationClip.#ctor(System.String,System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Creates a new clip.
            </summary>
            <param name="name">The name of the clip.</param>
            <param name="from">The start frame.</param>
            <param name="to">The end frame of the clip, that isn't played anymore.</param>
            <param name="length">Length of the clip in seconds.</param>
            <param name="looping">Flag that indicates if clip should be looped.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationClip.CalcBlendParameters(System.Single,System.Int32@,System.Int32@,System.Single@)">
            <summary>
            Calculates the blend parameters for blending the animation.
            </summary>
            <param name="clipTime">Thie current clip time.</param>
            <param name="frameIndex">The current frameIndex.</param>
            <param name="nextFrameIndex">The next frameIndex.</param>
            <param name="blendFactor">The blend factor between the two indices.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.AnimationClip.CalcTime(System.Int32)">
            <summary>
            Calculates the time for a given frame.
            </summary>
            <param name="frameIndex">The absolute frame index.</param>
            <returns>The time for the given frameIndex.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationClip.From">
            <summary>
            The start frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationClip.To">
            <summary>
            The last frame of the clip.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.AnimationClip.Count">
            <summary>
            Number of frames.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.BlendMesh">
            <summary>
            This class handles blended meshes.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            There are many ways to improve the performance of this class. 
            Currently streams like TextureStreams are stored for every mesh, 
            I don't check if the tempMesh can be reused, DynamicMesh, ...
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Geometry.IAnimatedMesh">
            <summary>
            Interface for an object containing an animated mesh.
            </summary>
        </member>
        <member name="T:Purple.Graphics.IRenderAble">
            <summary>
            An abstract interface for a renderable object.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IRenderAble.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the object.
            </summary>
            <param name="effect">The current effect that is used for rendering.</param>
        </member>
        <member name="T:Purple.Graphics.Lighting.IShadowCaster">
            <summary>
            An abstract interface  for a shadow caster.
            </summary>
            <remarks>
              <para>Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.IShadowCaster.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="P:Purple.Graphics.Lighting.IShadowCaster.ShadowImplementation">
            <summary>
            The shadow implementation of the current shadow caster.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.IShadowCaster.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.IAnimatedMesh.Update">
            <summary>
            Updates the mesh with the current animation.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.IAnimatedMesh.Textures">
            <summary>
            The assosicated textures.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.IAnimatedMesh.Current">
            <summary>
            Returns the current mesh.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.#ctor(Purple.Graphics.Geometry.Mesh[])">
            <summary>
            Creates a new BlendMesh object from a collection of meshes.
            </summary>
            <param name="meshes">The meshes to use.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.#ctor(System.Int32)">
            <summary>
            Creates a new BlendMesh.
            </summary>
            <param name="frameCount">Number of frames of the BlendMesh.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.Update">
            <summary>
            Updates the blend mesh.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the object.
            </summary>
            <param name="effect">The current effect that is used for rendering.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.Blend(System.Int32,System.Int32,System.Single)">
            <summary>
            Blends two meshes.
            </summary>
            <param name="fromIndex">The index of the mesh to blend from.</param>
            <param name="toIndex">The index of the mesh to blend to.</param>
            <param name="factor">The blend factor.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.Blend(System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Blends two meshes.
            </summary>
            <param name="fromIndexA">The index of the first mesh to blend from.</param>
            <param name="toIndexA">The index of the first mesh to blend to.</param>
            <param name="factorA">The blend factor of the first mesh.</param>
            <param name="fromIndexB">The index of the second mesh to blend from.</param>
            <param name="toIndexB">The index of the second mesh to blend to.</param>
            <param name="factorB">The blend factor of the second mesh.</param>
            <param name="factor">The blend factor between meshA and meshB.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BlendMesh.Fill(System.Int32)">
            <summary>
            Fills the temporary mesh with the mesh at a certain index.
            </summary>
            <param name="index">Index of source mesh.</param>
            <returns>The temporary mesh.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.Meshes">
            <summary>
            The meshes used for blending.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.Frames">
            <summary>
            Returns the number of frames.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.Current">
            <summary>
            Returns the current mesh.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.Purple#Graphics#Geometry#IAnimatedMesh#Textures">
            <summary>
            The assosicated textures.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.Player">
            <summary>
            The player for the current BlendMesh.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.ShadowImplementation">
            <summary>
            The shadow implementation of the current shadow caster.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BlendMesh.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.BoneArray">
            <summary>
            a bone array for hardware skinning, that is directly assigned to
            the constant shader list
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArray.#ctor(System.Int32)">
            <summary>
            creates an instance of a bone array with fixed size
            used for hardware vertex skinning
            the bone array is directly copied to the constant shader list 
            </summary>
            <param name="size">size of the bone array</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArray.GetEnumerator">
            <summary>
            returns the enumerator for the array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArray.Contains(System.Int32)">
            <summary>
            tests if a certain bone is already contained by the array
            </summary>
            <param name="bone">bone to test for</param>
            <returns>true if bone is contained, false otherwise</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArray.GetArrayIndex(System.Int32)">
            <summary>
            returns the array index of a certain bone
            </summary>
            <param name="bone">bone to get array index for</param>
            <returns>the array index or -1 if not found</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArray.Add(System.Int32)">
            <summary>
            adds a certain bone to the array
            </summary>
            <param name="bone"></param>
        </member>
        <member name="P:Purple.Graphics.Geometry.BoneArray.Full">
            <summary>
            tests if the bone array is full
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.BoneArrays">
            <summary>
            Collection of bone arrays
            can't await generics
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArrays.#ctor">
            <summary>
            creates an instance of an sceneNodes object
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArrays.Add(Purple.Graphics.Geometry.BoneArray)">
            <summary>
            adds a BoneArray to the list
            </summary>
            <param name="boneArray">boneArray to add</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArrays.Remove(Purple.Graphics.Geometry.BoneArray)">
            <summary>
            remove a boneArray from the list
            remove doesn't preserves the order right now
            </summary>
            <param name="boneArray">boneArray to remove</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArrays.Clear">
            <summary>
            clears the collection
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArrays.Resize(System.Int32)">
            <summary>
            resizes the collection
            </summary>
            <param name="size">new size</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.BoneArrays.GetEnumerator">
            <summary>
            get enumerator for enumeration over parameters
            </summary>
            <returns>IEnumerator object</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.BoneArrays.Count">
            <summary>
            returns the number of items in the collection
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BoneArrays.Item(System.Int32)">
            <summary>
            get the scene node with the specified index
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BoneArrays.First">
            <summary>
            returns the first element of the list
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.BoneArrays.Last">
            <summary>
            returns the last element of the list
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.SkeletonFrame">
            <summary>
            One frame of the skeleton.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last change: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Geometry.SkeletonFrame.JointArray">
            <summary>
            Array of joints for this frame.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.SkeletonFrame.#ctor(Purple.Math.Matrix4[])">
            <summary>
            Create a new instance of a SkeletonFrame.
            </summary>
            <param name="jointArray">Joints of the skeleton for this frame.</param>
        </member>
        <member name="T:Purple.Graphics.Geometry.Channel">
            <summary>
            A channel is a certain jointset of a skeleton, which can be 
            animated seperately.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Last Update: 0.7</para>
            Replaces the old SkeletonAnimation class.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Channel.#ctor(Purple.Graphics.Geometry.SkeletonFrame[],System.Int32[],System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:Purple.Graphics.Geometry.Channel"/>.
            </summary>
            <param name="frames">Stores the animated frames of the skeleton.</param>
            <param name="bones">Mapping of the channel bones to the original bones.</param>
            <param name="frameRate">The default frameRate of the animation.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Channel.#ctor(Purple.Graphics.Geometry.SkeletonFrame[],System.Int32[],System.Int32,Purple.Graphics.Geometry.AnimationPlayer)">
            <summary>
            Creates an instance of a <see cref="T:Purple.Graphics.Geometry.Channel"/>.
            </summary>
            <param name="frames">Stores the animated frames of the skeleton.</param>
            <param name="bones">Mapping of the channel bones to the original bones.</param>
            <param name="frameRate">The default frameRate of the animation.</param>
            <param name="player">The animation player to use for this channel.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Channel.Blend(Purple.Math.Matrix4[],System.Int32,System.Int32,System.Single)">
            <summary>
            Interpolates two frames of a channel and stores the result into the target array.
            </summary>
            <param name="target">The target array.</param>
            <param name="from">The first frame.</param>
            <param name="to">The second frame.</param>
            <param name="factor">The interpolation factor in the range of [0,1].</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Channel.Blend(Purple.Math.Matrix4[],System.Int32,System.Int32,System.Single,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            CrossInterpolates between two clips. 
            </summary>
            <param name="target">The target array.</param>
            <param name="fromA">The first frame of clip A.</param>
            <param name="toA">The target frame of clip A.</param>
            <param name="factorA">The time factor between fromA and toA.</param>
            <param name="fromB">The first frame of clip B.</param>
            <param name="toB">The target frame of clipB.</param>
            <param name="factorB">The time factor between fromB and toB.</param>
            <param name="factor">The interpolation factor between clip A and B.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Channel.Update(Purple.Math.Matrix4[])">
            <summary>
            Updates the cue target array with the animated matrices.
            </summary>
            <param name="target">The target array.</param>
        </member>
        <member name="P:Purple.Graphics.Geometry.Channel.FrameRate">
            <summary>
            The native frameRate of the stored skeleton frames.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Channel.Bones">
            <summary>
            The mapping of the channel bones to the original bones.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Channel.Frames">
            <summary>
            Stores the animated frames of the skeleton.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Channel.Player">
            <summary>
            The player for animating the skeleton.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.IAnimationImporter">
            <summary>
            Abstract interface for importing an animation.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.IImporter">
            <summary>
            Abstract interface for a simple importer.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IImporter.Import(System.String)">
            <summary>
            import from file
            </summary>
            <param name="fileName">file to import data from</param>
        </member>
        <member name="M:Purple.Graphics.IImporter.Import(System.IO.Stream)">
            <summary>
            import from stream
            </summary>
            <param name="stream">stream to import data from</param>
        </member>
        <member name="P:Purple.Graphics.Geometry.IAnimationImporter.Channels">
            <summary>
            Retturns the animation channels.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.IMeshImporter">
            <summary>
            Abstract interface for importing a mesh importer.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Geometry.IMeshImporter.Mesh">
            <summary>
            get the mesh
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.IModelImporter">
            <summary>
            Abstract interface for importing a model importer.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Geometry.IModelImporter.Model">
            <summary>
            get the mesh
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter">
            <summary>
            Imports an animation from a binary file.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Update: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.#ctor(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
            <param name="stream">Stream containing animation.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.Import(System.String)">
            <summary>
            Import skeletal animation data from a file.
            </summary>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.Import(System.IO.Stream)">
            <summary>
            Import an animation from a stream.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.Channels">
            <summary>
            Retturns the animation channels.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter.FileSystem">
            <summary>
            The <see cref="T:Purple.IO.IFileSystem"/> that is used by the <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.BinaryModelImporter">
            <summary>
            Imports a mesh from a binary file.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
              <para>Update: 0.5</para>
            The binary format is much smaller and can be loaded much faster than 
            the xml based format.
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Geometry.ISkeletonImporter">
            <summary>
            abstract interface for importing a skeleton (weights and joints in binding pose)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Geometry.ISkeletonImporter.Skeleton">
            <summary>
            get the skeleton
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryModelImporter.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Geometry.Importer.BinaryModelImporter"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryModelImporter.#ctor(System.String)">
            <summary>
            Imports an <see cref="T:Purple.Graphics.Geometry.Mesh"/>.
            </summary>
            <param name="fileName">File to load mesh from.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryModelImporter.#ctor(System.IO.Stream)">
            <summary>
            Imports an <see cref="T:Purple.Graphics.Geometry.Mesh"/>.
            </summary>
            <param name="stream">Stream to import mesh from.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryModelImporter.Import(System.String)">
            <summary>
            Import a mesh from a file.
            </summary>
            <param name="fileName">Name of file.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.BinaryModelImporter.Import(System.IO.Stream)">
            <summary>
            Import a mesh from a stream.
            </summary>
            <param name="stream">Stream containing mesh data.</param>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.BinaryModelImporter.Model">
            <summary>
            Returns imported <see cref="P:Purple.Graphics.Geometry.Importer.BinaryModelImporter.Model"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.BinaryModelImporter.Skeleton">
            <summary>
            Returns the imported <see cref="P:Purple.Graphics.Geometry.Importer.BinaryModelImporter.Skeleton"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.BinaryModelImporter.FileSystem">
            <summary>
            The <see cref="T:Purple.IO.IFileSystem"/> that is used by the <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.BinaryModelImporter.HardwareSkinning">
            <summary>
            Flag that indicates if importer should create Software or Hardware streams 
            for skinning.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.Ident">
            <summary>Magic number must be equal to "IPD2".</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.Version">
            <summary>Md2 version must be equal to 8.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.SkinWidth">
            <summary>Width of the texture.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.SkinHeight">
            <summary>Height of the texture.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.FrameSize">
            <summary>Size of one frame in bytes.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.NumSkins">
            <summary>Number of textures.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.NumVertices">
            <summary>Number of vertices.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.NumTextureCoordinates">
            <summary>Number of texture coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.NumTris">
            <summary>Number of triangles.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.NumGLCommands">
            <summary>Number of openGL commands.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.NumFrames">
            <summary>Total number of frames.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.OffsetSkins">
            <summary>Offset to skin names (64 bytes each).</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.OffsetTextureCoordinates">
            <summary>Offset to texture coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.OffsetTriangles">
            <summary>Offset to triangles.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.OffsetFrames">
            <summary>Offset to frame data.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.OffsetGLCommands">
            <summary>Offset to OpenGL commands.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Header.OffsetEnd">
            <summary>Offset to end of file.</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2_Header.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Vertex.X">
            <summary>Compressed vertex (x, y, z) coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Vertex.Y">
            <summary>Compressed vertex (x, y, z) coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Vertex.Z">
            <summary>Compressed vertex (x, y, z) coordinates.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Vertex.LightNormalIndex">
            <summary>Index to a normal vector for the lighting.</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2_Vertex.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_TextureCoordinate.S">
            <summary>Compressed texture coordinate.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_TextureCoordinate.T">
            <summary>Compressed texture coordinate.</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2_TextureCoordinate.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Frame.Scale">
            <summary>Scale Values.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Frame.Translate">
            <summary>Translation Vector.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Frame.Name">
            <summary>Frame name.</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2_Frame.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Skin.Name">
            <summary>Pathname of Skin in PK3 file</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2_Skin.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Triangle.VertexIndex">
            <summary>Indexes to triangle's vertices.</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.MD2_Triangle.TriangleIndex">
            <summary>Indexes to vertices' texture coorinates.</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2_Triangle.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:Purple.Graphics.Geometry.MD2Loader">
            <summary>
            Loads a Quake2 model.
            </summary>
            <remarks>
              <para>Markus Wöß</para>
              <para>Since: 0.7</para> 
            Credits go to David Henry for his tutorial about the md2 format: 
            http://tfc.duke.free.fr/us/tutorials/models/md2.htm
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2Loader.LoadModel(System.String)">
            <summary>
            Loads the model.
            </summary>
            <param name="fileName">FileName of model to load</param>
            <returns>The loaded model.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.MD2Loader.LoadModel(System.IO.Stream)">
            <summary>
            Loads the model.
            </summary>
            <param name="stream">Stream to load model from.</param>
            <returns>The loaded model.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.MD2Loader.FileSystem">
            <summary>
            The contained <see cref="P:Purple.Graphics.Geometry.MD2Loader.FileSystem"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.MD2Loader.Instance">
            <summary>
            Returns the singleton instance of the MD2Loader
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.MD3Loader">
            <summary>
            Importer for Quake3 models.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para> 
              <para>Last Update: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.LoadModel(System.String,System.String)">
            <summary>
            Loads a quake md3 model.
            </summary>
            <param name="skinName">Name of skin.</param>
            <param name="path">FilePath - without extension and _lower, _upper ...</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.LoadAnimations(System.IO.Stream)">
            <summary>
            Loads the the info for animations from a file.
            </summary>
            <param name="stream">Stream to load animations from.</param>
            <returns>Returns two AnimationPlayer objects.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.MD3Loader.FileSystem">
            <summary>
            The filesystem to use.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.Id">
            <summary>"IDP3"</summary>		
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.Version">
            <summary>15 for Q3</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.FileName">
            <summary>MD3 name, usually its pathname in the PK3. null terminated C string. </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.Flags">
            <summary> ??? </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.NumFrames">
            <summary>number of bone frames</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.NumTags">
            <summary>number of tags</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.NumMeshes">
            <summary>number of meshes</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.MaxSkins">
            <summary>unused = 0</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.HeaderSize">
            <summary>length of header</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.TagStart">
            <summary>offset for tag block</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.TagEnd">
            <summary>end offset for tag block</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.FileSize">
            <summary>size of file</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Header.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Frame.MinBounds">
            <summary>first corner of bounding box</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Frame.MaxBounds">
            <summary>second corner of bounding box</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Frame.Position">
            <summary>local origin - usually (0,0,0)</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Frame.Radius">
            <summary>radius of bounding sphere</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Frame.Name">
            <summary>name of frame - null terminated C string</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Frame.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Tag.Name">
            <summary>Name of Tag</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Tag.Origin">
            <summary>Coordinates of Tag</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Tag.Rotation">
            <summary>Orientation of Tag</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Tag.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.Id">
            <summary>"IDP3"</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.Name">
            <summary>Name of mesh object</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.Flags">
            <summary>???</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.NumFrames">
            <summary>number of animation frames</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.NumSkins">
            <summary>number of Skin objects</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.NumVertices">
            <summary>number of vertices</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.NumTriangles">
            <summary>number of triangles</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.TriangleOffset">
            <summary>relative offset from surface start to the list of triangle objects</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.SkinOffset">
            <summary>relative offset from surface start to the list of Skin objects</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.TexCoordOffset">
            <summary>relative offset from surface start to the list of texture coordinates</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.VertexOffset">
            <summary>relative offset from surface start to the list of vertex objects</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.MeshSize">
            <summary>size of mesh</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_MeshHeader.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Skin.Name">
            <summary>pathname of Skin in PK3 file</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Skin.SkinIndex">
            <summary>Skin index number</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Skin.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Triangle.A">
            <summary>index of first vertex</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Triangle.B">
            <summary>index of second vertex</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Triangle.C">
            <summary>index of third vertex</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Triangle.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_TexCoord.U">
            <summary>first texture coordinate</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_TexCoord.V">
            <summary>second texture coordinate</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_TexCoord.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Vertex.X">
            <summary>x coordinate => scale by 1/64 to get correct value </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Vertex.Y">
            <summary>y coordinate => scale by 1/64 to get correct value </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Vertex.Z">
            <summary>z coordinate => scale by 1/64 to get correct value </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Vertex.Normal">
            <summary>Encoded normal vector: http://www.icculus.org/homepages/phaethon/q3/formats/md3format.html#MD3</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD3Loader.MD3_Vertex.#ctor(System.Single)">
            <summary>
            get rid of warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>
            <param name="x"></param>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.MD3Loader.MD3Animation">
            <summary>
            Links for connecting several meshes
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3Animation.Name">
            <summary>name of animation</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3Animation.StartFrame">
            <summary>number of first frame</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3Animation.Count">
            <summary>number of total frames</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3Animation.LoopingFrames">
            <summary>???</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD3Loader.MD3Animation.FramesPerSecond">
            <summary>Frames Per Second</summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.MD5Loader">
            <summary>
            loads a doom3 model (alpha)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.LoadModel(System.String)">
            <summary>
            loads a model from a file
            </summary>
            <param name="fileName">of model file</param>
            <returns>model</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.LoadModel(System.IO.Stream)">
            <summary>
            loads a model from a stream
            </summary>
            <param name="stream">stream to load</param>
            <returns>md5 model</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.Advance(System.String)">
            <summary>
            advances to a given token
            </summary>
            <param name="token">token to advance to</param>
            <returns>true if token</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.Advance">
            <summary>
            advance to next token
            </summary>
            <returns>true if there is another token; false if end is reached</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.Advance(System.String[])">
            <summary>
            advance to the next token which is equal to one of the given tokens
            </summary>
            <param name="tokens">token list</param>
            <returns>true if there is another token; false if end is reached</returns>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Vertex">
            <summary>
            MD5 vertex structure
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Vertex.UV">
            <summary>texture coordinates</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Vertex.WeightIndex">
            <summary>weight index</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Vertex.WeightCount">
            <summary>weight count</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Vertex.#ctor(Purple.Math.Vector2,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="uv">texture coordinates</param>
            <param name="weightIndex">weight index</param>
            <param name="weightCount">weight count</param>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Weight">
            <summary>
            MD5 Weight structure
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Weight.Vector">
            <summary>weight per axis</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Weight.BiasFactor">
            <summary>bias factor</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Weight.BoneIndex">
            <summary>index of bone for this weight</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Weight.#ctor(Purple.Math.Vector3,System.Single,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="vec">weight per axis</param>
            <param name="bias">bias factor</param>
            <param name="boneIndex">index of bone for this weight</param>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Bone">
            <summary>
            MD5 bone structure
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Bone.Name">
            <summary>name of bone</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Bone.Parent">
            <summary>parent bone</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Bone.Matrix">
            <summary>matrix</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.MD5Loader.MD5Bone.#ctor(System.String,Purple.Math.Matrix4,System.String)">
            <summary>
            constructor
            </summary>
            <param name="name">name of bone</param>
            <param name="matrix">matrix</param>
            <param name="parent">parent bone</param>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Entities">
            <summary>Stores player/object positions, etc...</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Textures">
            <summary>Stores texture information</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Planes">
            <summary>Stores the splitting planes</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Nodes">
            <summary>Stores the BSP nodes</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Leafs">
            <summary>Stores the leafs of the nodes</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.LeafFaces">
            <summary>Stores the leaf's indices into the faces</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.LeafBrushes">
            <summary>Stores the leaf's indices into the brushes</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Models">
            <summary> Stores the info of world models</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Brushes">
            <summary>Stores the brushes info (for collision)</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.BrushSides">
            <summary>Stores the brush surfaces info</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Vertices">
            <summary>Stores the level vertices</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.MeshVerts">
            <summary>Stores the model vertices offsets</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Shaders">
            <summary>Stores the shader files (blending, anims..)</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Faces">
            <summary>Stores the faces for the level</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.Lightmaps">
            <summary>Stores the lightmaps for the level</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.LightVolumes">
            <summary>Stores extra world lighting information</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.VisData">
            <summary>Stores PVS and cluster info (visibility)</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLumps.LumpNumber">
            <summary>A constant to store the number of lumps</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.LumpLocation.Offset">
            <summary>offset to beginning of lump (in bytes)</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.LumpLocation.Length">
            <summary>length of lump (in bytes)</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.LumpLocation.#ctor(System.UInt32,System.UInt32)">
            <summary>
            mail goal is to remove warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>		
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeHeader.ID">
            <summary>This should always be 'IBSP'</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeHeader.Version">
            <summary>This should be 0x2e for Quake 3 files</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.QuakeHeader.#ctor(System.UInt32,System.UInt32)">
            <summary>
            mail goal is to remove warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>	
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeVertex.Position">
            <summary>(x, y, z) position. </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeVertex.TextureCoord">
            <summary>(u, v) texture coordinate</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeVertex.LightmapCoord">
            <summary>(u, v) lightmap coordinate</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeVertex.Normal">
            <summary>(x, y, z) normal vector</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeVertex.Color">
            <summary> RGBA color for the vertex </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.QuakeVertex.#ctor(System.Single)">
            <summary>
            mail goal is to remove warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>	
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.TextureID">
            <summary>The index into the texture array</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.Effect">
            <summary>The index for the effects (or -1 = n/a) </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.Type">
            <summary>1=polygon, 2=patch, 3=mesh, 4=billboard </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.VertexIndex">
            <summary>The index into this face's first vertex </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.NumOfVerts">
            <summary>The number of vertices for this face </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.MeshVertIndex">
            <summary>The index into the first meshvertex </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.NumMeshVerts">
            <summary>The number of mesh vertices </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.LightmapID">
            <summary>The texture index for the lightmap </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.MapCorner">
            <summary>The face's lightmap corner in the image </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.MapSize">
            <summary>The size of the lightmap section </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.MapPos">
            <summary>The 3D origin of lightmap. </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.VectorS">
            <summary>The 3D space for s and t unit vectors. </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.VectorT">
            <summary>The 3D space for s and t unit vectors. </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.Normal">
            <summary>The face normal. </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeFace.Size">
            <summary>The bezier patch dimensions. </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.QuakeFace.#ctor(System.Single)">
            <summary>
            mail goal is to remove warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>	
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.QuakeFace.CompareTo(System.Object)">
            <summary>
            compares to faces
            </summary>
            <param name="obj">to compare with</param>
            <returns></returns>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeLightMap.image">
            <summary>The RGB data in an 128x128 image </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.QuakeLightMap.#ctor(System.Single)">
            <summary>
            mail goal is to remove warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>	
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeTexture.strName">
            <summary>The name of the texture w/o the extension</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeTexture.flags">
            <summary>The surface flags (unknown)</summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Importer.QuakeTexture.contents">
            <summary>The content flags (unknown)</summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.QuakeTexture.#ctor(System.Single)">
            <summary>
            mail goal is to remove warning CS0649: Field '...' is never assigned to, and will always have its default value 0
            </summary>	
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.Quake3LevelLoader">
            <summary>
            loads a quake3 Level into a mesh
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Update: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.LoadLump(Purple.Graphics.Geometry.Importer.QuakeLumps,System.Type)">
            <summary>
            Helper function loading a lump from file into structs
            </summary>
            <param name="lump">Vertices, Faces, ...</param>
            <param name="structType">type of struct to load into</param>		
            <returns>list of instances of structType</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.Import(System.String)">
            <summary>
            Imports a mesh.
            </summary>
            <param name="fileName">Name of file to import.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.Import(System.IO.Stream)">
            <summary>
            Imports a mesh.
            </summary>
            <param name="stream">Stream to import.</param>
            <returns>The imported mesh.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.Load(System.String)">
            <summary>
            loads a quake3 level from a stream
            </summary>
            <param name="fileName">file to load</param>
            <returns>level as a mesh</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.Load(System.IO.Stream)">
            <summary>
            loads a quake3 level from a stream
            </summary>
            <param name="stream">stream to load from</param>
            <returns>level as a mesh</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.LoadRaw(System.IO.Stream,System.Int32,System.Int32,System.Int32,Purple.Graphics.Format)">
            <summary>
            loads a texture from a stream containing raw bitmap data
            </summary>
            <param name="stream">stream to load from</param>
            <param name="width">width of texture</param>
            <param name="height">height of texture</param>
            <param name="mipLevels">number of MipMap level</param>
            <param name="format">format of texture</param>
            <returns>texture object</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.FileSystem">
            <summary>
            The FileSystem used for the Quake3LevelLoader.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.Quake3LevelLoader.Mesh">
            <summary>
            get the mesh
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.XmlAnimationImporter">
             <summary>
            importing animation data from a xml file
             </summary>
             <remarks>
               <para>Author: Markus Wöß</para>
               <para>Since: 0.1</para>  
               <para>Update: 0.5</para> 
             </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="fileName">name of file</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.#ctor(System.IO.Stream)">
            <summary>
            constructor
            </summary>
            <param name="stream">stream containing animation</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.Import(System.String)">
            <summary>
            import a mesh from a file
            </summary>
            <param name="fileName">name of file</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.Import(System.IO.Stream)">
            <summary>
            imports an IMeshAnimtion from a stream
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.Channels">
            <summary>
            Retturns the animation channels.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.XmlAnimationImporter.FileSystem">
            <summary>
            The <see cref="T:Purple.IO.IFileSystem"/> that is used by the <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Importer.XmlModelImporter">
             <summary>
            importing a mesh from a xml file
             </summary>
             <remarks>
               <para>Author: Markus Wöß</para>
               <para>Since: 0.3</para>  
               <para>Update: 0.7</para>
             The xml format is much bigger and is loaded much slower than 
             the binary based format. However it is easier to read for humans.
             </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlModelImporter.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlModelImporter.#ctor(System.String)">
            <summary>
            imports a mesh
            </summary>
            <param name="fileName">file to take mesh from</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlModelImporter.#ctor(System.IO.Stream)">
            <summary>
            imports a mesh from a stream
            </summary>
            <param name="stream">stream to import mesh from</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlModelImporter.Import(System.String)">
            <summary>
            import a mesh from a file
            </summary>
            <param name="fileName">name of file</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Importer.XmlModelImporter.Import(System.IO.Stream)">
            <summary>
            import a mesh from a stream
            </summary>
            <param name="stream">stream containing mesh data</param>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.XmlModelImporter.Model">
            <summary>
            returns imported model
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.XmlModelImporter.Skeleton">
            <summary>
            get the skeleton
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.XmlModelImporter.FileSystem">
            <summary>
            The <see cref="T:Purple.IO.IFileSystem"/> that is used by the <see cref="T:Purple.Graphics.Geometry.Importer.BinaryAnimationImporter"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Importer.XmlModelImporter.HardwareSkinning">
            <summary>
            Flag that indicates if importer should create Software or Hardware streams 
            for skinning.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Joint">
            <summary>
            JointData
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Joint.#ctor(System.String,System.Int32,Purple.Graphics.Geometry.Joint)">
            <summary>
            constructor
            </summary>
            <param name="name">name of joint</param>
            <param name="index">index in jointArray</param>
            <param name="parent">point to parent joint</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Joint.Add(Purple.Graphics.Geometry.Joint)">
            <summary>
            add a new child joint
            !!resizes array!!
            </summary>
            <param name="child">to add</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Joint.GetMatrix(Purple.Math.Matrix4[])">
            <summary>
            get the transformation matrix from the jointArray
            </summary>
            <param name="jointArray"></param>
            <returns></returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.Joint.Children">
            <summary>
            children of current joint
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Joint.Name">
            <summary>
            name of joint
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Joint.Index">
            <summary>
            index in JointArray
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Joint.Parent">
            <summary>
            parent of joint
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Joint.Root">
            <summary>
            get the root element
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Mesh">
            <summary>
            A simple class for handling meshes.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.7</para>
            	A <see cref="T:Purple.Graphics.Geometry.Mesh"/> is a collection of <see cref="T:Purple.Graphics.Geometry.SubSet"/>s that 
              may use different <see cref="P:Purple.Graphics.Geometry.Mesh.Textures"/>. However, the transformation 
              must stay the same for all <see cref="T:Purple.Graphics.Geometry.SubSet"/>s.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Geometry.Mesh"/>.
            </summary>		
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.#ctor(Purple.Graphics.Geometry.SubSet)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Geometry.Mesh"/>.
            </summary>
            <param name="subSet">SubSet to add to the mesh.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.Reset">
            <summary>
            Resets the mesh.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the object.
            </summary>
            <param name="effect">The current effect that is used for rendering.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.DrawSubSet(Purple.Graphics.Effect.IEffect,System.Int32)">
            <summary>
            Draws a subset with given index.
            </summary>
            <remarks>
            For drawing a whole mesh, the method <c>Draw</c> should be used for optimized speed.
            </remarks>
            <param name="effect">The current effect that is used for rendering.</param>
            <param name="index">Index of the subSet to draw.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.Clone">
            <summary>
            Creates a deep copy of the current <see cref="T:Purple.Graphics.Geometry.Mesh"/>.
            </summary>
            <returns>Cloned instance of the mesh.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.Clone(Purple.Graphics.VertexFormat)">
            <summary>
            Returns a new instance of the <see cref="T:Purple.Graphics.Geometry.Mesh"/>, where all <see cref="T:Purple.Graphics.Geometry.SubSet"/>s 
            have the specified <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="format">Format to convert into.</param>
            <returns>Cloned instance of the mesh.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.Clone(Purple.Graphics.Semantic[])">
            <summary>
            Clones and converts a given <see cref="T:Purple.Graphics.Geometry.Mesh"/> to fit the given <see cref="T:Purple.Graphics.Semantic"/>s.
            </summary>
            <remarks>
            Clone uses a deep copy for the <see cref="T:Purple.Graphics.VertexUnit"/>s 
            and a shallow copy for the <see cref="T:Purple.Graphics.VertexStreams.IndexStream"/>s.
            </remarks>
            <param name="semantics">The array of <see cref="T:Purple.Graphics.Semantic"/> descriptions to fit.</param>
            <returns>The cloned and converted <see cref="T:Purple.Graphics.Geometry.Mesh"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.Update">
            <summary>
            Updates the mesh with the current animation.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Mesh.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="P:Purple.Graphics.Geometry.Mesh.SubSets">
            <summary>
            Returns the list of <see cref="T:Purple.Graphics.Geometry.SubSet"/>s defined for this mesh.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Mesh.Textures">
            <summary>
            Returns the list of <see cref="P:Purple.Graphics.Geometry.Mesh.Textures"/> objects used for the mesh.
            </summary>
            <remarks>
            If the <c>Textures</c> list is empty, the textures have to be 
            set outside the mesh. Otherwise there should be a <see cref="P:Purple.Graphics.Geometry.Mesh.Textures"/> object
            for every <see cref="T:Purple.Graphics.Geometry.SubSet"/>. But for performance reasons you should reuse 
            <see cref="P:Purple.Graphics.Geometry.Mesh.Textures"/> objects for <see cref="T:Purple.Graphics.Geometry.SubSet"/> using the same 
            <see cref="T:Purple.Graphics.Core.ITexture"/>s.
            <para>If this property just contains one <see cref="P:Purple.Graphics.Geometry.Mesh.Textures"/> object, this 
            textures are used for the whole <see cref="T:Purple.Graphics.Geometry.Mesh"/>.</para>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Geometry.Mesh.Purple#Graphics#Geometry#IAnimatedMesh#Current">
            <summary>
            Returns the current mesh.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Mesh.ShadowImplementation">
            <summary>
            The shadow implementation of the current shadow caster.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Mesh.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Model">
            <summary>
            A 3d entity like a character, a space ship or whatever.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
              - The model class can be used to represent an (animated) character
              - The model class consists of a skeleton, meshes and a player
              - The skeleton can be animated by the player
              - Meshes and other models can be attached to a certain bone of the skeleton
              - Meshes can be animated by using the BlendMesh or the SkinnedMesh implementation  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.#ctor(Purple.Graphics.Geometry.IAnimatedMesh,Purple.Graphics.Geometry.Skeleton)">
            <summary>
            Creates a new model.
            </summary>
            <param name="mesh">Mesh to use for model.</param>
            <param name="skeleton">Skeleton to use for the model or null.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.#ctor">
            <summary>
            Creates a new empty model.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.AttachModel(Purple.Graphics.Geometry.Model,Purple.Graphics.Geometry.Joint)">
            <summary>
            Attaches a model to a cetain joint.
            </summary>
            <param name="joint">The joint to attach model to.</param>
            <param name="model">The model to attach.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.AttachModel(Purple.Graphics.Geometry.Model,System.Int32)">
            <summary>
            Attaches a model to a cetain joint.
            </summary>
            <param name="jointIndex">The joint to attach model to.</param>
            <param name="model">The model to attach.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.Update">
            <summary>
            Updates the model.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the object.
            </summary>
            <param name="effect">The current effect that is used for rendering.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.RenderShadow(Purple.Graphics.Effect.IEffect)">
            <summary>
            HACK
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="P:Purple.Graphics.Geometry.Model.Skeleton">
            <summary>
            Returns the skeleton of the model.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Model.Effect">
            <summary>
            The effect to use with the model.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Model.Mesh">
            <summary>
            The mesh used by the model.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Model.ModelBindings">
            <summary>
            Returns all bound models.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Model.ShadowImplementation">
            <summary>
            The shadow implementation of the current shadow caster.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Model.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Model.ModelBinding">
            <summary>
            Structure for binding a model to a joint.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Model.ModelBinding.JointNum">
            <summary>
            The index of the joint.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Geometry.Model.ModelBinding.Model">
            <summary>
            The model to attach.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Model.ModelBinding.#ctor(System.Int32,Purple.Graphics.Geometry.Model)">
            <summary>
            Binds a model to a certain joint.
            </summary>
            <param name="jn">The joint to bind model to.</param>
            <param name="model">The model to bind.</param>
        </member>
        <member name="T:Purple.Graphics.Geometry.Skeleton">
            <summary>
            Stores the skeleton of a mesh (weights and bones).
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Changes: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Skeleton.#ctor(Purple.Math.Matrix4[],Purple.Graphics.Geometry.Joint[])">
            <summary>
            Creates a new skeleton.
            </summary>
            <param name="bindingPose">Array of joints in binding pose.</param>
            <param name="joints">Array of joint descriptions.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Skeleton.Update">
            <summary>
            Update the joints of the skeleton.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.Skeleton.FindJoint(System.String)">
            <summary>
            Returns the index of the joint with a certain name.
            </summary>
            <param name="name">Name of the joint.</param>
            <returns>The index of the joint with a certain name.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.BindingPose">
            <summary>
            Joints in binding pose.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.InvertedBindingPose">
            <summary>
            Joints in inverted binding pose.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.Joints">
            <summary>
            Joint descriptions of the skeleton.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.RootJoint">
            <summary>
            The root joint of the skeleton or null if there are no joints.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.Animated">
            <summary>
            The joints of the current animated skeleton.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.PreBound">
            <summary>
            The animated joints premultiplied with the inverse binding pose.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.Skeleton.Channels">
            <summary>
            The animation channels for the current skeleton.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.SkinnedMesh">
            <summary>
            This class handles skinned mesh.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.SkinnedMesh.#ctor(Purple.Graphics.Geometry.Mesh,Purple.Graphics.Geometry.Skeleton)">
            <summary>
            Creates a new skinned mesh object.
            </summary>
            <param name="sourceMesh">The mesh to use for skinning.</param>
            <param name="skeleton">The skeleton that is used for skinning</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SkinnedMesh.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the object.
            </summary>
            <param name="effect">The current effect that is used for rendering.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SkinnedMesh.Update">
            <summary>
            Updates the model.
            </summary>
            <remarks>Ensure that the skeleton gets updated before Update of the SkinnedMesh is called.</remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.SkinnedMesh.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="P:Purple.Graphics.Geometry.SkinnedMesh.Purple#Graphics#Geometry#IAnimatedMesh#Current">
            <summary>
            Returns the current mesh.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SkinnedMesh.Purple#Graphics#Geometry#IAnimatedMesh#Textures">
            <summary>
            The assosicated textures.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SkinnedMesh.Skeleton">
            <summary>
            The skeleton that is used for the current skinned mesh.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SkinnedMesh.ShadowImplementation">
            <summary>
            The shadow implementation of the current shadow caster.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SkinnedMesh.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.Skinning">
            <summary>
            A class that provides some functionality for skinning.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.Skinning.SoftSkin(Purple.Graphics.VertexStreams.PositionStream,Purple.Math.Vector3[],Purple.Graphics.VertexStreams.IBoneIndicesStream,Purple.Graphics.VertexStreams.IBoneWeightsStream,Purple.Math.Matrix4[],System.Boolean)">
            <summary>
            Fills a positionStream with skinned position data.
            </summary>
            <param name="target">The target position stream.</param>
            <param name="source">The source vector data.</param>
            <param name="bis">The stream containing the bone indices.</param>
            <param name="bws">The stream containing the bone weights.</param>
            <param name="joints">The bones to use for skinning.</param>
            <param name="skinShadow">Should the shadow part also be skinned?</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Skinning.Interpolate(Purple.Math.Matrix4[],Purple.Math.Matrix4[],Purple.Math.Matrix4[],System.Single)">
            <summary>
            Interpolates two arrays of matrices and fills the result into the target array.
            </summary>
            <param name="target">The target array of matrices.</param>
            <param name="a">The first array of matrices.</param>
            <param name="b">The second array of matrices.</param>
            <param name="time">The interpolation time in the range of [0;1]</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.Skinning.PreBind(Purple.Math.Matrix4[],Purple.Math.Matrix4[],Purple.Math.Matrix4[])">
            <summary>
            Prebinds an array of bones with the inverted binding pose.
            </summary>
            <remarks>
            To skin a certain point, you'll first have to multiply the point of the binding pose with the 
            inverted bone matrix of the binding pose. The result can then be multiplied with the matrix of 
            the animated bone.
            </remarks>
            <param name="target">The result bones.</param>
            <param name="source">The source bones.</param>
            <param name="invPose">The bones of the inverted binding pose.</param>
        </member>
        <member name="T:Purple.Graphics.Geometry.SubSet">
            <summary>
            A <see cref="T:Purple.Graphics.Geometry.SubSet"/> is the smallest geometric unit of Purple#.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para> 
              <para>A subset can be drawn at once by one render call. For best 
              performance a subset should contain as much data as possible, that way
              the total number of subsets should be kept rather low.</para>
              <para>However, there are some constraints that make it hard 
              to keep the number of subsets low!</para>
              <para>All data of a subset must be drawn with the same renderstates. That 
              also means, that it must use the same textures, the same transformations, the 
              same shaders, the same vertex and index buffers and all the other render and sampler states.</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.#ctor(Purple.Graphics.VertexUnit,Purple.Graphics.VertexStreams.IndexStream,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Geometry.SubSet"/> and prefills it with data.
            </summary>
            <param name="vertexUnit">Vertex data to use.</param>
            <param name="indexStream">Indices to use.</param>
            <param name="indexBufferStart">Start index for <see cref="P:Purple.Graphics.Geometry.SubSet.IndexStream"/>.</param>
            <param name="primitiveCount">Number of primitives to draw.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.#ctor(Purple.Graphics.VertexUnit,Purple.Graphics.VertexStreams.IndexStream)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Geometry.SubSet"/>.
            </summary>
            <remarks>
            Assumes usage of complete VertexUnit/IndexSteram.
            </remarks>
            <param name="vertexUnit">Vertex data to use.</param>
            <param name="indexStream">Indices to use.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Geometry.SubSet"/>.
            </summary>
            <param name="vertexUnit">The vertex unit containing the data.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.Draw">
            <summary>
            Draws the subSet.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.ChangeFormat(Purple.Graphics.VertexFormat)">
            <summary>
            Changes the format of the current <see cref="T:Purple.Graphics.Geometry.SubSet"/>.
            </summary>
            <param name="format">The new format to use.</param>		
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.ChangeFormat(Purple.Graphics.Semantic[])">
            <summary>
            Changes the format to fit the given semantics.
            </summary>
            <param name="semantics">Semantics to fit.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.CanMerge(Purple.Graphics.Geometry.SubSet)">
            <summary>
            Returns true if two subsets can be merged.
            </summary>
            <remarks>Same material and same vertex format.</remarks>
            <param name="s2">Subset to merge.</param>
            <returns>True if it is possible.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.Merge(Purple.Graphics.Geometry.SubSet)">
            <summary>
            Merges two subsets.
            </summary>
            <param name="subSet">Subset to merge with.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.Indexify(Purple.Graphics.VertexUnit)">
            <summary>
            Create a <see cref="T:Purple.Graphics.Geometry.SubSet"/> from an unindexed <see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/>.
            </summary>
            <param name="vertexUnit"><see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/> to indexify.</param>
            <returns>The created <see cref="T:Purple.Graphics.Geometry.SubSet"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.Geometry.SubSet"/>.
            </summary>
            <remarks>
            Uses deep copy (just <see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/> is cloned but not <see cref="P:Purple.Graphics.Geometry.SubSet.IndexStream"/>).
            </remarks>
            <returns>Clone of the current <see cref="T:Purple.Graphics.Geometry.SubSet"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.Clone(Purple.Graphics.VertexFormat)">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.Geometry.SubSet"/>, whereby the format of the <see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/> 
            is changed to the given <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <remarks>
            Uses deep copy (just <see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/> is cloned but not <see cref="P:Purple.Graphics.Geometry.SubSet.IndexStream"/>).
            </remarks>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.Clone(Purple.Graphics.Semantic[])">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.Geometry.SubSet"/>, whereby the format is changed to the fit the semantics given.
            </summary>
            <remarks>
            Uses deep copy (just <see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/> is cloned but not <see cref="P:Purple.Graphics.Geometry.SubSet.IndexStream"/>).
            </remarks>
            <param name="semantics"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.CalcFaceNormalsOld">
            <summary>
            Calculates the face normals for the current subSet in object space.
            </summary>
            <returns>The face normals for the current subSet.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.CalcFaceNormals">
            <summary>
            Calculates the face normals for the current subSet in object space.
            </summary>
            <returns>The face normals for the current subSet.</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSet.CalcEdges">
            <summary>
            Calcs the edges from the current subSet.
            </summary>
            <remarks>This method is rather slow and should just be called for offline processing.</remarks>
            <returns>The edges from the current subSet.</returns>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSet.IndexStream">
            <summary>
            The <see cref="P:Purple.Graphics.Geometry.SubSet.IndexStream"/> that contains the indices for the current subset.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSet.VertexUnit">
            <summary>
            The <see cref="P:Purple.Graphics.Geometry.SubSet.VertexUnit"/> that is used by the current subset.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSet.IndexBufferStart">
            <summary>
            Index of first vertex in <see cref="P:Purple.Graphics.Geometry.SubSet.IndexStream"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSet.PrimitiveCount">
            <summary>
            Number of triangles to draw.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Geometry.SubSets">
            <summary>
            collection of subsets
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.GetEnumerator">
            <summary>
            get enumerator for enumeration over parameters
            </summary>
            <returns>IEnumerator object</returns>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.CopyTo(System.Array,System.Int32)">
            <summary>
            copies subSet to an array
            </summary>
            <param name="array">the destination array</param>
            <param name="index">the index at which copying begins</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.Add(Purple.Graphics.Geometry.SubSet)">
            <summary>
            adds a subSet to the list
            </summary>
            <param name="subSet">subSet to add</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.AddRange(System.Collections.ICollection)">
            <summary>
            adds a number of subsets to the list
            </summary>
            <param name="subSets"></param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire ArrayList using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing elements.</param>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.Clear">
            <summary>
            clears the list
            </summary>
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.ChangeFormat(Purple.Graphics.VertexFormat)">
            <summary>
            Changes the format of the <see cref="T:Purple.Graphics.Geometry.Mesh"/>.
            </summary>
            <param name="format">Format to convert into.</param>		
        </member>
        <member name="M:Purple.Graphics.Geometry.SubSets.ChangeFormat(Purple.Graphics.Semantic[])">
            <summary>
            Changes the format to fit the given semantics.
            </summary>
            <param name="semantics">Semantics to fit.</param>	
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSets.IsSynchronized">
            <summary>
            returns value whether access to SubSets is synchronized (thread-safe)
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSets.SyncRoot">
            <summary>
            returns an object that can be used to synchronize access to the SubSets
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSets.Item(System.Int32)">
            <summary>
            get subSet by index
            </summary>
        </member>
        <member name="P:Purple.Graphics.Geometry.SubSets.Count">
            <summary>
            get number of subSets
            </summary>
        </member>
        <member name="T:Purple.Graphics.GraphicsEngine">
            <summary>
            advanced functionality based on IGfxEngine
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.GraphicsEngine.Init(System.Windows.Forms.Control,Purple.Graphics.GraphicsSettings)">
            <summary>
            Initializes the GraphicsEngine with the given settings.
            </summary>
            <param name="control">The control to use for graphics output.</param>
            <param name="settings">The settings for initializing the engine.</param>
            <returns>Returns the device object if successful - null otherwise.</returns>
        </member>
        <member name="M:Purple.Graphics.GraphicsEngine.InitNVPerfHud(System.Windows.Forms.Control,Purple.Graphics.GraphicsSettings)">
            <summary>
            Tries to initialize the GraphicsEngine with the given settings and the NVidia Performane HeadUpDisplay.
            </summary>
            <remarks>Some of the GraphicsSettings may be overriden for using the NVPerfHUD. To use this feature, the 
            NVPerfHUD must be installed.</remarks>
            <param name="control">The control to use for visualization.</param>
            <param name="settings">The GraphicsSettings for initialization.</param>
            <returns>Returns the device object if successful - null otherwise.</returns>
        </member>
        <member name="M:Purple.Graphics.GraphicsEngine.BitsPerPixel(Purple.Graphics.Format)">
            <summary>
            Calculates the number of bits per pixel for a given format.
            </summary>
            <param name="fmt">Format to calc bpp for.</param>
            <returns>Number of bits per pixel.</returns>
        </member>
        <member name="M:Purple.Graphics.GraphicsEngine.ColorChannelBits(Purple.Graphics.Format)">
            <summary>
            Caluclates the minimum number of channelbits for a given format.
            </summary>
            <param name="fmt">Format</param>
            <returns>Number of minimum bits per channel.</returns>
        </member>
        <member name="M:Purple.Graphics.GraphicsEngine.AlphaChannelBits(Purple.Graphics.Format)">
            <summary>
            Calculates the number of bits of the alpha channel.
            </summary>
            <param name="fmt">Format to calculate alpha bits for.</param>
            <returns>Number of bits of the alpha channel.</returns>
        </member>
        <member name="P:Purple.Graphics.GraphicsEngine.Instance">
            <summary>
            Gets singleton instance of the <see cref="T:Purple.Graphics.GraphicsEngine"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.GraphicsEngine.Initialized">
            <summary>
            Flag that indicates if <see cref="T:Purple.Graphics.GraphicsEngine"/> is initialized.
            </summary>
        </member>
        <member name="P:Purple.Graphics.GraphicsEngine.Devices">
            <summary>
            Returns a list of available Devices.
            </summary>
            <returns>IDevice objects.</returns>
        </member>
        <member name="P:Purple.Graphics.GraphicsEngine.Control">
            <summary>
            The control used for gfx output.
            </summary>
        </member>
        <member name="P:Purple.Graphics.GraphicsEngine.Device">
            <summary>
            The device used for rendering.
            </summary>
        </member>
        <member name="T:Purple.Graphics.GraphicsException">
            <summary>
            exception which is thrown in case of Gfx errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.GraphicsException.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.GraphicsException.#ctor(System.String)">
            <summary>
            constructor taking string describing reasons for exception
            </summary>
            <param name="description">Description why exception is thrown</param>
        </member>
        <member name="T:Purple.Graphics.PresentInterval">
            <summary>
            Defines flags that describe the relationship between the adapter refresh rate and the rate at which Device.Present operations are completed.
            </summary>
        </member>
        <member name="F:Purple.Graphics.PresentInterval.Immediate">
            <summary>
            The window area gets updated immediately.
            </summary>
        </member>
        <member name="F:Purple.Graphics.PresentInterval.One">
            <summary>
            The window area gets updated during the next vertical retrace.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexProcessing">
            <summary>
            Defines how vertices are processed.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexProcessing.Software">
            <summary>
            Vertices are process in software.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexProcessing.Mixed">
            <summary>
            Vertices are processed in soft and hardware.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexProcessing.Hardware">
            <summary>
            Vertices are processed in hardware.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexProcessing.PureHardware">
            <summary>
            Vertices are processed in pure hardware.
            </summary>
        </member>
        <member name="T:Purple.Graphics.DeviceType">
            <summary>
            The type of the device to use.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeviceType.Hardware">
            <summary>
            Use the hardware device.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeviceType.Reference">
            <summary>
            Use the reference device.
            </summary>
        </member>
        <member name="F:Purple.Graphics.DeviceType.Null">
            <summary>
            Use the null device.
            </summary>
        </member>
        <member name="T:Purple.Graphics.GraphicsSettings">
            <summary>
            The graphics settings for initializing the GraphicsEngine.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.DeviceIndex">
            <summary>
            The index of the Device to use.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.Width">
            <summary>
            The width of the game window.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.Height">
            <summary>
            The height of the game window.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.BitsPerPixel">
            <summary>
            Number of bits per pixel.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.FullScreen">
            <summary>
            Flag that indicates if the game should run in fullscreen mode.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.RefreshRate">
            <summary>
            The target refresh rate.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.Control">
            <summary>
            The control to use for graphics output.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.VertexProcessing">
            <summary>
            Defines how vertices are processed.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.PresentInterval">
            <summary>
            Defines the present interval.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.DepthBits">
            <summary>
            The number of bits for the z-Buffer.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.StencilBits">
            <summary>
            The number of bits for the stencil buffer.
            </summary>
        </member>
        <member name="F:Purple.Graphics.GraphicsSettings.DeviceType">
            <summary>
            The type of the device to use for rendering.
            </summary>
        </member>
        <member name="M:Purple.Graphics.GraphicsSettings.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a GraphicsSettings object with the necessary information.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
            <param name="bpp">The color depth.</param>
            <param name="fullScreen">Flag that indicates if game should be started in fullscreen mode.</param>
        </member>
        <member name="M:Purple.Graphics.GraphicsSettings.Load(System.String)">
            <summary>
            Loads the settings from an xml configuration file.
            </summary>
            <param name="fileName">Name of file to load settings from.</param>
            <returns>The loaded GraphicsSettings object.</returns>
        </member>
        <member name="M:Purple.Graphics.GraphicsSettings.Load(System.IO.Stream)">
            <summary>
            Loads the settings from a stream.
            </summary>
            <param name="stream">Stream to load settings from.</param>
            <returns>The GraphicsSettings object.</returns>
        </member>
        <member name="P:Purple.Graphics.GraphicsSettings.WindowedSettings">
            <summary>
            The standard windowed settings.
            </summary>
        </member>
        <member name="P:Purple.Graphics.GraphicsSettings.FullScreenSettings">
            <summary>
            The standard fullScreen settings.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.Anchor">
            <summary>
            This class represents an <see cref="T:Purple.Graphics.Gui.Anchor"/> for <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            <para>An <see cref="T:Purple.Graphics.Gui.Anchor"/> can be positioned somewhere inside a <see cref="T:Purple.Graphics.Gui.IGuiElement"/>. 
            The position of the <see cref="T:Purple.Graphics.Gui.Anchor"/> becomes the new origin of the element. For example 
            if an <c>Anchor.Centered</c> is assigned, the <see cref="T:Purple.Graphics.Gui.IImage"/>'s center will be used 
            for positioning by <c>IGuiElement.Position</c>.</para>
            <para>The position of the <see cref="T:Purple.Graphics.Gui.Anchor"/> may be defined by setting the <see cref="T:Purple.Graphics.Alignment"/> 
            of the anchor, or by assigning a certain offset.</para>
            <para>It is also possible to give an anchor a certain name. In this case it is possible to link two 
            <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s at a certain position. This can be realized by specifying a <see cref="T:Purple.Graphics.Gui.Anchor"/> 
            added to the <see cref="P:Purple.Graphics.Gui.IGuiLinkAnchors.LinkAnchors"/> of a certain parent element 
            (like a <see cref="T:Purple.Graphics.Gui.GuiGroup"/>) and an <see cref="T:Purple.Graphics.Gui.Anchor"/> for a child <see cref="T:Purple.Graphics.Gui.IGuiElement"/>, where both 
            anchors have the same name. </para>
            <seealso cref="T:Purple.Graphics.Gui.Anchors"/>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchor.#ctor(Purple.Graphics.Alignment,Purple.Graphics.Alignment)">
            <summary>
            Creates a new user defined <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
            <param name="horizontal">Horizontal <see cref="T:Purple.Graphics.Alignment"/> of the anchor.</param>
            <param name="vertical">Vertical <see cref="T:Purple.Graphics.Alignment"/> of the anchor.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchor.#ctor(Purple.Graphics.Alignment,Purple.Graphics.Alignment,System.String)">
            <summary>
            Creates a new user defined <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
            <param name="horizontal">Horizontal <see cref="T:Purple.Graphics.Alignment"/> of the anchor.</param>
            <param name="vertical">Vertical <see cref="T:Purple.Graphics.Alignment"/> of the anchor.</param>
            <param name="name">Name of anchor.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchor.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new user defined <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
            <param name="offsetX">Horizontal offset of anchor.</param>
            <param name="offsetY">Vertical offset of anchor.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchor.#ctor(System.Single,System.Single,System.String)">
            <summary>
            Creates a new user defined <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
            <param name="offsetX">Horizontal offset of anchor.</param>
            <param name="offsetY">Vertical offset of anchor.</param>
            <param name="name">Name of anchor.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchor.GetPosition(Purple.Math.Vector2)">
            <summary>
            Calculates the position of the <see cref="T:Purple.Graphics.Gui.Anchor"/> for an 
            <see cref="T:Purple.Graphics.Gui.IGuiElement"/> depending on the <see cref="T:Purple.Graphics.Alignment"/>,
            </summary>
            <param name="size">Size of the <see cref="T:Purple.Graphics.Gui.IGuiElement"/>.</param>
            <returns>The position as a <see cref="T:Purple.Math.Vector2"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchor.SetPosition(Purple.Math.Vector2)">
            <summary>
            Sets the offset of the <see cref="T:Purple.Graphics.Gui.Anchor"/>.
            </summary>
            <remarks>
            The horizontal and vertical <see cref="T:Purple.Graphics.Alignment"/> is automatically set to 
            <see cref="F:Purple.Graphics.Alignment.Offset"/>.
            </remarks>
            <param name="pos">The new offset to set.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Name">
            <summary>
            The name of the <see cref="T:Purple.Graphics.Gui.Anchor"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Vertical">
            <summary>
            The vertical <see cref="T:Purple.Graphics.Alignment"/> of the <see cref="T:Purple.Graphics.Gui.Anchor"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Horizontal">
            <summary>
            The horizontal <see cref="T:Purple.Graphics.Alignment"/> of the <see cref="T:Purple.Graphics.Gui.Anchor"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.X">
            <summary>
            X coordinate of the <see cref="T:Purple.Graphics.Gui.Anchor"/>. 
            </summary>
            <remarks>
            When a new value gets assigned to this property, the horizontal <see cref="T:Purple.Graphics.Alignment"/> is 
            automatically set to <c>Offset</c>.
            <note type="note">The returned value is always 0 for an Alignment different to Offset (use <c>GetPosition</c>).</note>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Y">
            <summary>
            Y coordinate of the <see cref="T:Purple.Graphics.Gui.Anchor"/>. 
            </summary>
            <remarks>
            When a new value gets assigned to this property, the vertical <see cref="T:Purple.Graphics.Alignment"/> is 
            automatically set to <c>Offset</c>.
            <note type="note">The returned value is always 0 for an Alignment different to Offset (use <c>GetPosition</c>).</note>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Centered">
            <summary>
            Returns a horizontally and vertically centered <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.TopLeft">
            <summary>
            Returns a top/left aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Top">
            <summary>
            Returns a top/centered aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.TopRight">
            <summary>
            Returns a top/right aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Left">
            <summary>
            Returns a left/centered aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Right">
            <summary>
            Returns a right/centered aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.BottomLeft">
            <summary>
            Returns a bottom/left aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.Bottom">
            <summary>
            Returns a bottom/centered aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchor.BottomRight">
            <summary>
            Returns a bottom/right aligned <see cref="T:Purple.Graphics.Gui.Anchor"/> object.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.Anchors">
            <summary>
            This class represnets a typed collection of <see cref="T:Purple.Graphics.Gui.Anchor"/> objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.#ctor">
            <summary>
            Creates an empty collection of <see cref="T:Purple.Graphics.Gui.Anchor"/> objects.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.#ctor(Purple.Graphics.Gui.Anchor)">
            <summary>
            Initializes the <see cref="T:Purple.Graphics.Gui.Anchors"/> collection with one anchor.
            </summary>
            <param name="anchor"><see cref="T:Purple.Graphics.Gui.Anchor"/> object to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.#ctor(Purple.Graphics.Gui.Anchor[])">
            <summary>
            Initializes the <see cref="T:Purple.Graphics.Gui.Anchors"/> collection with an array of <see cref="T:Purple.Graphics.Gui.Anchor"/> objects.
            </summary>
            <param name="anchors">The array of <see cref="T:Purple.Graphics.Gui.Anchor"/> objects.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.Add(Purple.Graphics.Gui.Anchor)">
            <summary>
            Adds an <see cref="T:Purple.Graphics.Gui.Anchor"/> to the list.
            </summary>
            <param name="anchor">The object to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.Remove(Purple.Graphics.Gui.Anchor)">
            <summary>
            Removes a certain <see cref="T:Purple.Graphics.Gui.Anchor"/> from the list.
            </summary>
            <param name="anchor">The object to remove.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Purple.Graphics.Gui.Anchor"/> with the specified name from the list.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.ToArray">
            <summary>
            Converts the collection to an array of <see cref="T:Purple.Graphics.Gui.Anchor"/> objects.
            </summary>
            <returns>Array of <see cref="T:Purple.Graphics.Gui.Anchor"/> objects.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.Gui.Anchors.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchors.Count">
            <summary>
            Returns the number of elements contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchors.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.Anchor"/> for a certain index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchors.Item(System.String)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.Anchor"/> for a certain name.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchors.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Anchors.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.AnchorsList">
            <summary>
            A collection of <see cref="T:Purple.Graphics.Gui.Anchors"/> objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            The <see cref="T:Purple.Graphics.Gui.AnimatedGroup"/> element defines a
            <see cref="T:Purple.Graphics.Gui.Anchors"/> collection for every frame. The <see cref="T:Purple.Graphics.Gui.AnchorsList"/> 
            is used to store all <see cref="T:Purple.Graphics.Gui.Anchors"/> collections.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.#ctor">
            <summary>
            Creates a collection of <see cref="T:Purple.Graphics.Gui.Anchors"/> objects.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.#ctor(Purple.Graphics.Gui.Anchors[])">
            <summary>
            Initializes the <see cref="T:Purple.Graphics.Gui.AnchorsList"/> with an array of <see cref="T:Purple.Graphics.Gui.Anchors"/> objects.
            </summary>
            <param name="anchors">The array of <see cref="T:Purple.Graphics.Gui.Anchors"/> objects.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.Add(Purple.Graphics.Gui.Anchors)">
            <summary>
            Adds an <see cref="T:Purple.Graphics.Gui.Anchors"/> object to the list.
            </summary>
            <param name="anchors">Object to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.Remove(Purple.Graphics.Gui.Anchors)">
            <summary>
            Removes a certain <see cref="T:Purple.Graphics.Gui.Anchors"/> object from the list.
            </summary>
            <param name="anchors">Object to remove.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.ToArray">
            <summary>
            Converts the collection to an array of <see cref="T:Purple.Graphics.Gui.Anchors"/> objects.
            </summary>
            <returns>An array of <see cref="T:Purple.Graphics.Gui.Anchors"/> objects.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorsList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.AnchorsList.Count">
            <summary>
            Returns the size of the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnchorsList.Item(System.Int32)">
            <summary>
            Get the <see cref="T:Purple.Graphics.Gui.Anchors"/> object for a certain index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnchorsList.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnchorsList.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IAnimatedGroup">
            <summary>
            Abstract interface for objects that implement animated groups.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            <para>An animated group is a <see cref="T:Purple.Graphics.Gui.IGuiElement"/> that contains both the 
            functionality of an <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/> and a <see cref="T:Purple.Graphics.Gui.IGuiGroup"/>.</para>
            <para>In other words the element is formed by an animated sprite that can contain 
            several child <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s. This child elements can be </para> linked 
            to certain anchor points using the <c>LinkAnchorsList</c> (for every frame). 
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IAnimatedImage">
            <summary>
            The abstract interface for animated images.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para> 
            <para>An <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/> can be considered as an animated sprite.
            For every frame of the animation, an <see cref="T:Purple.Graphics.Gui.IImage"/> object can be added.</para>
            <para>By playing frame after frame, the impression of an animation can be created.</para> 
            <para></para>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiParentElement">
            <summary>
            An abstract interface for an <see cref="T:Purple.Graphics.Gui.IGuiParentElement"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para> 
            <para>This class represents a gui element, that contains several other 
            gui elements.</para>
            <seealso cref="T:Purple.Graphics.Gui.IGuiParentElement"/>
            <seealso cref="T:Purple.Graphics.Gui.IGuiGroup"/>
            <seealso cref="T:Purple.Graphics.Gui.GuiParentElement"/>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiElement">
            <summary>
            An abstract interface for a gui element.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
              <para>Last Change: 0.7</para>
            <para>The <see cref="T:Purple.Graphics.Gui.IGuiElement"/> represents the base interface for all gui elements. For faster 
            creation of specialised gui elements, the abstract class <see cref="T:Purple.Graphics.Gui.GuiElement"/> is provided, that 
            implements some standard functionatliy of an <see cref="T:Purple.Graphics.Gui.IGuiElement"/>.
            </para>  
            <para>The functionality of the gui element is based on a number of smaller, more 
            special interfaces. This makes it possible to reuse code that is just based on a certain 
            part interface for objects that don't inherit the whole <see cref="T:Purple.Graphics.Gui.IGuiElement"/> interface.</para>
            <seealso cref="T:Purple.Graphics.Gui.GuiElement"/>
            <seealso cref="T:Purple.Graphics.Gui.IGuiGroup"/>
            <seealso cref="T:Purple.Graphics.Gui.IGuiParentElement"/>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiPosition">
            <summary>
            GuiPosition.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.IGuiPosition.Move(Purple.Math.Vector2)">
            <summary>
            Moves the element a certain amount.
            </summary>
            <param name="vector">Vector which is added to the current position.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiPosition.Position">
            <summary>
            The position of the element relative to its parent element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiPosition.AbsolutePosition">
            <summary>
            Returns the absolute position of the gui element.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiSize">
            <summary>
            GuiSize.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiSize.Size">
            <summary>
            Returns the size of the element relative to its parent element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiSize.AbsoluteSize">
            <summary>
            Returns the absolute size of the current element.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiNode">
            <summary>
            GuiParent.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiNode.Parent">
            <summary>
            Returns the parent of the current element.
            </summary>
            <remarks>
            If this element is the root node and therefore has no parent, null is returned.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiNode.Root">
            <summary>
            Returns the root node of the current element.
            </summary>
            <remarks>
            If the current element is the root, the current element is returned.
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiAnchor">
            <summary>
            GuiAnchor.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiAnchor.Anchor">
            <summary>
            Access to the used <see cref="P:Purple.Graphics.Gui.IGuiAnchor.Anchor"/> for the current element.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiRotatable">
            <summary>
            GuiRotatable.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiRotatable.Rotation">
            <summary>
            Access to the relative rotation of the element.
            </summary>
            <remarks>
            The rotation is specified in radians and represents a rotation around the z-axis.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiRotatable.AbsoluteRotation">
            <summary>
            Calculates the absolute rotation of the element.
            </summary>
            <remarks>
            The rotation is specified in radians and represents a rotation around the z-axis.
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiVisible">
            <summary>
            GuiVisible.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiVisible.Visible">
            <summary>
            Visibility of the gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiVisible.AbsoluteVisible">
            <summary>
            Is gui element visible by taking in account its parents.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiEnabled">
            <summary>
            GuiEnabled.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiEnabled.Enabled">
            <summary>
            Flag that indicates if the element is enabled or not.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiEnabled.AbsoluteEnabled">
            <summary>
            Flag that indicates if the element is enabled taking its parents into account.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiScaleable">
            <summary>
            GuiScaleable.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiScaleable.Scale">
            <summary>
            The relative scale of the gui element.
            </summary>
            <remarks>
            The default value is: <c>Vector2(1.0f, 1.0f)</c>.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiScaleable.AbsoluteScale">
            <summary>
            The absolute scale of the gui element.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiAlpha">
            <summary>
            GuiAlpha.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiAlpha.Alpha">
            <summary>
            The relative transparency of the gui element.
            </summary>
            <remarks>
            The default value is: <c>1.0f</c>.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiAlpha.AbsoluteAlpha">
            <summary>
            Calculates the absolute transparency of the current gui element.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiName">
            <summary>
            GuiName.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiName.Name">
            <summary>
            Name of the current gui element.
            </summary>
        </member>
        <member name="T:Purple.Input.IMouseHandler">
            <summary>
            Interface that defines a mouse handler.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.IMouseHandler.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="T:Purple.Input.IKeyboardHandler">
            <summary>
            Interface that defines a keyboard handler.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.IKeyboardHandler.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Input.IKeyboardHandler.OnChar(System.Char)">
            <summary>
            Method that character events.
            </summary>
            <param name="keyChar">The character that was entered via the keyboard.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.IGuiElement.ContainsPoint(Purple.Math.Vector2)">
            <summary>
            Tests if the given guiElement contains the given point.
            </summary>
            <param name="point">The point to test for.</param>
            <returns>True if the point is within the guiElement.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiParentNode">
            <summary>
            ParentNode.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiLinkAnchors">
            <summary>
            GuiLinkAnchor.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiLinkAnchors.LinkAnchors">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.Anchors"/> object containg all link anchors of the current object.
            </summary>
            <remarks>
            A link <see cref="T:Purple.Graphics.Gui.Anchor"/> represents a certain position within a parent element to which 
            child elements can be connected. In contrast, the <see cref="T:Purple.Graphics.Gui.Anchor"/> of a child element 
            defines its origin.
            <para>If a link anchor and an anchor of a child element have the same name, the child element's anchor 
            is positioned exactly over the link anchors positions.</para>
            <para>This is helpful to define the position of the head or the shoulder and link parent objects 
            to this position.</para>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiLinkAnchors.LinkAnchorCount">
            <summary>
            Returns the number of link anchors for the current object.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IImage">
            <summary>
            Abstract interface for a gui element that shows a simple image.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IImage.Quad">
            <summary>
            Returns the <see cref="T:Purple.Graphics.TwoD.IExtendedQuad"/> that should be shown 
            by a gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IAnimatedImage.Frames">
            <summary>
            Access to the frames of the <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IAnimatedImage.CurrentFrame">
            <summary>
            Returns the current frame of the <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiGroup">
            <summary>
            An abstract interface for a <see cref="T:Purple.Graphics.Gui.IGuiGroup"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
              <para>Last Update: 0.6</para>
            <para>A gui group is an <see cref="T:Purple.Graphics.Gui.IGuiParentElement"/>, that exposes the 
            underlaying child objects to the public. </para>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiGroupNode">
            <summary>
            GuiGroup.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiGroupNode.Children">
            <summary>
            Access to the list of children for a certain <see cref="T:Purple.Graphics.Gui.IGuiGroupNode"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiGroupNode.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> with the specified index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiGroupNode.Item(System.String)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> by name.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IAnimatedGroup.LinkAnchorsList">
            <summary>
            This property cointains a <see cref="T:Purple.Graphics.Gui.Anchors"/> object for 
            every frame.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.AnimatedGroup">
            <summary>
            This class is the standard implementation of the <see cref="T:Purple.Graphics.Gui.IAnimatedGroup"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            <para>An animated group is a <see cref="T:Purple.Graphics.Gui.IGuiElement"/> that contains both the 
            functionality of an <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/> and a <see cref="T:Purple.Graphics.Gui.IGuiGroup"/>.</para>
            <para>In other words the element is formed by an animated sprite that can contain 
            several child <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s. This child elements can be </para> linked 
            to certain anchor points using the <c>LinkAnchorsList</c> (for every frame). 
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiElement">
            <summary>
            The abstract standard implementation of an <see cref="T:Purple.Graphics.Gui.IGuiElement"/>.
            </summary>
            <remarks>
            <para>This class implements some standard behaviour of an <see cref="T:Purple.Graphics.Gui.IGuiElement"/> 
            and may be used for convenience to create other, more specialised gui elements.</para>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
              <para>Last Change: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiElement"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.Move(Purple.Math.Vector2)">
            <summary>
            Moves the element a certain amount.
            </summary>
            <param name="vector">Vector which is added to the current position.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.OnChar(System.Char)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="keyChar">The character that was entered via the keyboard.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.ContainsPoint(Purple.Math.Vector2)">
            <summary>
            Tests if a given point is within the gui window.
            </summary>
            <param name="point">Point to test for.</param>
            <returns>True if the point is within the gui window.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.InverseTransform(Purple.Math.Vector2)">
            <summary>
            Transforms a given point back into the space of the gui element.
            </summary>
            <param name="point">Point on screen to transform back.</param>
            <returns>The point on the screen transformed into the space of the gui element.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElement.CalcAbsolutePosition(Purple.Math.Vector2)">
            <summary>
            Calculates the absolute position from a relative position within the guiElement.
            </summary>
            <param name="relativePosition">The relative position within the guiElement.</param>
            <returns>The absolute position.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Name">
            <summary>
            Name of the current gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Position">
            <summary>
            The position of the element relative to its parent element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Visible">
            <summary>
            Visibility of the gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsoluteVisible">
            <summary>
            Is gui element visible by taking in account its parents.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Enabled">
            <summary>
            Flag that indicates if the element is enabled or not.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsoluteEnabled">
            <summary>
            Flag that indicates if the element is enabled taking its parents into account.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsolutePosition">
            <summary>
            Returns the absolute position of the gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Parent">
            <summary>
            Returns the parent of the current element.
            </summary>
            <remarks>
            If this element is the root node and therefore has no parent, null is returned.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Root">
            <summary>
            Returns the root node of the current element.
            </summary>
            <remarks>
            If the current element is the root, the current element is returned.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Size">
            <summary>
            Returns the size of the element relative to its parent element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsoluteSize">
            <summary>
            Returns the absolute size of the current element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Anchor">
            <summary>
            Access to the used <see cref="P:Purple.Graphics.Gui.GuiElement.Anchor"/> for the current element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Rotation">
            <summary>
            Access to the relative rotation of the element.
            </summary>
            <remarks>
            The rotation is specified in radians and represents a rotation around the z-axis.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsoluteRotation">
            <summary>
            Calculates the absolute rotation of the element.
            </summary>
            <remarks>
            The rotation is specified in radians and represents a rotation around the z-axis.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Scale">
            <summary>
            The relative scale of the gui element.
            </summary>
            <remarks>
            The default value is: <c>Vector2(1.0f, 1.0f)</c>.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsoluteScale">
            <summary>
            The absolute scale of the gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.Alpha">
            <summary>
            The relative transparency of the gui element.
            </summary>
            <remarks>
            The default value is: <c>1.0f</c>.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElement.AbsoluteAlpha">
            <summary>
            Calculates the absolute transparency of the current gui element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedGroup.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Gui.AnimatedGroup"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedGroup.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <remarks>
            First the current background frame is thrown, follwed by the children.
            </remarks>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.Frames">
            <summary>
            Access to the frames of the <see cref="T:Purple.Graphics.Gui.AnimatedGroup"/> element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.LinkAnchorsList">
            <summary>
            This property cointains a <see cref="T:Purple.Graphics.Gui.Anchors"/> object for 
            every frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.Quad">
            <summary>
            Returns the quad of the current frame used by the gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.CurrentFrame">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IImage"/> object for the current frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.Size">
            <summary>
            Returns the size of the gui element, which is the max size of all frames.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.Children">
            <summary>
            Access to the list of children for a certain <see cref="T:Purple.Graphics.Gui.IGuiGroupNode"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> at the specified index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.LinkAnchors">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.Anchors"/> object containg the link <see cref="T:Purple.Graphics.Gui.Anchor"/> objects 
            for the current frame.
            </summary>
            <remarks>
            A link <see cref="T:Purple.Graphics.Gui.Anchor"/> represents a certain position within a parent element to which 
            child elements can be connected. In contrast, the <see cref="T:Purple.Graphics.Gui.Anchor"/> of a child element 
            defines its origin.
            <para>If a link anchor and an anchor of a child element have the same name, the child element's anchor 
            is positioned exactly over the link anchors positions.</para>
            <para>This is helpful to define the position of the head or the shoulder and link parent objects 
            to this position. While this is also possible for a <see cref="T:Purple.Graphics.Gui.IGuiGroup"/>, the <see cref="T:Purple.Graphics.Gui.IAnimatedGroup"/> 
            allows to define the position of the link anchors for every frame.</para>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.LinkAnchorCount">
            <summary>
            Returns the number of link <see cref="T:Purple.Graphics.Gui.Anchor"/> objects for the current frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedGroup.Item(System.String)">
            <summary>
            Returns a child <see cref="T:Purple.Graphics.Gui.IGuiElement"/> by name.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.AnimatedImage">
            <summary>
            An image that is animated via multiple textures.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            By playing frame after frame, the impression of an animation can be created.
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.Image">
            <summary>
            A simple gui element that shows an image.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Gui.Image"/>. 
            <note type="note">Don't forget to set the <c>quad</c>.</note>
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.#ctor(Purple.Graphics.TwoD.IExtendedQuad)">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Gui.Image"/>.
            </summary>
            <param name="quad">Quad to visualize in image.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.#ctor(Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Gui.Image"/>.
            </summary>
            <param name="texture">Texture to use for quad.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.#ctor(System.String)">
            <summary>
            Create a new instance of an <see cref="T:Purple.Graphics.Gui.Image"/>
            </summary>
            <param name="fileName">FileName of texture to use for quad.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.Init(Purple.Graphics.Core.ITexture2d)">
            <summary>
            Initializes the image with a given texture.
            </summary>
            <param name="texture">Texture to initialize image with.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Image.From(Purple.Graphics.Core.ITexture2d[])">
            <summary>
            Creates a list of images from a list of textures.
            </summary>
            <param name="textures">The list of textures.</param>
            <returns>The list of images.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.Image.Quad">
            <summary>
            Returns the <see cref="T:Purple.Graphics.TwoD.IExtendedQuad"/> that should be shown 
            by a gui element.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Image.Size">
            <summary>
            Returns the size of the gui element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedImage.#ctor(Purple.Graphics.Core.ITexture2d[])">
            <summary>
            Creates a new animated image object.
            </summary>
            <param name="textures">An array of textures to use.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedImage.#ctor(System.String)">
            <summary>
            Creates a new animated image object.
            </summary>
            <param name="fileName">Base name of animation files</param>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedImage.Frames">
            <summary>
            Returns the number of frames.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedImage.Frame">
            <summary>
            Sets or retrieves the current frame index.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.AnimatedImageSave">
            <summary>
            Standard implementation of the <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/> interface.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            <para>An <see cref="T:Purple.Graphics.Gui.IAnimatedImage"/> can be considered as an animated sprite.
            For every frame of the animation, an <see cref="T:Purple.Graphics.Gui.IImage"/> object can be added.</para>
            <para>By playing frame after frame, the impression of an animation can be created.</para>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiParentElement">
            <summary>
            An abstract standard implementation of the <see cref="T:Purple.Graphics.Gui.IGuiParentElement"/>
            interface.
            </summary>
            <remarks>
            <para>This class implements some standard behaviour of an <see cref="T:Purple.Graphics.Gui.IGuiParentElement"/>. 
            This class may be used for convenience to create other, more specialised gui elements, that 
            contain several other gui elements.</para>
            <para>This class can</para>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiParentElement.#ctor">
            <summary>
            The standard constructor of a <see cref="T:Purple.Graphics.Gui.GuiParentElement"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiParentElement.LinkAnchors">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.Anchors"/> object containg all link anchors of the current object.
            </summary>
            <remarks>
            A link <see cref="T:Purple.Graphics.Gui.Anchor"/> represents a certain position within a parent element to which 
            child elements can be connected. In contrast, the <see cref="T:Purple.Graphics.Gui.Anchor"/> of a child element 
            defines its origin.
            <para>If a link anchor and an anchor of a child element have the same name, the child element's anchor 
            is positioned exactly over the link anchors positions.</para>
            <para>This is helpful to define the position of the head or the shoulder and link parent objects 
            to this position.</para>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiParentElement.LinkAnchorCount">
            <summary>
            Returns the number of link anchors for the current object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedImageSave.#ctor">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Gui.AnimatedImage"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedImageSave.#ctor(System.String)">
            <summary>
            Creates a new instance of an <see cref="T:Purple.Graphics.Gui.AnimatedImage"/>.
            </summary>
            <param name="fileName">The animation images to load.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.AnimatedImageSave.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedImageSave.Frames">
            <summary>
            Access to the frames of the <see cref="T:Purple.Graphics.Gui.AnimatedImage"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedImageSave.Quad">
            <summary>
            Returns the current frames quad object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedImageSave.CurrentFrame">
            <summary>
            Returns the current frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.AnimatedImageSave.Size">
            <summary>
            Returns the size of the gui element, which is the max size of all frames.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.ButtonState">
            <summary>
            Enumeration of all possible button states.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.ButtonState.Normal">
            <summary>
            The button is in its normal state and can be pressed.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.ButtonState.Hover">
            <summary>
            The button isn't pressed, but the mouse cursor is currently over the button.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.ButtonState.PressedHover">
            <summary>
            The button is currently pressed and the mouse cursor is over the button.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.ButtonState.Pressed">
            <summary>
            The button is pressed but the mouse cursor is not over the button.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IButton">
            <summary>
            The abstract interface for a button.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IButton.ButtonState">
            <summary>
            Current state of the button.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IButton.Clicked">
            <summary>
            Event that is fired when button is clicked.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IButton.Down">
            <summary>
            Event that is fired when button is pressed down.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IButton.Up">
            <summary>
            Event that is fired when button is released.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IButton.Hover">
            <summary>
            Event that is fired when button is hovered.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IButton.Leave">
            <summary>
            Event that is fired when button gets left.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.ButtonLogic">
            <summary>
            Reusable logic for a button.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.ButtonLogic.ButtonDown">
            <summary>
            Flag that indicates if the button was pressed down.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.ButtonLogic.WasOver">
            <summary>
            Flag that indicates if the mouse was over the button.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.ButtonLogic.Update(Purple.Graphics.Gui.IGuiElement,Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Updates the button, eventually fires the events and returns the new ButtonState.
            </summary>
            <param name="element">The element the buttonLogic is calculated for.</param>
            <param name="position">The position of the mouse cursor.</param>
            <param name="button">The buttons of the mouse.</param>
            <param name="pressed">Flag that indicates if mouse was pressed.</param>
            <returns>The new buttonState.</returns>
        </member>
        <member name="E:Purple.Graphics.Gui.ButtonLogic.Down">
            <summary>
            Event that is fired when button is pressed down.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.ButtonLogic.Up">
            <summary>
            Event that is fired when button is released.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.ButtonLogic.Hover">
            <summary>
            Event that is fired when button is hovered.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.ButtonLogic.Leave">
            <summary>
            Event that is fired when button gets left.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.ThinButtonLogic">
            <summary>
            Reusable logic for a button.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.ThinButtonLogic.ButtonDown">
            <summary>
            Flag that indicates if the button was pressed down.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.ThinButtonLogic.WasOver">
            <summary>
            Flag that indicates if the mouse was over the button.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.ThinButtonLogic.Update(Purple.Graphics.Gui.IGuiElement,Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Updates the button, eventually fires the events and returns the new ButtonState.
            </summary>
            <param name="element">The element the buttonLogic is calculated for.</param>
            <param name="position">The position of the mouse cursor.</param>
            <param name="button">The buttons of the mouse.</param>
            <param name="pressed">Flag that indicates if mouse was pressed.</param>
            <returns>The new buttonState.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.Button">
            <summary>
            Implementation of a standard button.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.Button.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.Button"/>.
            </summary>
            <param name="normal">The image to use for normal state.</param>
            <param name="pressed">The image to use for pressed state.</param>
            <param name="hover">The image to use for mouseOver state.</param>
            <param name="disabled">The image to use for disabled state.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Button.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.Button"/>.
            </summary>
            <param name="normal">The image to use for normal state.</param>
            <param name="pressed">The image to use for pressed state.</param>
            <param name="hover">The image to use for mouseOver state.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Button.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.Button"/>.
            </summary>
            <param name="normal">The image to use for normal state.</param>
            <param name="pressed">The image to use for pressed state.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Button.#ctor(Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.Button"/>.
            </summary>
            <param name="normal">The image to use for normal state.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Button.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.Button.ButtonState">
            <summary>
            Current state of the button.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.Button.Clicked">
            <summary>
            Event that is fired when button is clicked.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.Button.Down">
            <summary>
            Event that is fired when button is pressed down.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.Button.Up">
            <summary>
            Event that is fired when button is released.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.Button.Hover">
            <summary>
            Event that is fired when button is hovered.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.Button.Leave">
            <summary>
            Event that is fired when button gets left.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.AnchorConverter">
            <summary>
            Converter, that converts an Anchor object to a string and 
            vice versa.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType"></param>
            <returns>The Type to convert the value parameter to.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture. </param>
            <param name="value">The Object to convert. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.AnchorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiElementConverter">
            <summary>
            Converter, that converts a GuiElement
            vice versa.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElementConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns the property collection of a gui element.
            </summary>
            <param name="context">The context of the object.</param>
            <param name="value">The value.</param>
            <param name="attributes">The attributes.</param>
            <returns>The property descriptors.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.DebugHelp">
            <summary>
            The help page of the DebugOverlay.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiGroup">
            <summary>
            A standard implementation of the <see cref="T:Purple.Graphics.Gui.IGuiGroup"/> inteface.
            </summary>
            <remarks>
            <para>This clas represents a simple gui group. You can use this class 
            for grouping <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s and for creating more complex 
            gui elements based on a gui group.</para>
            <para>If you want to create a gui element that is based on several other 
            gui elements, but you don't want to use the standard grouping implementation (<c>Children</c>, ...) of 
            this class, use the <see cref="T:Purple.Graphics.Gui.GuiParentElement"/> class.</para>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.GuiGroup.size">
            <summary>
            Size of the current <see cref="T:Purple.Graphics.Gui.GuiGroup"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiGroup"/>.
            </summary>
            <remarks><note type="note">Don't forget to set size!</note>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.#ctor(Purple.Math.Vector2)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiGroup"/>.
            </summary>
            <param name="size">Size of <see cref="T:Purple.Graphics.Gui.GuiGroup"/>.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Prepend(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Adds a guiElement to the front of a list.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Add(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Adds a guiElement to the list.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Add(System.Collections.ICollection)">
            <summary>
            Adds a collection of gui elements.
            </summary>
            <param name="elements">The collection containing the gui elements.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Remove(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Removes a certain guiElement from the list.
            </summary>
            <param name="element">Element to remove.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Replace(Purple.Graphics.Gui.IGuiElement,Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Replaces a certain guiElement.
            </summary>
            <param name="element">The old element.</param>
            <param name="newElement">The new element.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Find(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Returns the index of a certain guiElement.
            </summary>
            <param name="element">The guiElement to search.</param>
            <returns>The index of the specified element or -1 if not found.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Insert(Purple.Graphics.Gui.IGuiElement,System.Int32)">
            <summary>
            Inserts a guiElement at a certain index.
            </summary>
            <param name="element">Element to insert.</param>
            <param name="index">Index at which to insert.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGroup.Clear">
            <summary>
            Removes all <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGroup.Children">
            <summary>
            Access to the list of children for a certain <see cref="T:Purple.Graphics.Gui.IGuiGroupNode"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGroup.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> with the specified index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGroup.Size">
            <summary>
            Returns the size of the current <see cref="T:Purple.Graphics.Gui.IGuiElement"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGroup.Count">
            <summary>
            Returns the number of children.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGroup.Item(System.String)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> by name.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugHelp.#ctor">
            <summary>
            Creates the DebugHelp page.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugHelp.OnRender(System.Single)">
            <summary>
            Render the next frame.
            </summary>
            <param name="deltaTime">Time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugHelp.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.DebugInfo">
            <summary>
            The info page of the DebugOverlay.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugInfo.#ctor">
            <summary>
            Creates the DebugHelp page.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugInfo.OnRender(System.Single)">
            <summary>
            Render the next frame.
            </summary>
            <param name="deltaTime">Time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugInfo.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.DebugOverlay">
            <summary>
            A gui element that contains some cool debugging functionality.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugOverlay.#ctor">
            <summary>
            Creates a new DebugOverlay object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugOverlay.OnRender(System.Single)">
            <summary>
            Called for every frame.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugOverlay.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.DebugOverlay.Pages">
            <summary>
            The pages of the DebugOverlay.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.DebugProfiling">
            <summary>
            The profiling page of the DebugOverlay.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugProfiling.#ctor">
            <summary>
            Creates the DebugHelp page.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugProfiling.OnRender(System.Single)">
            <summary>
            Render the next frame.
            </summary>
            <param name="deltaTime">Time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.DebugProfiling.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiComboBox">
            <summary>
            Summary description for GuiComboBox.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiElements">
            <summary>
            This class represents a typed collection of <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.#ctor">
            <summary>
            Creates a new collection of <see cref="T:Purple.Graphics.Gui.GuiElement"/> objects.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.#ctor(Purple.Graphics.Gui.IGuiElement[])">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.Gui.GuiElements"/> object that will be inizialized by 
            an array of <see cref="T:Purple.Graphics.Gui.IGuiElement"/> objects.
            </summary>
            <param name="elements">Array of <see cref="T:Purple.Graphics.Gui.IGuiElement"/> objects.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Add(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Adds a new <see cref="T:Purple.Graphics.Gui.IGuiElement"/> to the list.
            </summary>
            <remarks>
            The parent of the element is changed to the parent 
            assigned to the current collection.
            </remarks>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Add(System.Collections.ICollection)">
            <summary>
            Adds a collection of gui elements.
            </summary>
            <remarks>
            The parent of the element is changed to the parent 
            assigned to the current collection.
            </remarks>
            <param name="elements">The collection containing the gui elements.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Prepend(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Adds a guiElement to the front of a list.
            </summary>
            <param name="element">The element to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Remove(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Removes a certain <see cref="T:Purple.Graphics.Gui.IGuiElement"/> to the list.
            </summary>
            <param name="element">to remove</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Replace(Purple.Graphics.Gui.IGuiElement,Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Replaces a certain guiElement.
            </summary>
            <param name="element">The old element.</param>
            <param name="newElement">The new element.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Find(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Returns the index of a certain guiElement.
            </summary>
            <param name="element">The guiElement to search.</param>
            <returns>The index of the specified element or -1 if not found.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Insert(Purple.Graphics.Gui.IGuiElement,System.Int32)">
            <summary>
            Inserts a guiElement at a certain index.
            </summary>
            <param name="element">Element to insert.</param>
            <param name="index">Index at which to insert.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Clear">
            <summary>
            Removes all <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s from the list.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.ToArray">
            <summary>
            Converts the <see cref="T:Purple.Graphics.Gui.GuiElements"/> collection to an array of 
            <see cref="T:Purple.Graphics.Gui.IGuiElement"/> objects.
            </summary>
            <returns>The array of <see cref="T:Purple.Graphics.Gui.IGuiElement"/> objects.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.Find(System.String)">
            <summary>
            Returns the child with the specified name or null if not found.
            </summary>
            <param name="name">Name of child.</param>
            <returns>The child with the specified name or null if not found.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The current key that was pressed or released.</param>
            <param name="pressed">Flagthat indicates if key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiElements.OnChar(System.Char)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="character">The character that was entered.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElements.Parent">
            <summary>
            Access to the parent element of the contained <see cref="T:Purple.Graphics.Gui.IGuiElement"/>s.
            </summary>
            <remarks>
            If a new parent is assigned, the parent of all contained gui elements will be 
            updated.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElements.Count">
            <summary>
            Returns the number of elements contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElements.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> at a certain index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiElements.Item(System.String)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Gui.IGuiElement"/> by name.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiGauge">
            <summary>
            The abstract interface for gauge.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiProgressBar">
            <summary>
            The abstract interface for gauge.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiProgressBar.Direction">
            <summary>
            The direction of the gauge.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiProgressBar.Total">
            <summary>
            The total current for the gauge.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiProgressBar.Current">
            <summary>
            The current current.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.IGuiGauge.Stop">
            <summary>
            Stops the gauge.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.IGuiGauge.Start">
            <summary>
            Starts the gauge.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IGuiGauge.GaugeExpired">
            <summary>
            Event that is fired when gauge expires.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiGauge.IsRunning">
            <summary>
            Returns true if the queue is currently running.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiGauge.Increment">
            <summary>
            Flag that defines if <see cref="T:Purple.Graphics.Gui.IGuiProgressBar"/> increments or decrements.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiGauge">
            <summary>
            Enumeration of all possible button states.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiProgressBar">
            <summary>
            Implementation of a progress bar.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiProgressBar.#ctor(Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiGauge"/>.
            </summary>
            <param name="texture">The texture to use for the gauge.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiProgressBar.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The current since the last <c>OnRender</c> call.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiProgressBar.Total">
            <summary>
            The total current for the gauge.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiProgressBar.Current">
            <summary>
            The current current.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiProgressBar.Direction">
            <summary>
            The direction of the gauge.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiProgressBar.Size">
            <summary>
            Size of element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGauge.#ctor(Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiGauge"/>.
            </summary>
            <param name="texture">The texture to use for the gauge.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGauge.Stop">
            <summary>
            Stops the gauge.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGauge.Start">
            <summary>
            Starts the gauge.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiGauge.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGauge.IsRunning">
            <summary>
            Returns true if the queue is currently running.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiGauge.GaugeExpired">
            <summary>
            Event that is fired when gauge expires.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiGauge.Increment">
            <summary>
            Flag that defines if <see cref="T:Purple.Graphics.Gui.GuiGauge"/> increments or decrements.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiListBox">
            <summary>
            The abstract interface for a gui slider.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiListBox.#ctor(System.Int32,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new GuiListBox object.
            </summary>
            <param name="items">The number of items.</param>
            <param name="background">The background texture.</param>
            <param name="hover">The hover texture.</param>
            <param name="selected">The selected texture.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiListBox.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiListBox.MultiSelect">
            <summary>
            Flag that indicates if multiple items can be selected.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiManager">
            <summary>
            This class manages drawing <see cref="T:Purple.Graphics.Gui.GuiElements"/>. 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>  
              <para>Last Update: 0.6</para>
            <para>A <see cref="T:Purple.Graphics.Gui.GuiManager"/> is a special kind of <see cref="T:Purple.Graphics.Gui.GuiGroup"/> that 
            shouldn't be added to other groups or gui managers.</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiManager.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiManager"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiManager.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiManager.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiManager.OnChar(System.Char)">
            <summary>
            Method that handles characters entered via the keyboard.
            </summary>
            <param name="keyChar">The entered character.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiManager.FocusElement">
            <summary>
            The element that has the focus.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiManager.Instance">
            <summary>
            Returns the default instance of a <see cref="T:Purple.Graphics.Gui.GuiManager"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiPages">
            <summary>
            The GuiPages element can hold several pages and switch between them.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.GuiPages.size">
            <summary>
            Size of the current <see cref="T:Purple.Graphics.Gui.GuiGroup"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiPages.#ctor(System.Int32)">
            <summary>
            The standard constructor of a <see cref="T:Purple.Graphics.Gui.GuiPages"/>.
            </summary>
            <param name="pages">The number of pages.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiPages.Add(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Adds a page to the GuiPages collection.
            </summary>
            <param name="group">Group to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiPages.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiPages.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles keyboard events.
            </summary>
            <param name="key">The key, whose status was changed.</param>
            <param name="pressed">Flag that indicates if the key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiPages.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiPages.CurrentPage">
            <summary>
            The index of the active page.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiPages.Pages">
            <summary>
            The pages collection;
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiPages.Size">
            <summary>
            Returns the size of the current <see cref="T:Purple.Graphics.Gui.IGuiElement"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.Direction">
            <summary>
            Enumeration over all possible directions.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para> 
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.Direction.Left">
            <summary>
            The progress bar moves from right to left.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.Direction.Right">
            <summary>
            The progress bar moves from left to right.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.Direction.Up">
            <summary>
            The progress bar moves up.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Gui.Direction.Down">
            <summary>
            The progress bar moves down.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiScrollBar">
            <summary>
            A scroll bar.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollBar.#ctor(Purple.Graphics.Gui.Image,Purple.Graphics.Gui.Button,Purple.Graphics.Gui.Button,Purple.Graphics.Gui.Button)">
            <summary>
            Creates a new GuiScrollBar object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollBar.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiScrollBar.Changed">
            <summary>
            Event that is fired if the current position of the progressbar gets changed.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollBar.Direction">
            <summary>
            The direction of the gauge.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollBar.Increment">
            <summary>
            Flag that defines if <see cref="T:Purple.Graphics.Gui.IGuiProgressBar"/> increments or decrements.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollBar.Total">
            <summary>
            The total time for the gauge.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollBar.Current">
            <summary>
            The current time.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollBar.LineStep">
            <summary>
            The size of the line.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiScrollList">
            <summary>
            A scrollable list.
            </summary>
            <remarks>
              <para>Author: Dietmar Hauser, Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Gui.GuiScrollList.DirtySizeCorrectionFactor">
            This correction factor prevents that small gaps are visible between the elements.
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.#ctor(System.Int32,System.Int32,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new GuiScrollList element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.#ctor(Purple.Graphics.Gui.IImage[])">
            <summary>
            Creates a new GuiScrollList element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.#ctor">
            <summary>
            Creates a new GuiScrollList element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.Init(Purple.Graphics.Gui.IImage[])">
            <summary>
            Initializes the GuiScrollList with a list of images.
            </summary>
            <param name="images"></param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.InitImages(System.String[],System.Int32,System.Int32,System.Drawing.Font,System.Int32,System.Int32)">
            <summary>
            Initializes the GuiScrollList with a vertain number of text images.
            </summary>
            <param name="items">The text items to display.</param>
            <param name="width">The width of one text item.</param>
            <param name="height">The height of one text item.</param>
            <param name="font">The font to use for the text.</param>
            <param name="textColor">The color of the text.</param>
            <param name="outlineColor">The color of the outline or 0.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.OnRender(System.Single)">
            <summary>
            Renders the gui element.
            </summary>
            <param name="deltaTime">The time since the last OnRender call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.SetIndex(System.Int32,System.Boolean)">
            <summary>
            Sets the gui element to a certain index without scrolling.
            </summary>
            <param name="index">The new index.</param>
            <param name="fireEvent">Flag that indicates if the IndexChanged event should be thrown.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.ScrollToIndex(System.Int32)">
            <summary>
            Scrolls the gui element to a certain index.
            </summary>
            <param name="index">Index to scroll to.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiScrollList.SetSize(Purple.Math.Vector2)">
            <summary>
            Sets the size of the gui element.
            </summary>
            <param name="newSize">The new size of the element.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Index">
            <summary>
            Returns the current selected index or -1.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Item">
            <summary>
            Returns the current selected item or null.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Min">
            <summary>
            The minimum index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Max">
            <summary>
            The maximum index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.IsMoving">
            <summary>
            Flag that indicates if the scrollList is currently moving.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Images">
            <summary>
            Returns the images of the scrollList.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Items">
            <summary>
            Returns the items of the scrollList.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Left">
            <summary>
            The left button.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.Right">
            <summary>
            The right button.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.ScrollSpeed">
            <summary>
            Scrollspeed distance per second.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiScrollList.IsInfinite">
            <summary>
            True to have the list start again at the end.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiScrollList.SelectedIndexChanged">
            <summary>
            Event that is fired if the selection of the ScrollList changed.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.SliderChanged">
            <summary>
            Changed event for sliders.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiSlider">
            <summary>
            The abstract interface for a gui slider.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="E:Purple.Graphics.Gui.IGuiSlider.Changed">
            <summary>
            Event that is fired if the slider gets changed.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiSlider">
            <summary>
            A simple slider input control.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSlider.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Create a new guiSlider object.
            </summary>
            <param name="normal">The standard texture.</param>
            <param name="hovered">The texture used if the slider is hovered.</param>
            <param name="pressed">The texture used if the slider is pressed.</param>
            <param name="disabled">The texture used if the slider is disabled.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSlider.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Create a new guiSlider object.
            </summary>
            <param name="normal">The standard texture.</param>
            <param name="hovered">The texture used if the slider is hovered.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSlider.#ctor(Purple.Graphics.Core.ITexture2d)">
            <summary>
            Create a new guiSlider object.
            </summary>
            <param name="normal">The standard texture.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSlider.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiSlider.Changed">
            <summary>
            Event that is fired if the slider gets changed.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiSlider.Size">
            <summary>
            Returns the size of the gui element.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiSwitch">
            <summary>
            The abstract interface for a gui switch (checkbox).
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiSwitch.Checked">
            <summary>
            Current state of the switch.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IGuiSwitch.Changed">
            <summary>
            Event that is fired when the switch gets changed.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IGuiSwitch.Hover">
            <summary>
            Event that is fired when switch is hovered.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.IGuiSwitch.Leave">
            <summary>
            Event that is fired when switch gets left.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiSwitch">
            <summary>
            Implementation of a gui switch (checkbox).
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSwitch.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new gui switch object.
            </summary>
            <param name="textureOn">Texture to use if switch is turned on.</param>
            <param name="textureOff">Texture to use if switch is turned off.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSwitch.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new gui switch object.
            </summary>
            <param name="textureOn">Texture to use if switch is turned on.</param>
            <param name="textureOff">Texture to use if switch is turned off.</param>
            <param name="textureHoverOn">Texture to use if switch is hovered and turned on.</param>
            <param name="textureHoverOff">Texture to use if switch is hovered and turned off.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSwitch.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new gui switch object.
            </summary>
            <param name="textureOn">Texture to use if switch is turned on.</param>
            <param name="textureOff">Texture to use if switch is turned off.</param>
            <param name="textureHoverOn">Texture to use if switch is hovered and turned on.</param>
            <param name="textureHoverOff">Texture to use if switch is hovered and turned off.</param>
            <param name="textureDisabledOn">Texture to use if switch is disabled and turned on.</param>
            <param name="textureDisabledOff">Texture to use if switch is disabled and turned off.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiSwitch.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiSwitch.ButtonState">
            <summary>
            Current buttonState of the guiSwitch.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiSwitch.Checked">
            <summary>
            Current state of the switch.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiSwitch.Changed">
            <summary>
            Event that is fired when the switch gets changed.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiSwitch.Down">
            <summary>
            Event that is fired when button is pressed down.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiSwitch.Up">
            <summary>
            Event that is fired when button is released.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiSwitch.Hover">
            <summary>
            Event that is fired when button is hovered.
            </summary>
        </member>
        <member name="E:Purple.Graphics.Gui.GuiSwitch.Leave">
            <summary>
            Event that is fired when button gets left.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.IGuiText">
            <summary>
            Abstract interface for a gui text.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.IGuiText.Update(System.Int32)">
            <summary>
            Renders the text into the texture.
            </summary>
            <param name="color">Color to preclear the background or Color.Empty.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiText.Text">
            <summary>
            Set the text of the <see cref="T:Purple.Graphics.Gui.GuiElement"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.IGuiText.TextAnchor">
            <summary>
            The anchor used for the text.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiText">
            <summary>
            This class maps the font functionality to a <see cref="T:Purple.Graphics.Gui.IGuiElement"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiText.#ctor(System.Int32,System.Int32,System.Drawing.Font,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiText"/>.
            </summary>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="font">Font to use for the text.</param>
            <param name="color">Color to use for drawing the text.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiText.#ctor(System.String,System.Int32,System.Int32,System.Drawing.Font,System.Int32)">
            <summary>
            Creates a new GuiText object.
            </summary>
            <param name="text">The initial text.</param>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="font">Font to use for the text.</param>
            <param name="color">Color to use for drawing the text.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiText.Update(System.Int32)">
            <summary>
            Renders the text into the texture.
            </summary>
            <param name="color">Color to preclear the background or Color.Empty.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiText.Update">
            <summary>
            Renders the text into the texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiText.TextObject">
            <summary>
            Returns the underlying <see cref="P:Purple.Graphics.Gui.GuiText.Text"/> object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiText.Text">
            <summary>
            Set the text of the <see cref="T:Purple.Graphics.Gui.GuiElement"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiText.TextAnchor">
            <summary>
            The anchor used for the text.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiText.ShadowColor">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiText.OutlineColor">
            <summary>
            The color of the outline.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiText.Offset">
            <summary>
            Offset of the shadow and outline.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.GuiTextBox">
            <summary>
            This class is a GuiText that handles user input via the keyboard.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiTextBox.#ctor(System.Int32,System.Int32,System.Drawing.Font,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Gui.GuiTextBox"/>.
            </summary>
            <param name="width">Width of the texture.</param>
            <param name="height">Height of the texture.</param>
            <param name="font">Font to use for the text.</param>
            <param name="color">Color to use for drawing the text.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiTextBox.IsValidChar(System.Char)">
            <summary>
            Method to check if the entered keyChar is a valid char and will be added to the text.
            </summary>
            <param name="keyChar">The char to test for.</param>
            <returns>True if the entered character is valid.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.GuiTextBox.OnChar(System.Char)">
            <summary>
            The method that handles entered characters.
            </summary>
            <param name="keyChar">The character that was entered via the keyboard.</param>
        </member>
        <member name="P:Purple.Graphics.Gui.GuiTextBox.MaxLength">
            <summary>
            The maximum length of the entered text.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.Images">
            <summary>
            A simple collection of <see cref="T:Purple.Graphics.Gui.IImage"/>s.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Last Update: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.#ctor">
            <summary>
            Creates a new collection of <see cref="T:Purple.Graphics.Gui.IImage"/> objects.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.#ctor(System.String)">
            <summary>
            Loads a new collection of <see cref="T:Purple.Graphics.Gui.IImage"/> objects from a fileName.
            </summary>
            <param name="fileName">Load all images of the form: <c>fileName??.ext</c>.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.Add(Purple.Graphics.Gui.IImage)">
            <summary>
            Adds an <see cref="T:Purple.Graphics.Gui.IImage"/> to the collection and resets the parent.
            </summary>
            <param name="image">The frame to add.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.AddRange(System.Collections.ICollection)">
            <summary>
            Adds a collection of <see cref="T:Purple.Graphics.Gui.IImage"/> objects and resets their parent.
            </summary>
            <param name="collection">The collection conaining the images.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.OnRender(System.Single)">
            <summary>
            Renders next frame.
            </summary>
            <remarks>
            First the current background frame is thrown, follwed by the children.
            </remarks>
            <param name="deltaTime">The time since the last <c>OnRender</c> call.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.Gui.Images.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.Parent">
            <summary>
            Access to the parent of the images.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.Count">
            <summary>
            Returns the number of images contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.Quad">
            <summary>
            Returns quad used by the current image.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.CurrentFrame">
            <summary>
            Returns the current image.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.Index">
            <summary>
            Access to the index of the current frame.
            </summary>
            <remarks>
            The new value is <c>(Index+Count)%Count</c>. That way the 
            ++ and -- operators can be used to cycle through the frames.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.Size">
            <summary>
            Returns the maximum size of all frames.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.Item(System.Int32)">
            <summary>
            Returns the Frame via index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.Gui.Images.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Gui.Overlay">
            <summary>
            An overlay that can wrap another gui element and passes on mouse events.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Gui.Overlay.#ctor(Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates a new overlay element.
            </summary>
            <param name="normal">The image to use for normal state.</param>
            <param name="pressed">The image to use for pressed state.</param>
            <param name="hover">The image to use for mouseOver state.</param>
            <param name="disabled">The image to use for disabled state.</param>
        </member>
        <member name="M:Purple.Graphics.Gui.Overlay.OnMouse(Purple.Math.Vector3,Purple.Input.MouseButton,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="position">The current position of the mouse.</param>
            <param name="button">The button that is pressed or released.</param>
            <param name="pressed">Flag that indicates if button is pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="M:Purple.Graphics.Gui.Overlay.Cover(Purple.Graphics.Gui.IGuiElement)">
            <summary>
            Calculates the position of the overlay by using the guiElement that should be covered.
            </summary>
            <param name="element">The element to cover.</param>
        </member>
        <member name="T:Purple.Graphics.HLSL.ICompiler">
            <summary>
            abstract interface for a high level shader language compiler
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.HLSL.ICompiler.Load(System.IO.Stream,System.String,Purple.Graphics.HLSL.Profile)">
            <summary>
            loads a hlsl program from a stream
            </summary>
            <param name="stream">stream to load program from</param>
            <param name="entryPoint">entry point to the program in the hlsl source or null ("main")</param>
            <param name="profile">defines target format</param>
            <returns>loaded program or null in case of failure</returns>
        </member>
        <member name="M:Purple.Graphics.HLSL.ICompiler.Load(System.String,System.String,Purple.Graphics.HLSL.Profile)">
            <summary>
            loads a hlsl programm from a file
            </summary>
            <param name="fileName">name of file</param>
            <param name="entryPoint">entry point to the program in the hlsl source or null ("main")</param>
            <param name="profile">defines target format</param>
            <returns>loaded program or null in case of failure</returns>
        </member>
        <member name="P:Purple.Graphics.HLSL.ICompiler.CompilationError">
            <summary>
            get error string if Compile... returned null
            </summary>
        </member>
        <member name="T:Purple.Graphics.HLSL.IProgram">
            <summary>
            abstract interface for a high level shader language program
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.HLSL.IProgram.CompileVertexShader">
            <summary>
            get the vertex shader object from the program
            </summary>
        </member>
        <member name="M:Purple.Graphics.HLSL.IProgram.CompilePixelShader">
            <summary>
            get the pixel shader object from the program
            </summary>
        </member>
        <member name="M:Purple.Graphics.HLSL.IProgram.IsVertexShader">
            <summary>
            is this a vertex shader program?
            </summary>
            <returns>true if it's a vertex shader program</returns>
        </member>
        <member name="M:Purple.Graphics.HLSL.IProgram.IsPixelShader">
            <summary>
            is this a pixel shader program?
            </summary>
            <returns>true if it's a pixel shader program</returns>
        </member>
        <member name="P:Purple.Graphics.HLSL.IProgram.Source">
            <summary>
            returns the hlsl source for the given program
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.IProgram.Code">
            <summary>
            returns the compiled shader code
            or null if compilation failed ...
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.IProgram.EntryPoint">
            <summary>
            get entryPoint of programm
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.IProgram.Constants">
            <summary>
            access to parameters
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.IProgram.Profile">
            <summary>
            get profile
            </summary>
        </member>
        <member name="T:Purple.Graphics.HLSL.Profile">
            <summary>
            profile to use for compiling HLSL code
            profile gives information about supported ops, memory, register precision, ...
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.HLSL.Profile.IsVertexShader">
            <summary>
            returns true if profile covers vertex shader
            </summary>
            <returns>true if profile covers vertex shader</returns>
        </member>
        <member name="M:Purple.Graphics.HLSL.Profile.IsPixelShader">
            <summary>
            returns true if profile covers pixel shader
            </summary>
            <returns>true if profile covers pixel shader</returns>
        </member>
        <member name="M:Purple.Graphics.HLSL.Profile.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type.
            </summary>
            <param name="obj">obj to compare with</param>
            <returns>
            less than zero: This instance is less than obj.
            zero: This instance is equal to obj.
            greater than zero: This instance is greater than obj.
            </returns>
        </member>
        <member name="M:Purple.Graphics.HLSL.Profile.ToString">
            <summary>
            converts profile to a string
            </summary>
            <returns>profile name</returns>
        </member>
        <member name="M:Purple.Graphics.HLSL.Profile.FromString(System.String)">
            <summary>
            creates profile from string
            </summary>
            <param name="name">name of profile</param>
            <returns>profile or null in case of failure</returns>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.Version">
            <summary>
            version of profile
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.VS_1_1">
            <summary>
            vertexShader version 1.1
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.VS_2_0">
            <summary>
            vertexShader version 2.0
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.VS_2_X">
            <summary>
            vertexShader version 2.0 extended
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.PS_1_1">
            <summary>
            pixelShader version 1.1
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.PS_1_2">
            <summary>
            pixelShader version 1.2
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.PS_1_3">
            <summary>
            pixelShader version 1.3
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.PS_2_0">
            <summary>
            pixelShader version 2.0
            </summary>
        </member>
        <member name="P:Purple.Graphics.HLSL.Profile.PS_2_X">
            <summary>
            pixelShader version 2.0 extended
            </summary>
        </member>
        <member name="T:Purple.Graphics.IGraphicsStream">
            <summary>
            abstract interface for a graphics stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Upload">
            <summary>
            uploads from offline to online data
            </summary>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Upload(System.Int32,System.Int32)">
            <summary>
            uploads from offline to online data
            </summary>
            <param name="start">The start index for uploading.</param>
            <param name="length">The number of elements to upload</param>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Download">
            <summary>
            downloads online to offline data
            </summary>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Resize(System.Int32)">
            <summary>
            resizes the stream
            creates new stream, copies the old one to the new one
            !!!don't uses this method in speed critical sections!!!
            !!!this methods works with offline buffers only!!!
            </summary>
            <param name="size">new size</param>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.HasOfflineData">
            <summary>
            test if buffer has offline data
            </summary>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.HasOnlineData">
            <summary>
            test if buffer has online data
            </summary>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.DisposeOnlineData">
            <summary>
            disposes online data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.DisposeOfflineData">
            <summary>
            disposes offline data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Copy(Purple.Graphics.IGraphicsStream)">
            <summary>
            copies the data of the stream to this stream
            </summary>
            <param name="stream">stream to take data from</param>
        </member>
        <member name="M:Purple.Graphics.IGraphicsStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.Data">
            <summary>
            access to data of stream (fixed size)
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.Size">
            <summary>
            the size of the stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.Used">
            <summary>
            the number of used elements in the stream
            is set to size on construction, Init(size) and Resize(size)
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.Position">
            <summary>
            start position in physical graphics buffer
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.PhysicalBuffer">
            <summary>
            returns the physical buffer
            </summary>		
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.IGraphicsStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.IVertexStream">
            <summary>
            abstract interface
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.IVertexStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.IVertexStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="T:Purple.Graphics.IRecoverAble">
            <summary>
            interface which declares that an object can/must be recovered
            after the device is reset
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para> 
              <para>Last Change: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IRecoverAble.Release">
            <summary>
            Release the object data before the device gets reset.
            </summary>
        </member>
        <member name="M:Purple.Graphics.IRecoverAble.Recover">
            <summary>
            Recover object after a device reset.
            </summary>
        </member>
        <member name="M:Purple.Graphics.IRecoverAble.Recreate">
            <summary>
            Recreates the object after the device was recreated.
            </summary>
        </member>
        <member name="T:Purple.Graphics.RenderHandler">
            <summary>
            A handler for rendering stuff.
            </summary>
        </member>
        <member name="T:Purple.Graphics.UpdateHandler">
            <summary>
            Inform application to update constant.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ShaderConstantType">
            <summary>
            All different types of a ShaderConstant.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderConstantType.Float">
            <summary>
            The shader constant contains a float value.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderConstantType.Integer">
            <summary>
            The shader constant contains an integer.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderConstantType.Boolean">
            <summary>
            The shader constant contains a boolean.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderConstantType.Texture">
            <summary>
            The shader constant contains a texture.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderConstantType.Sampler">
            <summary>
            The shader constant contains a sampler.
            </summary>
        </member>
        <member name="F:Purple.Graphics.ShaderConstantType.Undefined">
            <summary>
            Undefined value.
            </summary>
        </member>
        <member name="T:Purple.Graphics.IShaderConstant">
            <summary>
            Abstract interface for a shader constant.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Update">
            <summary>
            Update the shader constant.
            </summary>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(System.Single[])">
            <summary>
            Set an array of floats.
            </summary>
            <param name="floats">Floats to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(System.Single)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(System.Int32[])">
            <summary>
            Set an array of ints.
            </summary>
            <param name="ints">The integers to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(System.Int32)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(System.Boolean[])">
            <summary>
            Set an array of bools.
            </summary>
            <param name="bools">The bools to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(System.Boolean)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(Purple.Math.Matrix4)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="matrix">The matrix to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(Purple.Math.Matrix3)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="matrix">The matrix to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(Purple.Math.Vector3)">
            <summary>
            Sets a 3d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(Purple.Math.Vector4)">
            <summary>
            Sets a 4d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(Purple.Math.Vector2)">
            <summary>
            Sets a 2d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.IShaderConstant.Set(Purple.Graphics.Core.ITexture)">
            <summary>
            Sets a texture.
            </summary>
            <param name="tex">The texture to set.</param>
        </member>
        <member name="P:Purple.Graphics.IShaderConstant.ConstantType">
            <summary>
            The type of the shader constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IShaderConstant.Values">
            <summary>
            The shader values.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IShaderConstant.Name">
            <summary>
            Name of the constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IShaderConstant.Semantic">
            <summary>
            Returns the semantic of the ShaderConstant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IShaderConstant.UpdateHandler">
            <summary>
            UpdateHandler for updating the shaderConstant before it is used.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IShaderConstant.Children">
            <summary>
            The child objects.
            </summary>
        </member>
        <member name="T:Purple.Graphics.IText">
            <summary>
            Abstract interface for a simple text object that allows to 
            render a certain string into a texture.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.IText.Draw(System.String,Purple.Math.Vector2,System.Int32)">
            <summary>
            Draws the text into the specified texture.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="pos">Position of text to draw.</param>
            <param name="color">Color to preclear the bitmap with or Color.Transparent.</param>
        </member>
        <member name="M:Purple.Graphics.IText.Draw(System.String,Purple.Math.Vector2)">
            <summary>
            Draws the text into the specified texture.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="pos">The target position.</param>
        </member>
        <member name="P:Purple.Graphics.IText.Font">
            <summary>
            Returns the used <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.Texture">
            <summary>
            Returns the texture, where the text is rendered into.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.Color">
            <summary>
            The color of the font.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.ShadowColor">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.OutlineColor">
            <summary>
            The color of the outline.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.Offset">
            <summary>
            Offset of the shadow and outline.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.HAlign">
            <summary>
            Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Purple.Graphics.IText.VAlign">
            <summary>
            Vertical alignment of the text.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.DirectionalLight">
            <summary>
            Implementation for a directional light.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Lighting.Light">
            <summary>
            The base class for all kind of lights.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.Light.Bind(Purple.Graphics.IShaderConstant)">
            <summary>
            Binds a shader constant to the light.
            </summary>
            <param name="constant">The constant to bind to the light.</param>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.Enabled">
            <summary>
            Flag that indicates if light is enabled.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.Diffuse">
            <summary>
            The diffuse color of the light.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.Ambient">
            <summary>
            The ambient color of the light.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.DiffuseVector">
            <summary>
            The diffuse color as a vector4.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.AmbientVector">
            <summary>
            The ambient color as a vector4.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.Vector4">
            <summary>
            Returns the light position/direction as a 4d vector.
            </summary>
            <remarks>The w component defines the the vector is a light position or 
            a light direction.</remarks>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.MaxRadius">
            <summary>
            The radius around the light that is influenced by it.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Light.LightType">
            <summary>
            Returns the type of the light.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Lighting.DirectionalLight.#ctor(Purple.Math.Vector3)">
            <summary>
            Creates a new instance of a directional light.
            </summary>
            <param name="direction">Direction of the light.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.DirectionalLight.UpdateObjectSpaceDirection(Purple.Graphics.ShaderConstant)">
            <summary>
            Method for updating a shader with the light direction in object space.
            </summary>
            <param name="sc">The shader to update.</param>
        </member>
        <member name="P:Purple.Graphics.Lighting.DirectionalLight.Direction">
            <summary>
            Direction of the spot light.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.DirectionalLight.Vector4">
            <summary>
            Returns the light position/direction as a 4d vector.
            </summary>
            <remarks>The w component defines the the vector is a light position or 
            a light direction.</remarks>
        </member>
        <member name="P:Purple.Graphics.Lighting.DirectionalLight.MaxRadius">
            <summary>
            The radius around the light that is influenced by it.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.DirectionalLight.LightType">
            <summary>
            Returns the type of the light.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.IShadowImplementation">
            <summary>
            An abstract interface for a shadow implementation.
            </summary>
            <remarks>
              <para>Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.IShadowImplementation.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="P:Purple.Graphics.Lighting.IShadowImplementation.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.IShadowImplementation.RenderAble">
            <summary>
            Returns the renderAble object for the shadow implementation.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.LightType">
            <summary>
            All available light types.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Lighting.LightType.DirectionalLight">
            <summary>
            A directional light.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Lighting.LightType.PointLight">
            <summary>
            A point light.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Lighting.LightType.SpotLight">
            <summary>
            A spot light.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.Material">
            <summary>
            The material of a certain object.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.Material.Fill(Purple.Graphics.IShaderConstant)">
            <summary>
            Fills a shaderConstant with the material.
            </summary>
            <param name="constant">The constant that takes the material.</param>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.Ambient">
            <summary>
            The ambient color of the material.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.AmbientVector">
            <summary>
            The ambient color as a vector4.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.Diffuse">
            <summary>
            The diffuse color of the material.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.DiffuseVector">
            <summary>
            The diffuse color as a vector4.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.Emissive">
            <summary>
            The emissive color of the material.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.EmissiveVector">
            <summary>
            The emissive color as a vector4.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.Specular">
            <summary>
            The specular color of the material.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.SpecularVector">
            <summary>
            The specular color as a vector4.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.Material.SpecularSharpness">
            <summary>
            The sharpness of the specular highlights.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.PointLight">
            <summary>
            Implementation for a point light.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.PointLight.#ctor(Purple.Math.Vector3)">
            <summary>
            Creates a new instance of a point light.
            </summary>
            <param name="position">World position of the point light.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.PointLight.Bind(Purple.Graphics.IShaderConstant)">
            <summary>
            Binds a shader constant to the light.
            </summary>
            <param name="constant">The constant to bind to the light.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.PointLight.UpdateObjectSpacePosition(Purple.Graphics.ShaderConstant)">
            <summary>
            Method for updating a shader with the light position in object space.
            </summary>
            <param name="sc">The shader to update.</param>
        </member>
        <member name="P:Purple.Graphics.Lighting.PointLight.Position">
            <summary>
            Position of the spot light.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.PointLight.Vector4">
            <summary>
            Returns the light position/direction as a 4d vector.
            </summary>
            <remarks>The w component defines the the vector is a light position or 
            a light direction.</remarks>
        </member>
        <member name="P:Purple.Graphics.Lighting.PointLight.MaxRadius">
            <summary>
            The radius around the light that is influenced by it.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.PointLight.LightType">
            <summary>
            Returns the type of the light.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.ShadowMapping">
            <summary>
            A class that helps with ShadowMapping.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            ShadowMapping is a two-pass technique.
            <para>First the scene is rendered from the light's point of view. The depth 
            at each pixel of the resulting image is recorded in a depth texture which is often 
            called shadow map.</para>
            <para>Next, the scene is rendered from the eye position, but with the shadow map 
            projected down from the light onto the scene. At each pixel, the depth sample is compared with the 
            fragment's distance from the light. This means that the fragment is shadwoed, and that it 
            shouldn't receive llight during shading.</para>
            Source: The CG Tutorial by Randima Fernando and Mark J. Kilgard
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowMapping.CreateShadowMap(System.Int32,System.Int32,Purple.Graphics.Format)">
            <summary>
            Creates a render target shadow map.
            </summary>
            <param name="width">Width of the shadowmap.</param>
            <param name="height">Height of the shadowmap.</param>
            <param name="format">The format of the shadowmap.</param>
            <returns>The shadowmap.</returns>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowMapping.RenderShadowMap(Purple.Graphics.Lighting.Light)">
            <summary>
            Renders the depth texture from the light's point of view.
            </summary>
            <param name="light">The light for which the depth texture is rendered.</param>
        </member>
        <member name="T:Purple.Graphics.Lighting.ShadowVolume">
            <summary>
            Create a shadow volume for a mesh.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowVolume.#ctor(Purple.Graphics.Geometry.Mesh,Purple.Graphics.Effect.IEffect)">
            <summary>
            Creates a <see cref="T:Purple.Graphics.Lighting.ShadowVolume"/> object.
            </summary>
            <param name="mesh">Mesh to create shadow volume for.</param>
            <param name="effect">The effect to use.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowVolume.CalcMethod(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4)">
            <summary>
            Calculates the best method to use for stencil shadowing.
            </summary>
            <remarks>ZPass method is faster than the ZFail method but not as robust. 
            This method tests if the viewer is within the shadow volume and decides which method 
            works best for the current settings.</remarks>
            <param name="light">The light.</param>
            <param name="world">The world matrix.</param>
            <returns>Returns the best StencilMethod.</returns>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowVolume.Calculate(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Calculates a the ShadowVolume for a certain lightPosition.
            </summary>
            <param name="light">The light that is used for casting the ShadowVolume.</param>
            <param name="world">The object to world space matrix.</param>
            <param name="recalcFaceNormals">Recalculates the face normals. This is just necessary if the vertices 
            of the mesh are manipulated by the CPU like for SoftwareSkinning.</param>
            <returns>The ShadowVolume in form of an Mesh.</returns>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowVolume.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Renders the shadowVolume with a certain effect.
            </summary>
            <param name="effect">The effect to use for rendering the shadow volume.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.ShadowVolume.PrepareMesh(Purple.Graphics.Geometry.Mesh)">
            <summary>
            Prepares a mesh for being used as a shadow Volume.
            </summary>
            <remarks>In fact the geometry is doubled and an FloatStream is added that contains 1.0f for 
            vertices that are used for the near cap and 0.0f for the far cap.</remarks>
            <param name="mesh">The mesh to prepare.</param>
        </member>
        <member name="P:Purple.Graphics.Lighting.ShadowVolume.Effect">
            <summary>
            The effect that is used by the shadowVolume.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.ShadowVolume.World">
            <summary>
            The world matrix for the current calculated shadowVolume;
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.ShadowVolume.Method">
            <summary>
            The method to use for stencil shadowing.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.ShadowVolume.StencilMethod">
            <summary>
            The method to use.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Lighting.ShadowVolume.StencilMethod.Automatic">
            <summary>
            The best method is detected automatically.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Lighting.ShadowVolume.StencilMethod.ZPass">
            <summary>
            The ZPass method is used (fast but not so robust).
            </summary>
        </member>
        <member name="F:Purple.Graphics.Lighting.ShadowVolume.StencilMethod.ZFail">
            <summary>
            The ZFail method is used (slower but robust).
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.SpotLight">
            <summary>
            Implementation for a spot light.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.SpotLight.#ctor(Purple.Math.Vector3)">
            <summary>
            Creates a new instance of a point light.
            </summary>
            <param name="position">World position of the point light.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.SpotLight.Bind(Purple.Graphics.IShaderConstant)">
            <summary>
            Binds a shader constant to the light.
            </summary>
            <param name="constant">The constant to bind to the light.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.SpotLight.UpdateObjectSpacePosition(Purple.Graphics.ShaderConstant)">
            <summary>
            Method for updating a shader with the light position in object space.
            </summary>
            <param name="sc">The shader to update.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.SpotLight.UpdateObjectSpaceDirection(Purple.Graphics.ShaderConstant)">
            <summary>
            Method for updating a shader with the light direction in object space.
            </summary>
            <param name="sc">The shader to update.</param>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.Position">
            <summary>
            Position of the spot light.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.Direction">
            <summary>
            Direction of the spot light.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.Alpha">
            <summary>
            The cut off angle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.CosAlpha">
            <summary>
            The cosinus of the cut off angle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.Vector4">
            <summary>
            Returns the light position/direction as a 4d vector.
            </summary>
            <remarks>The w component defines the the vector is a light position or 
            a light direction.</remarks>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.MaxRadius">
            <summary>
            The radius around the light that is influenced by it.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.SpotLight.LightType">
            <summary>
            Returns the type of the light.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Lighting.StencilShadow">
            <summary>
            Implementation for a stencil shadow.
            </summary>
            <remarks>
              <para>Markus Wöß</para>
              <para>Since: 0.7</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Lighting.StencilShadow.#ctor(Purple.Graphics.Geometry.Mesh)">
            <summary>
            Creates a new instance of a stencil shadow object.
            </summary>
            <param name="mesh">The mesh to cast shadow for.</param>
        </member>
        <member name="M:Purple.Graphics.Lighting.StencilShadow.PrepareShadowVolume">
            <summary>
            Prepares the current model to be used with stencil shadows.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Lighting.StencilShadow.UpdateShadow(Purple.Graphics.Lighting.Light,Purple.Math.Matrix4,System.Boolean)">
            <summary>
            Hack
            </summary>
            <param name="light"></param>
            <param name="world"></param>
            <param name="recalcNormals"></param>
        </member>
        <member name="P:Purple.Graphics.Lighting.StencilShadow.Effect">
            <summary>
            The effect used for rendering the shadow volume;
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.StencilShadow.Shadowed">
            <summary>
            Turn on and off shadowing.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Lighting.StencilShadow.RenderAble">
            <summary>
            Returns the renderAble object for the shadowImpl.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.AnimationAffector">
            <summary>
            An affector that updates the texture index of a particle.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticleAffector">
            <summary>
            An abstract interface for an affector that modifies a particle.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.IParticleAffector.Affect(System.Collections.IList,System.Int32,System.Single)">
            <summary>
            Updates the particles of the array.
            </summary>
            <param name="particles">Particles to affect.</param>
            <param name="filled">The number of active particles in the particles list.</param>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.AnimationAffector.#ctor(System.Single)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Particles.FadeAffector"/>.
            </summary>
            <param name="timePerFrame">The time per frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.AnimationAffector.Affect(System.Collections.IList,System.Int32,System.Single)">
            <summary>
            Updates the particles of the array.
            </summary>
            <param name="particles">Particles to affect.</param>
            <param name="filled">The number of active particles in the particles list.</param>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="T:Purple.Graphics.Particles.FadeAffector">
            <summary>
            An affector that updates the alpha value of a particle.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.FadeAffector.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Particles.FadeAffector"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.FadeAffector.Affect(System.Collections.IList,System.Int32,System.Single)">
            <summary>
            Updates the particles of the array.
            </summary>
            <param name="particles">Particles to affect.</param>
            <param name="filled">The number of active particles in the particles list.</param>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticle3d">
            <summary>
            The 3d extension to an <see cref="T:Purple.Graphics.Particles.IParticle"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle3d.Position">
            <summary>
            The current position of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle3d.Speed">
            <summary>
            The current speed of the particle.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticle2d">
            <summary>
            The 2d extension to an <see cref="T:Purple.Graphics.Particles.IParticle"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle2d.Position">
            <summary>
            The current position of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle2d.Speed">
            <summary>
            The current speed of the particle.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticleColor">
            <summary>
            The color extension to an <see cref="T:Purple.Graphics.Particles.IParticle"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleColor.Color">
            <summary>
            The color of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleColor.Alpha">
            <summary>
            The alpha value of the particle.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticleIndex">
            <summary>
            The texture index of the particle.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleIndex.TextureIndex">
            <summary>
            The index of the texture to use.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticleOrientation">
            <summary>
            Orientation of a chain particle.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleOrientation.Orientation">
            <summary>
            Orientation of the particle.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticle">
            <summary>
            An abstract interface for a particle.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.IParticle.Clone">
            <summary>
            Clones the current particle.
            </summary>
            <returns>The cloned particle.</returns>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle.Size">
            <summary>
            The size of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle.IsAlive">
            <summary>
            Returns true if particle is still alive.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle.Age">
            <summary>
            Returns the age of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticle.LifeTime">
            <summary>
            The age at which the particle dies.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticleEmitter">
            <summary>
            This is the base interface for objects that emit particles in a 
            certain way.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.IParticleEmitter.Update(Purple.Graphics.Particles.IParticleSystem,System.Single)">
            <summary>
            Updates the particle emitter object.
            </summary>
            <param name="particleSystem">The particleSystem that manages the emitted particles.</param>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleEmitter.Enabled">
            <summary>
            Flag that indicates if the emitter is enabled.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleEmitter.DefaultParticle">
            <summary>
            The particle that is cloned than modified and emitted.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.IParticleSystem">
            <summary>
            An abstract interface of a particle system.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.IParticleSystem.Update(System.Single)">
            <summary>
            Updates the particle system.
            </summary>
            <param name="deltaTime">The time since the last update.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.IParticleSystem.Emit(Purple.Graphics.Particles.IParticle)">
            <summary>
            Emits a new particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleSystem.IsAlive">
            <summary>
            Returns true if the particle system is still alive.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleSystem.Affectors">
            <summary>
            The affectors that affect the particle system.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.IParticleSystem.Emitters">
            <summary>
            A list of <see cref="T:Purple.Graphics.Particles.IParticleEmitter"/> objects that emit particles.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.LineEmitter">
            <summary>
            An emitter that emits particles on a given line.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Particles.SimpleEmitter">
            <summary>
            An emitter that emits cloned defaultParticle elements.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            This emitter is intended to be used as base emitter class. It clones the defaultParticle, that 
            may be modified by the inherited emitter and than emitted.
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Particles.SimpleEmitter.OnEmit">
            <summary>
            Event that gets fired when a new particle gets emitted.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.SimpleEmitter.#ctor(Purple.Graphics.Particles.IParticle)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Particles.SimpleEmitter"/>.
            </summary>
            <param name="defaultParticle">The particle that is cloned and emitted.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.SimpleEmitter.Update(Purple.Graphics.Particles.IParticleSystem,System.Single)">
            <summary>
            Updates the particle emitter object.
            </summary>
            <param name="particleSystem">The particleSystem that manages the emitted particles.</param>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.SimpleEmitter.CreateParticle(System.Single)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="frameTime">The factor that indicates at which time during the frame, the 
            particle gets emitted. (For interpolation purposes)</param>
        </member>
        <member name="M:Purple.Graphics.Particles.SimpleEmitter.Emit(Purple.Graphics.Particles.IParticleSystem,Purple.Graphics.Particles.IParticle,System.Single)">
            <summary>
            Emits the particle.
            </summary>
            <param name="particleSystem">The particleSystem that manages the emitted particles.</param>
            <param name="particle">Particle to emit.</param>
            <param name="frameTime">The factor that indicates at which time during the frame, the 
            particle gets emitted. (For interpolation purposes)</param>
        </member>
        <member name="P:Purple.Graphics.Particles.SimpleEmitter.Enabled">
            <summary>
            Flag that indicates if the emitter is enabled.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.SimpleEmitter.DefaultParticle">
            <summary>
            The particle that is cloned than modified and emitted.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.SimpleEmitter.ParticleCount">
            <summary>
            Number of particles that should be emitted per second or frame depending if the 
            <c>TimeBased</c> flag is set true.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.SimpleEmitter.TimeBased">
            <summary>
            Flag that indicates if <c>ParticleCount</c> particles should be emitted per second 
            or per frame.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.LineEmitter.#ctor(Purple.Graphics.Particles.IParticle)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Particles.LineEmitter"/>.
            </summary>
            <param name="defaultParticle">The particle that is cloned and emitted.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.LineEmitter.CreateParticle(System.Single)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="frameTime">The factor that indicates at which time during the frame, the 
            particle gets be emitted. (For interpolation purposes)</param>
        </member>
        <member name="P:Purple.Graphics.Particles.LineEmitter.Start">
            <summary>
            The start position of the line.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.LineEmitter.End">
            <summary>
            The end position of the line.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.LineEmitter.Random">
            <summary>
            Flag that indicates if the particle position should be a random position on the line 
            or if false, the frameTime parameter should be used for linear interpolation.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.LineParticle">
            <summary>
            An implementation of the <see cref="T:Purple.Graphics.Particles.IParticle"/> that is used by the 
            <see cref="T:Purple.Graphics.Particles.LineParticleSystem"/> class.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Particles.ParticleBase">
            <summary>
            An base class for an <see cref="T:Purple.Graphics.Particles.IParticle"/> class
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleBase.#ctor">
            <summary>
            Creates a new particle.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleBase.#ctor(Purple.Graphics.Particles.ParticleBase)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="particle">Particle to copy.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleBase.Clone">
            <summary>
            Clones the current particle.
            </summary>
            <returns>The cloned particle.</returns>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleBase.Size">
            <summary>
            The size of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleBase.IsAlive">
            <summary>
            Returns true if particle is still alive.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleBase.Age">
            <summary>
            Returns the age of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleBase.LifeTime">
            <summary>
            The age at which the particle dies.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticle.#ctor">
            <summary>
            Creates a new particle.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticle.#ctor(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="position">The inital position of the particle.</param>
            <param name="speed">The initial speed.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticle.#ctor(Purple.Graphics.Particles.LineParticle)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="particle">Particle to copy.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticle.Clone">
            <summary>
            Clones the current particle.
            </summary>
            <returns>The cloned particle.</returns>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticle.SetPosition(Purple.Graphics.Particles.IParticle,Purple.Math.Vector3)">
            <summary>
            Sets the position of the particle.
            </summary>
            <param name="particle">Particle for which to set position.</param>
            <param name="position">Position to set.</param>
        </member>
        <member name="P:Purple.Graphics.Particles.LineParticle.Position">
            <summary>
            The current position of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.LineParticle.Speed">
            <summary>
            The current speed of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.LineParticle.Color">
            <summary>
            The color of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.LineParticle.Alpha">
            <summary>
            The alpha value of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.LineParticle.Orientation">
            <summary>
            Orientation of the particle.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.LineParticleSystem">
            <summary>
            An <see cref="T:Purple.Graphics.Particles.IParticleSystem"/> that emits particles in form of a polygon chain.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para> 
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="T:Purple.Graphics.Particles.ParticleSystemBase">
            <summary>
            A base class for an <see cref="T:Purple.Graphics.Particles.IParticleSystem"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Particles.ParticleSystemBase.particles">
            <summary>
            The collection containing the particles.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.#ctor">
            <summary>
            Creates a new instance of a particle system.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.Update(System.Single)">
            <summary>
            Updates the particle system.
            </summary>
            <param name="deltaTime">The time since the last update.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.UpdateAge(System.Single)">
            <summary>
            Update the age of the particles.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.RemoveDeadParticles">
            <summary>
            Remove all particles that have have reached their maximum age.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.UpdateParticles(System.Single)">
            <summary>
            Apply all affectors.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.EmitParticles(System.Single)">
            <summary>
            Emit new particles.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the particle system.
            </summary>
            <param name="effect">The effect used for rendering the particle system.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystemBase.Emit(Purple.Graphics.Particles.IParticle)">
            <summary>
            Emits a new particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystemBase.Effect">
            <summary>
            The effect used for the particle system.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystemBase.Affectors">
            <summary>
            The affectors that affect the particle system.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystemBase.Emitters">
            <summary>
            A list of <see cref="T:Purple.Graphics.Particles.IParticleEmitter"/> objects that emit particles.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystemBase.IsAlive">
            <summary>
            Returns true if the particle system is still alive.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticleSystem.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a particle system.
            </summary>
            <param name="size">The max number of particles.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticleSystem.Update(System.Single)">
            <summary>
            Updates the particle system.
            </summary>
            <param name="deltaTime">The time since the last update.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.LineParticleSystem.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the particle system.
            </summary>
            <param name="effect">The effect used for rendering the particle system.</param>
        </member>
        <member name="P:Purple.Graphics.Particles.LineParticleSystem.Texture">
            <summary>
            The texture to use for the particles.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.Particle">
            <summary>
            An implementation of the <see cref="T:Purple.Graphics.Particles.IParticle"/> that is used by the 
            <see cref="T:Purple.Graphics.Particles.ParticleSystem"/> class.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle.#ctor">
            <summary>
            Creates a new particle.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle.#ctor(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="position">The inital position of the particle.</param>
            <param name="speed">The initial speed.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle.#ctor(Purple.Graphics.Particles.Particle)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="particle">Particle to copy.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle.Clone">
            <summary>
            Clones the current particle.
            </summary>
            <returns>The cloned particle.</returns>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle.SetPosition(Purple.Graphics.Particles.IParticle,Purple.Math.Vector3)">
            <summary>
            Sets the position of the particle.
            </summary>
            <param name="particle">Particle for which to set position.</param>
            <param name="position">Position to set.</param>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle.Position">
            <summary>
            The current position of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle.Speed">
            <summary>
            The current speed of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle.Color">
            <summary>
            The color of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle.Alpha">
            <summary>
            The alpha value of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle.TextureIndex">
            <summary>
            The index of the texture to use.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.Particle2d">
            <summary>
            An implementation of the <see cref="T:Purple.Graphics.Particles.IParticle"/> that is used by the 
            <see cref="T:Purple.Graphics.Particles.ParticleSystem2d"/> class.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle2d.#ctor">
            <summary>
            Creates a new particle.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle2d.#ctor(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="position">The inital position of the particle.</param>
            <param name="speed">The initial speed.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle2d.#ctor(Purple.Graphics.Particles.Particle2d)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="particle">Particle to copy.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.Particle2d.Clone">
            <summary>
            Clones the current particle.
            </summary>
            <returns>The cloned particle.</returns>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle2d.Position">
            <summary>
            The current position of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle2d.Speed">
            <summary>
            The current speed of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle2d.Color">
            <summary>
            The color of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle2d.Alpha">
            <summary>
            The alpha value of the particle.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.Particle2d.TextureIndex">
            <summary>
            The index of the texture to use.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.ParticleManager">
            <summary>
            The manager for particle systems.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleManager.Update(System.Single)">
            <summary>
            Updates the particle systems.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleManager.Render">
            <summary>
            Renders the particle systems.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleManager.Add(Purple.Graphics.Particles.IParticleSystem)">
            <summary>
            Adds an <see cref="T:Purple.Graphics.Particles.IParticleSystem"/> to the manager.
            </summary>
            <param name="particleSystem">The particle System to add.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleManager.Remove(Purple.Graphics.Particles.IParticleSystem)">
            <summary>
            Removes an <see cref="T:Purple.Graphics.Particles.IParticleSystem"/> from the list.
            </summary>
            <param name="particleSystem"></param>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleManager.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:Purple.Graphics.Particles.ParticleManager"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Particles.ParticleSystem">
            <summary>
            A standard implementation of an <see cref="T:Purple.Graphics.Particles.IParticleSystem"/> that 
            emits 3d particles.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystem.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a particle system.
            </summary>
            <param name="size">The max number of particles.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystem.Update(System.Single)">
            <summary>
            Updates the particle system.
            </summary>
            <param name="deltaTime">The time since the last update.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystem.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the particle system.
            </summary>
            <param name="effect">The effect used for rendering the particle system.</param>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystem.Texture">
            <summary>
            The texture to use for the particles.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystem.SubTextures">
            <summary>
            The subTextures that should be used for animation.
            </summary>
            <remarks>All SubTextures must use the same physical texture!</remarks>
        </member>
        <member name="T:Purple.Graphics.Particles.ParticleSystem2d">
            <summary>
            A standard implementation of an <see cref="T:Purple.Graphics.Particles.IParticleSystem"/> that 
            emits 2d particles.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>  
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystem2d.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a particle system.
            </summary>
            <param name="size">The max number of particles.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystem2d.Update(System.Single)">
            <summary>
            Updates the particle system.
            </summary>
            <param name="deltaTime">The time since the last update.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.ParticleSystem2d.Render(Purple.Graphics.Effect.IEffect)">
            <summary>
            Render the particle system.
            </summary>
            <param name="effect">The effect used for rendering the particle system.</param>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystem2d.Texture">
            <summary>
            The texture to use for the particles.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Particles.ParticleSystem2d.SubTextures">
            <summary>
            The subTextures that should be used for animation.
            </summary>
            <remarks>All SubTextures must use the same physical texture!</remarks>
        </member>
        <member name="T:Purple.Graphics.Particles.EmitHandler">
            <summary>
            Delegate that may be used to modify particles before they get emitted.
            </summary>
            <param name="particle">The particle to emit.</param>
            <param name="frameTime">The factor that indicates at which time during the frame, the 
            particle gets be emitted. (For interpolation purposes)</param>
        </member>
        <member name="T:Purple.Graphics.Particles.SpotEmitter">
            <summary>
            An emitter that emits particles at a certain position.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Particles.SpotEmitter.#ctor(Purple.Graphics.Particles.IParticle)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.Particles.SpotEmitter"/>.
            </summary>
            <param name="defaultParticle">The particle that is cloned and emitted.</param>
        </member>
        <member name="M:Purple.Graphics.Particles.SpotEmitter.CreateParticle(System.Single)">
            <summary>
            Creates a new particle.
            </summary>
            <param name="frameTime">The factor that indicates at which time during the frame, the 
            particle gets be emitted. (For interpolation purposes)</param>
        </member>
        <member name="P:Purple.Graphics.Particles.SpotEmitter.Position">
            <summary>
            Sets the position of the emitter.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Semantic">
            <summary>
            This structure defines how a stream gets mapped to a vertex stream.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Semantic.Usage">
            <summary>
            Usage of parameter.
            </summary>
        </member>
        <member name="F:Purple.Graphics.Semantic.UsageIndex">
            <summary>
            Usage index of parameter.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Semantic.ToString">
            <summary>
            Returns a string describing the object.
            </summary>
            <returns>A string describing the object.</returns>
        </member>
        <member name="M:Purple.Graphics.Semantic.op_Equality(Purple.Graphics.Semantic,Purple.Graphics.Semantic)">
            <summary>
            Tests if two semantic objects are equal.
            </summary>
            <param name="a">The first semantic.</param>
            <param name="b">The secod semantic.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Purple.Graphics.Semantic.op_Inequality(Purple.Graphics.Semantic,Purple.Graphics.Semantic)">
            <summary>
            Tests if two semantic objects are not equal
            </summary>
            <param name="a">The first semantic.</param>
            <param name="b">The secod semantic.</param>
            <returns>True if not equal.</returns>
        </member>
        <member name="M:Purple.Graphics.Semantic.Equals(System.Object)">
            <summary>
            Tests if two semantic objects are equal.
            </summary>
            <param name="obj">Object to test with.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:Purple.Graphics.Semantic.GetHashCode">
            <summary>
            Returns the hash code of the current object.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Purple.Graphics.Semantic.#ctor(Purple.Graphics.DeclarationUsage,System.Int32)">
            <summary>
            Creates a new instance of a semantic object.
            </summary>
            <param name="usage">Usage of parameter.</param>
            <param name="usageIndex">UsageIndex of parameter.</param>
        </member>
        <member name="P:Purple.Graphics.Semantic.Undefined">
            <summary>
            Returns an undefined semantic object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Semantic.Position">
            <summary>
            Returns the semantic for the first Position stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Semantic.Position2">
            <summary>
            Returns the semantic for the second Position stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Semantic.BoneWeight">
            <summary>
            Returns the semantic for a bone weights stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Semantic.BoneIndices">
            <summary>
            Returns the semantic for a bone indices stream.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ShaderConstant">
            <summary>
            A shader constant.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.#ctor(System.String)">
            <summary>
            Creates a new ShaderConstant.
            </summary>
            <param name="name">Name of the constant.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.#ctor(System.String,Purple.Graphics.UpdateHandler)">
            <summary>
            Creates a new ShaderConstant.
            </summary>
            <param name="name">Name of the constant.</param>
            <param name="updateHandler">The updateHandler to use.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Update">
            <summary>
            Update the shader constant.
            </summary>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(System.Single[])">
            <summary>
            Set an array of floats.
            </summary>
            <param name="floats">Floats to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(System.Single)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(System.Int32[])">
            <summary>
            Set an array of ints.
            </summary>
            <param name="ints">The integers to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(System.Int32)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(System.Boolean[])">
            <summary>
            Set an array of bools.
            </summary>
            <param name="bools">The bools to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(System.Boolean)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(Purple.Math.Matrix4)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="matrix">The matrix to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(Purple.Math.Matrix3)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="matrix">The matrix to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(Purple.Math.Vector3)">
            <summary>
            Sets a 3d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(Purple.Math.Vector4)">
            <summary>
            Sets a 4d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(Purple.Math.Vector2)">
            <summary>
            Sets a 2d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.Set(Purple.Graphics.Core.ITexture)">
            <summary>
            Sets a texture.
            </summary>
            <param name="tex">The texture to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstant.AddChild(System.String,System.Int32)">
            <summary>
            Adds a child shader constant to the current constant. This may be a field of 
            a structure.
            </summary>
            <param name="name">Name of the child.</param>
            <param name="registerIndex">The used registerIndex.</param>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.ConstantType">
            <summary>
            The type of the shader constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.Values">
            <summary>
            The shader values.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.Name">
            <summary>
            Name of the constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.Semantic">
            <summary>
            Returns the semantic of the ShaderConstant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.Children">
            <summary>
            The child objects.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.UpdateHandler">
            <summary>
            UpdateHandler for updating the shaderConstant before it is used.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstant.LastUpdate">
            <summary>
            This value can be changed by the UpdateHandler. Everytime e.g. the matrices change, the counter is increased. 
            The UpdateHandler can than easily test if the current ShaderConstant is up to date.
            </summary>
        </member>
        <member name="T:Purple.Graphics.ShaderConstants">
            <summary>
            Constant table allows to set shader constants by name.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            The constants are shadowed until the shader object is applied.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.ShaderConstants.GetEnumerator">
            <summary>
            Get enumerator for shader constants.
            </summary>
            <returns>The enumerator for shader constants.</returns>
        </member>
        <member name="M:Purple.Graphics.ShaderConstants.#ctor">
            <summary>
            Creates a new ShaderConstant pool.
            </summary>
        </member>
        <member name="M:Purple.Graphics.ShaderConstants.Contains(System.String)">
            <summary>
            Test if the collection contains a constant with a given name.
            </summary>
            <param name="name">Name of constant.</param>
            <returns>True if constant is contained by table.</returns>
        </member>
        <member name="M:Purple.Graphics.ShaderConstants.Add(Purple.Graphics.IShaderConstant)">
            <summary>
            Adds a new shader constant to the list.
            </summary>
            <param name="constant">The ShaderConstant object to add.</param>
        </member>
        <member name="P:Purple.Graphics.ShaderConstants.Count">
            <summary>
            The number of shader constants contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstants.Instance">
            <summary>
            Get instance of the global shader constant pool.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstants.Item(System.String)">
            <summary>
            Get constant by name.
            </summary>
            <remarks>Name is not case sensitive.</remarks>
        </member>
        <member name="T:Purple.Graphics.ShaderConstantWrapper">
            <summary>
            A wrapper for a shader constant.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.#ctor(Purple.Graphics.IShaderConstant,System.Object)">
            <summary>
            Creates a new ShaderConstantWrapper.
            </summary>
            <param name="constant">The constant to wrap.</param>
            <param name="mappingObject">The object that is used for mapping it to the constant table on the cpu or to a native shader parameter.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Update">
            <summary>
            Update the shader constant.
            </summary>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(System.Single[])">
            <summary>
            Set an array of floats.
            </summary>
            <param name="floats">Floats to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(System.Single)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(System.Int32[])">
            <summary>
            Set an array of ints.
            </summary>
            <param name="ints">The integers to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(System.Int32)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(System.Boolean[])">
            <summary>
            Set an array of bools.
            </summary>
            <param name="bools">The bools to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(System.Boolean)">
            <summary>
            Set value of shader constant.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(Purple.Math.Matrix4)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="matrix">The matrix to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(Purple.Math.Matrix3)">
            <summary>
            Sets a matrix.
            </summary>
            <param name="matrix">The matrix to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(Purple.Math.Vector3)">
            <summary>
            Sets a 3d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(Purple.Math.Vector4)">
            <summary>
            Sets a 4d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(Purple.Math.Vector2)">
            <summary>
            Sets a 2d vector.
            </summary>
            <param name="vec">Vector to set.</param>
        </member>
        <member name="M:Purple.Graphics.ShaderConstantWrapper.Set(Purple.Graphics.Core.ITexture)">
            <summary>
            Sets a texture.
            </summary>
            <param name="tex">The texture to set.</param>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.InternalConstant">
            <summary>
            Returns the wrapped constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.MappingObject">
            <summary>
            Returns the object that is used for mapping it to the constant table on the cpu 
            or the a parameter of a shader.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.ConstantType">
            <summary>
            The type of the shader constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.Values">
            <summary>
            The shader values.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.Name">
            <summary>
            Name of the constant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.Semantic">
            <summary>
            Returns the semantic of the ShaderConstant.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.Children">
            <summary>
            The child objects.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.UpdateHandler">
            <summary>
            UpdateHandler for updating the shaderConstant before it is used.
            </summary>
        </member>
        <member name="P:Purple.Graphics.ShaderConstantWrapper.Annotations">
            <summary>
            List of annotations.
            </summary>
        </member>
        <member name="T:Purple.Graphics.States.AlphaState">
            <summary>
            RenderState for alpha handling.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.#ctor(System.Boolean,Purple.Graphics.Blend,Purple.Graphics.Blend)">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.States.AlphaState"/> object.
            </summary>
            <param name="alphaEnable">Flag that indicates if alpha blending is enabled.</param>
            <param name="sourceBlend">Sets the source blend factor.</param>
            <param name="destinationBlend">Sets the destination blend factor.</param>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.#ctor(Purple.Graphics.Device)">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.States.AlphaState"/> object.
            </summary>		
            <param name="device">The <see cref="T:Purple.Graphics.Device"/> from which to fill this <see cref="T:Purple.Graphics.IRenderState"/>.</param>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.Apply">
            <summary>
            Applies this <see cref="T:Purple.Graphics.IRenderState"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.Apply(System.Boolean,Purple.Graphics.Blend,Purple.Graphics.Blend)">
            <summary>
            Applies this <see cref="T:Purple.Graphics.IRenderState"/>.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a whole 
            <see cref="T:Purple.Graphics.IRenderState"/> object.
            </remarks>
            <param name="alphaEnable">Flag that indicates if alpha blending is enabled.</param>
            <param name="sourceBlend">Sets the source blend factor.</param>
            <param name="destinationBlend">Sets the destination blend factor.</param>
        </member>
        <member name="M:Purple.Graphics.States.AlphaState.Apply(System.Boolean)">
            <summary>
            Applies this <see cref="T:Purple.Graphics.IRenderState"/>.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a whole 
            <see cref="T:Purple.Graphics.IRenderState"/> object.
            </remarks>
            <param name="alphaEnable">Flag that indicates if alpha blending is enabled.</param>
        </member>
        <member name="T:Purple.Graphics.States.CCWStencilState">
            <summary>
            RenderState for stencil stuff.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.States.CCWStencilState.Function">
            <summary>
            The stencil value of the pixel is compared with the stencil-buffer value. If the stencil value of the pixel passes the comparison function, the pixel is written.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.CCWStencilState.Enable">
            <summary>
            True to turn on two sided stencil testing.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.CCWStencilState.Fail">
            <summary>
            The stencil operation to perform when the stencil test fails.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.CCWStencilState.Pass">
            <summary>
            The stencil operation to perform when the stencil test passes.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.CCWStencilState.ZBufferFail">
            <summary>
            The stencil operation to perform when the stencil test passes but the zBuffer test fails.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.#ctor(System.Boolean,Purple.Graphics.Compare,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.States.StencilState"/>.
            </summary>
            <param name="enable">True to turn on two sided stencil testing.</param>
            <param name="function">The compare function to use for the stencil test.</param>
            <param name="pass">The stencil operation to perform when the stencil test passes.</param>
            <param name="fail">The stencil operation to perform when the stencil test fails.</param>
            <param name="zBufferFail">The stencil operation to perform when the stencil test passes but the zBuffer test fails.</param>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.#ctor(Purple.Graphics.Device)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.States.StencilState"/>.
            </summary>		
            <param name="device">The device from which to fill this RenderState.</param>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.Apply">
            <summary>
            Applies the renderState.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.Apply(System.Boolean,Purple.Graphics.Compare,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation)">
            <summary>
            Applies the <see cref="T:Purple.Graphics.States.StencilState"/> defined by the passed parameters.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a renderState object.
            </remarks>
            <param name="enable">True to turn on two sided stencil testing.</param>
            <param name="function">Stencil compare function.</param>
            <param name="pass">The operation to perform if the stencil test passes.</param>
            <param name="fail">The operation to perform if the stencil test fails.</param>
            <param name="zBufferFail">The operation to perform if the stencil test passes but the zBuffer Test fails.</param>
        </member>
        <member name="M:Purple.Graphics.States.CCWStencilState.Apply(System.Boolean)">
            <summary>
            Enables, disables two sided stencil buffer testing.
            </summary>
            <param name="enable">Flag that indicates if stencil testing should be enabled.</param>
        </member>
        <member name="P:Purple.Graphics.States.CCWStencilState.Default">
            <summary>
            Returns the default <see cref="T:Purple.Graphics.States.StencilState"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.States.ClearState">
            <summary>
            RenderState for clearing the buffers.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.States.ClearState.#ctor(System.Int32,System.Single,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.States.ClearState"/>.
            </summary>
            <param name="clearColor">The color for clearing the framebuffer.</param>
            <param name="clearDepth">The value to clear the zBuffer with.</param>
            <param name="clearStencil">The value to clear the stencil buffer with.</param>
        </member>
        <member name="M:Purple.Graphics.States.ClearState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.ClearState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.ClearState.Apply">
            <summary>
            Applies this <see cref="T:Purple.Graphics.IRenderState"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.ClearState.Apply(System.Int32,System.Single,System.Int32)">
            <summary>
            Applies this <see cref="T:Purple.Graphics.IRenderState"/>.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a whole 
            <see cref="T:Purple.Graphics.IRenderState"/> object.
            </remarks>
            <param name="clearColor">The color to use for clearing the frameBuffer.</param>
            <param name="clearDepth">The value to use for clearing the depthBuffer.</param>
            <param name="clearStencil">The value to use for clearing the clearStencil.</param>
        </member>
        <member name="T:Purple.Graphics.States.CullModeState">
            <summary>
            RenderState CullMode
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.States.CullModeState.Mode">
            <summary>
            Default Value: CounterClockwise
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.CullModeState.#ctor(Purple.Graphics.CullMode)">
            <summary>
            intialisation
            </summary>
            <param name="cullMode">to set</param>
        </member>
        <member name="M:Purple.Graphics.States.CullModeState.#ctor(Purple.Graphics.Device)">
            <summary>
            intialisation
            </summary>		
            <param name="device">The device from which to fill this RenderState</param>
        </member>
        <member name="M:Purple.Graphics.States.CullModeState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.CullModeState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.CullModeState.Apply">
            <summary>
            applies this renderState
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.CullModeState.Apply(Purple.Graphics.CullMode)">
            <summary>
            applies the render state
            use this static method if you don't want to allocate a renderState object
            </summary>
            <param name="cullMode">to set</param>
        </member>
        <member name="P:Purple.Graphics.States.CullModeState.Default">
            <summary>
            returns the default renderState
            </summary>
        </member>
        <member name="T:Purple.Graphics.States.RenderStates">
            <summary>
            Collection of <see cref="T:Purple.Graphics.IRenderState"/>s.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.#ctor">
            <summary>
            Creates an empty collection of RenderState objects.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.#ctor(Purple.Graphics.IRenderState[])">
            <summary>
            Initializes the <see cref="T:Purple.Graphics.States.RenderStates"/> collection with an array of <see cref="T:Purple.Graphics.IRenderState"/> objects.
            </summary>
            <param name="states">The array of <see cref="T:Purple.Graphics.IRenderState"/> objects.</param>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.Add(Purple.Graphics.IRenderState)">
            <summary>
            Adds an <see cref="T:Purple.Graphics.IRenderState"/> to the list.
            </summary>
            <param name="state">The object to add.</param>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.Remove(Purple.Graphics.IRenderState)">
            <summary>
            Removes a certain <see cref="T:Purple.Graphics.IRenderState"/> from the list.
            </summary>
            <param name="state">The object to remove.</param>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.Clear">
            <summary>
            Clears the current list.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.ToArray">
            <summary>
            Converts the collection to an array of <see cref="T:Purple.Graphics.IRenderState"/> objects.
            </summary>
            <returns>Array of <see cref="T:Purple.Graphics.IRenderState"/> objects.</returns>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.States.RenderStates.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.States.RenderStates.Count">
            <summary>
            Returns the number of elements contained by the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.States.RenderStates.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:Purple.Graphics.IRenderState"/> for a certain index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.States.RenderStates.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.States.RenderStates.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.States.StencilState">
            <summary>
            RenderState for stencil stuff.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.States.StencilState.Function">
            <summary>
            The stencil value of the pixel is compared with the stencil-buffer value. If the stencil value of the pixel passes the comparison function, the pixel is written.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.StencilState.Enable">
            <summary>
            True to turn on stencil testing.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.StencilState.Fail">
            <summary>
            The stencil operation to perform when the stencil test fails.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.StencilState.Pass">
            <summary>
            The stencil operation to perform when the stencil test passes.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.StencilState.ZBufferFail">
            <summary>
            The stencil operation to perform when the stencil test passes but the zBuffer test fails.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.#ctor(System.Boolean,Purple.Graphics.Compare,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.States.StencilState"/>.
            </summary>
            <param name="enable">True to turn on stencil testing.</param>
            <param name="function">The compare function to use for the stencil test.</param>
            <param name="fail">The stencil operation to perform when the stencil test fails.</param>
            <param name="pass">The stencil operation to perform when the stencil test passes.</param>
            <param name="zBufferFail">The stencil operation to perform when the stencil test passes but the zBuffer test fails.</param>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.#ctor(Purple.Graphics.Device)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.States.StencilState"/>.
            </summary>		
            <param name="device">The device from which to fill this RenderState.</param>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.Apply">
            <summary>
            Applies the renderState.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.Apply(System.Boolean,Purple.Graphics.Compare,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation,Purple.Graphics.StencilOperation)">
            <summary>
            Applies the <see cref="T:Purple.Graphics.States.StencilState"/> defined by the passed parameters.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a renderState object.
            </remarks>
            <param name="enable">True to turn on stencil testing.</param>
            <param name="function">Stencil compare function.</param>
            <param name="pass">The operation to perform if the stencil test passes.</param>
            <param name="fail">The operation to perform if the stencil test fails.</param>
            <param name="zBufferFail">The operation to perform if the stencil test passes but the zBuffer Test fails.</param>
        </member>
        <member name="M:Purple.Graphics.States.StencilState.Apply(System.Boolean)">
            <summary>
            Enables, disables the stencil buffer.
            </summary>
            <param name="enable">Flag that indicates if stencil testing should be enabled.</param>
        </member>
        <member name="P:Purple.Graphics.States.StencilState.Default">
            <summary>
            Returns the default <see cref="T:Purple.Graphics.States.StencilState"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.States.TextureAddressState">
            <summary>
            RenderState TextureFilter
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.States.TextureAddressState.Stage">
            <summary>
            TextureStage to set address mode for.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.TextureAddressState.U">
            <summary>
            Address for the first coordinate.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.TextureAddressState.V">
            <summary>
            Address for the second coordinate.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.TextureAddressState.W">
            <summary>
            Address for the third coordinate.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.TextureAddressState.#ctor(System.Int32,Purple.Graphics.TextureAddress,Purple.Graphics.TextureAddress,Purple.Graphics.TextureAddress)">
            <summary>
            Creates a new state object.
            </summary>
            <param name="stage">TextureStage to set filters for.</param>
            <param name="u">Address type for the first texture coordinate.</param>
            <param name="v">Address type for the second texture coordinate.</param>
            <param name="w">Address type for the third texture coordinate.</param>
        </member>
        <member name="M:Purple.Graphics.States.TextureAddressState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.TextureAddressState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.TextureAddressState.Apply">
            <summary>
            Applies this renderState.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.TextureAddressState.Apply(System.Int32,Purple.Graphics.TextureAddress,Purple.Graphics.TextureAddress,Purple.Graphics.TextureAddress)">
            <summary>
            Applies the render state.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a renderState object.
            </remarks>
            <param name="stage">TextureStage to set address mode for.</param>
            <param name="u">Address type for the first texture coordinate.</param>
            <param name="v">Address type for the second texture coordinate.</param>
            <param name="w">Address type for the third texture coordinate.</param>
        </member>
        <member name="M:Purple.Graphics.States.TextureAddressState.Apply(System.Int32,Purple.Graphics.TextureAddress)">
            <summary>
            Applies the render state.
            </summary>
            <remarks>
            Use this static method if you don't want to allocate a renderState object.
            </remarks>
            <param name="stage">TextureStage to set address mode for.</param>
            <param name="mode">Address mode for all texture coordinates.</param>
        </member>
        <member name="T:Purple.Graphics.States.TextureFilterState">
            <summary>
            RenderState TextureFilter
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.States.TextureFilterState.Stage">
            <summary>
            textureStage to set filters for
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.TextureFilterState.MinFilter">
            <summary>
            Minification filter
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.TextureFilterState.MagFilter">
            <summary>
            Magnification filter
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.TextureFilterState.MipFilter">
            <summary>
            Mipmap filter
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.TextureFilterState.#ctor(System.Int32,Purple.Graphics.TextureFilter,Purple.Graphics.TextureFilter,Purple.Graphics.TextureFilter)">
            <summary>
            initialisation
            </summary>
            <param name="stage">textureStage to set filters for</param>
            <param name="minFilter">Minification filter</param>
            <param name="magFilter">Magnifiaction filter</param>
            <param name="mipFilter">Mipmap filter</param>
        </member>
        <member name="M:Purple.Graphics.States.TextureFilterState.#ctor(System.Int32,Purple.Graphics.Device)">
            <summary>
            intialisation
            </summary>		
            <param name="stage">The texture stage from which to fill this RenderState</param>
            <param name="device">The device from which to fill this RenderState</param>
        </member>
        <member name="M:Purple.Graphics.States.TextureFilterState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.TextureFilterState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.TextureFilterState.Apply">
            <summary>
            applies this renderState
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.TextureFilterState.Apply(System.Int32,Purple.Graphics.TextureFilter,Purple.Graphics.TextureFilter,Purple.Graphics.TextureFilter)">
            <summary>
            applies the render state
            use this static method if you don't want to allocate a renderState object
            </summary>
            <param name="stage">textureStage to set filters for</param>
            <param name="minFilter">Minification filter</param>
            <param name="magFilter">Magnifiaction filter</param>
            <param name="mipFilter">Mipmap filter</param>
        </member>
        <member name="P:Purple.Graphics.States.TextureFilterState.Default">
            <summary>
            returns the default renderState
            </summary>
        </member>
        <member name="T:Purple.Graphics.States.ZBufferState">
            <summary>
            RenderState ZBufferState
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.States.ZBufferState.Function">
            <summary>
            The depth value of the pixel is compared with the depth-buffer value. If the depth value of the pixel passes the comparison function, the pixel is written.
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.ZBufferState.Enable">
            <summary>
             true to turn on depth-buffering state, false to disable depth buffering. 
            </summary>
        </member>
        <member name="F:Purple.Graphics.States.ZBufferState.WriteEnable">
            <summary>
            true to enable the application to write to the depth buffer.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.#ctor(System.Boolean,Purple.Graphics.Compare,System.Boolean)">
            <summary>
            initialisation
            </summary>
            <param name="enable">true to turn on ZBuffer</param>
            <param name="function">to use for deciding to draw or reject pixel</param>
            <param name="writeEnable">true to turn on writting to the zBuffer</param>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.#ctor(Purple.Graphics.Device)">
            <summary>
            intialisation
            </summary>		
            <param name="device">The device from which to fill this RenderState</param>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.Save">
            <summary>
            Saves the current state into the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.Clone">
            <summary>
            Clones the current <see cref="T:Purple.Graphics.IRenderState"/> object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.Apply">
            <summary>
            applies this renderState
            </summary>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.Apply(System.Boolean,Purple.Graphics.Compare,System.Boolean)">
            <summary>
            applies the render state
            use this static method if you don't want to allocate a renderState object
            </summary>
            <param name="enable">true to turn on ZBuffer</param>
            <param name="function">to use for deciding to draw or reject pixel</param>
            <param name="writeEnable">true to turn on writting to the zBuffer</param>
        </member>
        <member name="M:Purple.Graphics.States.ZBufferState.Apply(System.Boolean)">
            <summary>
            applies the render state
            </summary>
            <param name="enable">true to turn zBuffer</param>
        </member>
        <member name="P:Purple.Graphics.States.ZBufferState.Default">
            <summary>
            returns the default renderState
            </summary>
        </member>
        <member name="T:Purple.Graphics.StreamFactory">
            <summary>
            The <see cref="T:Purple.Graphics.StreamFactory"/> can be used to create <see cref="T:Purple.Graphics.IGraphicsStream"/> 
            objects via type or name.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.StreamFactory.Bind(System.String,System.Type,Purple.Graphics.VertexElement)">
            <summary>
            Binds a certain name of a <see cref="T:Purple.Graphics.IGraphicsStream"/> to its type.
            </summary>
            <param name="name">Name of <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <param name="type">The type of the <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <param name="element">The default <see cref="M:Purple.Graphics.StreamFactory.VertexElement(System.Type)"/> of the stream.</param>
        </member>
        <member name="M:Purple.Graphics.StreamFactory.ToType(System.String)">
            <summary>
            Converts the <see cref="T:Purple.Graphics.IGraphicsStream"/> name to the type.
            </summary>
            <param name="name">Name of <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <returns>Type of <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.StreamFactory.VertexElement(System.Type)">
            <summary>
            Returns the <see cref="M:Purple.Graphics.StreamFactory.VertexElement(System.Type)"/> of an <see cref="T:Purple.Graphics.IGraphicsStream"/> 
            specified by the type.
            </summary>
            <param name="type">Type of <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <returns>The <see cref="M:Purple.Graphics.StreamFactory.VertexElement(System.Type)"/> of an <see cref="T:Purple.Graphics.IGraphicsStream"/> 
            specified by the type.</returns>
        </member>
        <member name="M:Purple.Graphics.StreamFactory.Create(System.String,System.Int32)">
            <summary>
            Creates a new instance of a certain <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <param name="name">The name of the <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <param name="size">The initial size of the <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <returns>A new instance of a certain <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.StreamFactory.Create(System.Type,System.Int32)">
            <summary>
            Creates a new instance of a certain <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <param name="type">The type of the <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <param name="size">The initial size of the <see cref="T:Purple.Graphics.IGraphicsStream"/>.</param>
            <returns>A new instance of a certain <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.StreamFactory.Instance">
            <summary>
            Returns the singleton instance of a <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.SubTexture">
            <summary>
            A SubTexture is a part of another texture. A SubTexture simplifies
            texture sharing which might result in higher performance.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.SubTexture.#ctor(System.Drawing.RectangleF,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates an instance of a SubTexture.
            </summary>
            <param name="textureCoordinates">New texture coordinates relativ to parent texture [0;1].</param>
            <param name="parentTexture">The texture to create the subTexture from.</param>
        </member>
        <member name="M:Purple.Graphics.SubTexture.#ctor(System.Drawing.Rectangle,Purple.Graphics.Core.ITexture2d)">
            <summary>
            Creates an instance of a SubTexture.
            </summary>
            <param name="tc">New texture coordinates in pixels.</param>
            <param name="parentTexture">The texture to create the subTexture from.</param>
        </member>
        <member name="M:Purple.Graphics.SubTexture.CalcSubCoordinates(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            create the new sub texture coordinates from the texture coordinates provided relative to the
            parent texture and parent coordinates
            </summary>
            <param name="textureCoordinates">new texture coordinates relativ to parent texture</param>
            <param name="parentCoordinates">absolute coordinates of the parent texture</param>
            <returns>absolute texture coordinates</returns>
        </member>
        <member name="M:Purple.Graphics.SubTexture.Create(Purple.Graphics.Core.ITexture2d,System.Int32,System.Int32)">
            <summary>
            Creates a certain number of subTextures by splitting up a texture into regions of same size.
            </summary>
            <param name="parent">The parent texture to split up.</param>
            <param name="totalNum">Total number of subTextures.</param>
            <param name="columns">The number of columns.</param>
            <returns>The array of subTextures.</returns>
        </member>
        <member name="M:Purple.Graphics.SubTexture.Create(Purple.Graphics.Core.ITexture2d,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new subTexture.
            </summary>
            <param name="parent">The parent texture to split up.</param>
            <param name="index">The current index of the subTexture to create.</param>
            <param name="totalNum">Total number of subTextures.</param>
            <param name="columns">The number of columns.</param>
            <returns>The subTexture.</returns>
        </member>
        <member name="M:Purple.Graphics.SubTexture.CopyBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Copies a rectangular area of the bitmap to the texture.
            </summary>
            <param name="bitmap">The bitmap to copy.</param>
            <param name="source">The source rectangle (Rectangle.Empty to copy the whole bitmap).</param>
            <param name="target">The target position.</param>
        </member>
        <member name="M:Purple.Graphics.SubTexture.Clear(System.Drawing.Color)">
            <summary>
            Clears the texture to a certain color.
            </summary>
            <param name="color">Color to use for clearing texture.</param>
        </member>
        <member name="M:Purple.Graphics.SubTexture.CompareTo(System.Object)">
            <summary>
            compares two texture
            </summary>
            <param name="obj">2nd texture</param>
            <returns>0 if same physical texture</returns>
        </member>
        <member name="M:Purple.Graphics.SubTexture.Purple#Graphics#Core#ITexture#Upload">
            <summary>
            Uploads the offline data to the gpu.
            </summary>
        </member>
        <member name="M:Purple.Graphics.SubTexture.Purple#Graphics#Core#ITexture#DisposeOnlineData">
            <summary>
            Disposes the online data.
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Usage">
            <summary>
            The usage of the texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Surfaces">
            <summary>
            The surfaces of the texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.ImageDescription">
            <summary>
            returns the description of the current image
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Parent">
            <summary>
            returns the parentTexture of the current texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Root">
            <summary>
            returns the physical texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.TextureCoordinates">
            <summary>
            absolute texture coordinates
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Id">
            <summary>
            returns the id of the texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Description">
            <summary>
            description of the texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.SubTexture.Purple#Graphics#Core#ITexture#HasOnlineData">
            <summary>
            Returns true if the texture was already uploaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Purple.Graphics.Terrain.HeightMap">
            <summary>
            A simple terrain generator that uses a heightmap.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Terrain.HeightMap.Generate(System.Drawing.Bitmap)">
            <summary>
            Generates a heightmap from a Bitmap.
            </summary>
            <param name="bmp">The bitmap to use.</param>
        </member>
        <member name="M:Purple.Graphics.Terrain.HeightMap.Generate(System.String)">
            <summary>
            Generates a heightmap from a bitmap file.
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="P:Purple.Graphics.Terrain.HeightMap.Instance">
            <summary>
            Returns the singleton instance of the current heightmap.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Text">
            <summary>
            A standard text implementation, that supports unicode, but might 
            not be too fast.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Text.#ctor(System.Int32,System.Int32,System.Drawing.Font,System.Int32)">
            <summary>
            Creates a new text object.
            </summary>
            <param name="width">Size of texture to create.</param>
            <param name="height">Size of texture to create.</param>
            <param name="font">The font to use for rendering the text.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:Purple.Graphics.Text.#ctor(Purple.Graphics.Core.ITexture2d,System.Drawing.Font,System.Int32)">
            <summary>
            Creates a new text object.
            </summary>
            <param name="texture">The texture object to render the text into.</param>
            <param name="font">The font to use for rendering the text.</param>
            <param name="color">The color of the text.</param>
        </member>
        <member name="M:Purple.Graphics.Text.Draw(System.String,Purple.Math.Vector2,System.Int32)">
            <summary>
            Draws the text into the specified texture.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="pos">The target position.</param>
            <param name="color">Color to preclear the bitmap with.</param>
        </member>
        <member name="M:Purple.Graphics.Text.Draw(System.String,Purple.Math.Vector2)">
            <summary>
            Draws the text into the specified texture.
            </summary>
            <param name="text">Text to draw.</param>
            <param name="pos">The target position.</param>
        </member>
        <member name="M:Purple.Graphics.Text.Create(System.String[],System.Int32,System.Int32,System.Drawing.Font,System.Int32,System.Int32)">
            <summary>
            Creates a texture from a certain number of text strings.
            </summary>
            <param name="items">The text strings to render.</param>
            <param name="width">The width of one text item.</param>
            <param name="height">The height of one text item.</param>
            <param name="font">The font to use for the text.</param>
            <param name="textColor">The color of the text.</param>
            <param name="outlineColor">The color of the outline or 0.</param>
            <returns>The final texture.</returns>
        </member>
        <member name="P:Purple.Graphics.Text.Font">
            <summary>
            Returns the used <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.Texture">
            <summary>
            Returns the texture, where the text is rendered into.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.Color">
            <summary>
            The color of the font.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.ShadowColor">
            <summary>
            The color of the shadow.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.OutlineColor">
            <summary>
            The color of the outline.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.Offset">
            <summary>
            Offset of the shadow and outline.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.VAlign">
            <summary>
            Vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.HAlign">
            <summary>
            Horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Text.WordWrap">
            <summary>
            Wraps text between lines.
            </summary>
        </member>
        <member name="T:Purple.Graphics.SurfaceDescription">
            <summary>
            The SurfaceDescription object stores the width, height and format 
            of a certain Surface.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.SurfaceDescription.Width">
            <summary>
            width of the file texture in pixels
            </summary>
        </member>
        <member name="F:Purple.Graphics.SurfaceDescription.Height">
            <summary>
            height of the file texture in pixels
            </summary>
        </member>
        <member name="F:Purple.Graphics.SurfaceDescription.Format">
            <summary>
            The format of the Surface.
            </summary>
        </member>
        <member name="M:Purple.Graphics.SurfaceDescription.#ctor(System.Int32,System.Int32,Purple.Graphics.Format)">
            <summary>
            Constructor
            </summary>
            <param name="width">Width in pixels.</param>
            <param name="height">Height in pixels.</param>
            <param name="format">Format of th Surface.</param>
        </member>
        <member name="P:Purple.Graphics.SurfaceDescription.Size">
            <summary>
            size of texture
            </summary>
        </member>
        <member name="T:Purple.Graphics.TextureManager">
            <summary>
            Texture manager that handles the creation and loading of 
            <see cref="T:Purple.Graphics.Core.ITexture"/>s.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TextureManager.#ctor(Purple.Graphics.Core.ITextureLoader)">
            <summary>
            TextureManager - just for internal use
            </summary>		
            <param name="textureLoader">TextureLoader to use by manager.</param>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Load(System.String)">
            <summary>
            Loads a <see cref="T:Purple.Graphics.Core.ITexture2d"/> from a file.
            </summary>
            <param name="fileName">Name of texture.</param>
            <returns>Texture object.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Load(System.IO.Stream)">
            <summary>
            Loads a texture from a stream.
            </summary>
            <param name="stream">Stream to load texture from.</param>
            <returns>Texture object.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.LoadCube(System.IO.Stream)">
            <summary>
            Loads a cube map from a stream.
            </summary>
            <param name="stream">Stream to load texture from.</param>
            <returns>Texture object.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.LoadCube(System.String)">
            <summary>
            Loads a cube map from a file.
            </summary>
            <param name="fileName">File to load cube map from.</param>
            <returns>Cube map.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Create(System.Int32,System.Int32,System.Int32,Purple.Graphics.Format,Purple.Graphics.TextureUsage)">
            <summary>
            Creates an empty texture.
            </summary>
            <param name="width">Width of texture in pixel.</param>
            <param name="height">Height of texture in pixel.</param>
            <param name="mipLevels">Number of mip levels.</param>
            <param name="format">Format to use for texture.</param>
            <param name="usage">Special texture usage.</param>
            <returns>New texture.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.GetSurfaceDescription(System.String)">
            <summary>
            Gets a description of a file texture without loading it.
            </summary>
            <param name="filename">The filename of the file to get information about.</param>
            <returns>A description of the texture in the file.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.GetSurfaceDescription(System.IO.Stream)">
            <summary>
            Gets a description of a file texture without it.
            </summary>
            <param name="stream">The of the texture to get information about.</param>
            <returns>A description of the texture in the file.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Save(System.String,Purple.Graphics.Core.ISurface)">
            <summary>
            Saves a surface to a file.
            </summary>
            <param name="fileName">Name of file.</param>
            <param name="surface">Surface to save.</param>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Save(System.IO.Stream,Purple.Graphics.Core.ISurface)">
            <summary>
            Saves a surface to a stream.
            </summary>
            <param name="stream">Stream to save surfaces to.</param>
            <param name="surface">Surface to save.</param>
        </member>
        <member name="M:Purple.Graphics.TextureManager.GetAnimationFiles(System.String)">
            <summary>
            Returns all image files that match the fileName??.extension criteria. 
            </summary>
            <param name="fileName">Name of the files without the index number.</param>
            <returns>The string of the files.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.LoadTextures(System.String)">
            <summary>
            Loads all image files that match fileName??.extension.
            </summary>
            <param name="fileName">The name of the file without the index number.</param>
            <returns>The loaded textures.</returns>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Release">
            <summary>
            Releases all textures.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Recover">
            <summary>
            Recovers all textures.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Recreate">
            <summary>
            Recreates the object after the device was recreated.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TextureManager.DisposeOnlineData">
            <summary>
            Disposes all textures in the graphics card memory. The application is still working, since it 
            will reload all necessary textures.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TextureManager.Dispose">
            <summary>
            Disposes the texture manager object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.TextureLoader">
            <summary>
            The underlaying textureLoader object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.AutoResizeFilter">
            <summary>
            Images that aren't power of two but needs to be resized due to graphics hardware limitations, 
            will use this filter for resizing the image.
            </summary>
            <remarks>
            Typically autoresize is turned on for 3d textures. However, 2d gui elements would get blurry, that's why 
            you might want to turn it off for gui elements.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.TextureManager.AutoResize">
            <summary>
            Turn on/off autoresizing;
            </summary>
            <remarks>
            Typically autoresize is turned on for 3d textures. However, 2d gui elements would get blurry, that's why 
            you might want to turn it off for gui elements.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.TextureManager.MipMapFilter">
            <summary>
            This is the standard filter that is used for mipmap generation. If the filter is set to none, no mipmaps 
            will be generated.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.Instance">
            <summary>
            Get singleton instance of <see cref="T:Purple.Graphics.TextureManager"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.FileSystem">
            <summary>
            Returns the <see cref="T:Purple.IO.IFileSystem"/> that is used for loading the textures.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.NullTexture">
            <summary>
            A null texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.MipLevels">
            <summary>
            Sets the standard value of mip levels.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.Format">
            <summary>
            The standard texture format to use.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.AvailableMemory">
            <summary>
            Returns the available texture memory.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.TexturesAlive">
            <summary>
            The number of textures alive.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.TexturesOnline">
            <summary>
            The number of textures that are online.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureManager.TextureQuality">
            <summary>
            Quality of the loaded textures.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Textures">
            <summary>
            A collection of Texture objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Textures.#ctor">
            <summary>
            Creates a Textures object.
            </summary>
        </member>
        <member name="M:Purple.Graphics.Textures.#ctor(System.String,Purple.Graphics.Core.ITexture)">
            <summary>
            Creates a new Textures object with one prefilled texture.
            </summary>
            <param name="key">The key to use for the texture.</param>
            <param name="tex">The texture to add.</param>
        </member>
        <member name="M:Purple.Graphics.Textures.Contains(System.String)">
            <summary>
            Test if the collection contains a certain key.
            </summary>
            <param name="key">The key to test for.</param>
            <returns>True if the key is contained by the collection.</returns>
        </member>
        <member name="M:Purple.Graphics.Textures.Remove(System.String)">
            <summary>
            Removes the texture given by a certain key.
            </summary>
            <param name="key">The key to return.</param>
        </member>
        <member name="M:Purple.Graphics.Textures.Apply">
            <summary>
            Applies the textures.
            </summary>
        </member>
        <member name="P:Purple.Graphics.Textures.Item(System.String)">
            <summary>
            Indexer for the textures collection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.TextureStages">
            <summary>
            This class implements a typed collection for 
            <see cref="T:Purple.Graphics.Core.ITexture"/> objects. 
            objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TextureStages.#ctor(Purple.Graphics.Device)">
            <summary>
            Creates a Textures object.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TextureStages.Item(System.Int32)">
            <summary>
            Get or set the texture at a certain index.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Transformations">
            <summary>
            implementation for Transformations
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Transformations.UpdateWorld(Purple.Graphics.ShaderConstant)">
            <summary>
            Updates the shader constant.
            </summary>
            <param name="constant">The shader constant to update.</param>
        </member>
        <member name="M:Purple.Graphics.Transformations.UpdateView(Purple.Graphics.ShaderConstant)">
            <summary>
            Updates the shader constant.
            </summary>
            <param name="constant">The shader constant to update.</param>
        </member>
        <member name="M:Purple.Graphics.Transformations.UpdateProjection(Purple.Graphics.ShaderConstant)">
            <summary>
            Updates the shader constant.
            </summary>
            <param name="constant">The shader constant to update.</param>
        </member>
        <member name="M:Purple.Graphics.Transformations.UpdateWorldView(Purple.Graphics.ShaderConstant)">
            <summary>
            Updates the shader constant.
            </summary>
            <param name="constant">The shader constant to update.</param>
        </member>
        <member name="M:Purple.Graphics.Transformations.UpdateViewProjection(Purple.Graphics.ShaderConstant)">
            <summary>
            Updates the shader constant.
            </summary>
            <param name="constant">The shader constant to update.</param>
        </member>
        <member name="M:Purple.Graphics.Transformations.UpdateWorldViewProjection(Purple.Graphics.ShaderConstant)">
            <summary>
            Updates the shader constant.
            </summary>
            <param name="constant">The shader constant to update.</param>
        </member>
        <member name="P:Purple.Graphics.Transformations.World">
            <summary>
            world transformation matrix
            </summary>
        </member>
        <member name="P:Purple.Graphics.Transformations.View">
            <summary>
            view transformation matrix
            </summary>
        </member>
        <member name="P:Purple.Graphics.Transformations.Projection">
            <summary>
            projection transformation matrix
            </summary>
        </member>
        <member name="P:Purple.Graphics.Transformations.ViewProjection">
            <summary>
            view * projection matrix
            </summary>
        </member>
        <member name="P:Purple.Graphics.Transformations.WorldView">
            <summary>
            world * view matrix
            </summary>
        </member>
        <member name="P:Purple.Graphics.Transformations.WorldViewProjection">
            <summary>
            world * view * projection matrix
            </summary>
        </member>
        <member name="T:Purple.Graphics.Triangle">
            <summary>
            a simple triangle consisting of three indices
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.Triangle.A">
            <summary>first vertex</summary>
        </member>
        <member name="F:Purple.Graphics.Triangle.B">
            <summary>second vertex</summary>
        </member>
        <member name="F:Purple.Graphics.Triangle.C">
            <summary>third vertex</summary>
        </member>
        <member name="M:Purple.Graphics.Triangle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            creates a triangle
            </summary>
            <param name="a">first vertex</param>
            <param name="b">second vertex</param>
            <param name="c">third vertex</param>
        </member>
        <member name="P:Purple.Graphics.Triangle.Item(System.Int32)">
            <summary>
            operator []
            </summary>
        </member>
        <member name="T:Purple.Graphics.TwoD.IMeshQuad">
            <summary>
            Abstract interface for a quad that consists of a 2d mesh.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.TwoD.IExtendedQuad">
            <summary>
            abstract interface for an extended quad
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.TwoD.IQuad">
            <summary>
            abstract interface for a simple quad
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuad.IsCompatible(Purple.Graphics.TwoD.IQuad)">
            <summary>
            Tests if two quads can be put into the same SubSet.
            </summary>
            <param name="quad">Quad tot test with.</param>
            <returns>True if quad can be put into same subSet.</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuad.FillIndexStream(Purple.Graphics.VertexStreams.IndexStream,System.Int32,System.Int32)">
            <summary>
            Fills the indexStream with the data.
            </summary>
            <param name="indexStream">Fills the quad data into the passed indexStream.</param>
            <param name="index">The start in the index buffer.</param>
            <param name="vertexIndex">The start in the vertex buffer.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuad.FillVertexUnit(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            Fills the vertexUnit with the quad data.
            </summary>
            <param name="vertexUnit">The vertexUnit to fill with the quad data.</param>
            <param name="index">The start index in the index buffer.</param>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuad.Visible">
            <summary>
            Returns true if the quad is visible and should be rendered.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuad.Position">
            <summary>
            Access to the position of the sprite.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuad.Texture">
            <summary>
            The used texture.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuad.QuadFactory">
            <summary>
            Returns the factory used for creating the quad.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuad.IndexCount">
            <summary>
            Returns the number of indices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuad.VertexCount">
            <summary>
            Returns the number of vertices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IExtendedQuad.Alpha">
            <summary>
            opacity of the current sprite
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IExtendedQuad.Scale">
            <summary>
            the scale ratio of the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IExtendedQuad.RotationZ">
            <summary>
            rotation angles for the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IExtendedQuad.Size">
            <summary>
            size of the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IExtendedQuad.TextureSize">
            <summary>
            size of texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IExtendedQuad.TextureRectangle">
            <summary>
            The texture rectangle to use.
            </summary>
        </member>
        <member name="T:Purple.Graphics.TwoD.IMeshQuadFactory">
            <summary>
            Abstract interface for a factory that is capable of creating a IMeshQuad.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TwoD.IMeshQuadFactory.CreateMeshQuad(System.Int32,System.Int32)">
            <summary>
            Creates a IMeshQuad.
            </summary>
            <param name="columns">The number of vertices in every row.</param>
            <param name="rows">The number of vertices in every column.</param>
            <returns>The creates meshQuad.</returns>
        </member>
        <member name="T:Purple.Graphics.TwoD.IQuadFactory">
            <summary>
            abstract interface for a quad factory
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuadFactory.Resize(System.Int32)">
            <summary>
            resize factory => changes capacity
            </summary>
            <param name="quadNum"></param>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuadFactory.CreateQuad">
            <summary>
            creates a new quad
            </summary>
            <returns>a newly created quad</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuadFactory.FillVertexUnit(Purple.Graphics.TwoD.IQuad)">
            <summary>
            Fills the vertexUnit with a quad.
            </summary>
            <param name="quad">The quad to fill vertexUnit with.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.IQuadFactory.Upload">
            <summary>
            Uploads the changes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuadFactory.Effect">
            <summary>
            Returns the effect used by the factory.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuadFactory.Format">
            <summary>
            the vertex format used for quads of this group
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuadFactory.VertexUnit">
            <summary>
            returns the vertexUnit
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuadFactory.Capacity">
            <summary>
            number of quads that can be hold by factory
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.IQuadFactory.Filled">
            <summary>
            The number of vertices that are used.
            </summary>
        </member>
        <member name="T:Purple.Graphics.TwoD.MeshVertex">
            <summary>
            Structure that holds one vertex of a MeshQuad.
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.MeshVertex.Position">
            <summary>
            The relative position of the vertex within the quad [0;1].
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.MeshVertex.Texture">
            <summary>
            The relative texture coordinate of the vertex within the quad [0;1].
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.MeshVertex.Color">
            <summary>
            The color the vertex.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TwoD.MeshVertex.#ctor(Purple.Math.Vector2,Purple.Math.Vector2,System.Int32)">
            <summary>
            Creates a new MeshVertex object.
            </summary>
            <param name="position">The relative position of the vertex within the quad [0;1].</param>
            <param name="texture">The relative texture coordinate of the vertex within the quad [0;1].</param>
            <param name="color">The color the vertex.</param>
        </member>
        <member name="T:Purple.Graphics.TwoD.MeshQuad">
            <summary>
            A quad that contains of a 2d mesh.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.TwoD.Quad">
            <summary>
            a simple quad (billboard)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.TwoD.Quad.positionCache">
            <summary>
            The cache for the positions;
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.Quad.colorCache">
            <summary>
            The cache for the colors;
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.Quad.textureCache">
            <summary>
            The cache for the textures;
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.Quad.dirty">
            <summary>
            Returns true if the quad was changed since the last update.
            </summary>
        </member>
        <member name="F:Purple.Graphics.TwoD.Quad.factory">
            <summary>
            The factory used for creating the quad.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TwoD.Quad.#ctor(Purple.Graphics.TwoD.QuadFactory)">
            <summary>
            creates a new instance of a billboard
            </summary>
        </member>
        <member name="M:Purple.Graphics.TwoD.Quad.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TwoD.Quad.FillIndexStream(Purple.Graphics.VertexStreams.IndexStream,System.Int32,System.Int32)">
            <summary>
            Fills the indexStream with the data.
            </summary>
            <param name="indexStream">Fills the quad data into the passed indexStream.</param>
            <param name="index">The start index in the index buffer.</param>
            <param name="vertexIndex">The start in the vertex buffer.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.Quad.FillVertexUnit(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            Fills the vertexUnit with the quad data.
            </summary>
            <param name="vertexUnit">The vertexUnit to fill with the quad data.</param>
            <param name="index">The start index in the index buffer.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.Quad.IsCompatible(Purple.Graphics.TwoD.IQuad)">
            <summary>
            tests if two quads can be put into the same SubSet
            </summary>
            <param name="quad">quad tot test with</param>
            <returns>true if quad can be put into same subSet</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.Quad.Apply">
            <summary>
            Starts with applying and returns the number of passes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.QuadFactory">
            <summary>
            returns the factory used for creating the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.Visible">
            <summary>
            Returns true if the quad is visible and should be rendered.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.IndexCount">
            <summary>
            Returns the number of vertices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.VertexCount">
            <summary>
            Returns the number of vertices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.Position">
            <summary>
            position of the billboard (upper-left corner)
            range of vector components goes from [0..1]
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.Texture">
            <summary>
            the used texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.Alpha">
            <summary>
            alpha value of the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.Scale">
            <summary>
            the scale ratio of the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.RotationZ">
            <summary>
            rotation angles for the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.Size">
            <summary>
            size of the quad
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.TextureSize">
            <summary>
            size of texture
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.Quad.TextureRectangle">
            <summary>
            The texture rectangle to use.
            </summary>
        </member>
        <member name="M:Purple.Graphics.TwoD.MeshQuad.#ctor(System.Int32,System.Int32,Purple.Graphics.TwoD.QuadFactory)">
            <summary>
            Creates a new instance of a mesh quad.
            </summary>
            <param name="columns">The number of columns.</param>
            <param name="rows">The number of rows.</param>
            <param name="factory">The factory that created the quad.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.MeshQuad.Create(System.Int32,System.Int32)">
            <summary>
            Creates the array of MeshVertex objects.
            </summary>
            <param name="columns">The number of columns.</param>
            <param name="rows">The number of rows.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.MeshQuad.FillVertexUnit(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            Fills the vertexUnit with the quad data.
            </summary>
            <param name="vertexUnit">The vertexUnit to fill with the quad data.</param>
            <param name="index">The start index in the index buffer.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.MeshQuad.FillIndexStream(Purple.Graphics.VertexStreams.IndexStream,System.Int32,System.Int32)">
            <summary>
            Fills the indexStream with the data.
            </summary>
            <param name="indexStream">Fills the quad data into the passed indexStream.</param>
            <param name="index">The start index in the index buffer.</param>
            <param name="vertexIndex">The start in the vertex buffer.</param>
        </member>
        <member name="P:Purple.Graphics.TwoD.MeshQuad.Vertices">
            <summary>
            Access to the all mesh vertices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.MeshQuad.IndexCount">
            <summary>
            Returns the number of vertices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.MeshQuad.VertexCount">
            <summary>
            Returns the number of vertices.
            </summary>
        </member>
        <member name="T:Purple.Graphics.TwoD.QuadFactory">
            <summary>
            A quad factory.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadFactory.#ctor(System.Int32)">
            <summary>
            Creates a new QuadFactory.
            </summary>
            <param name="vertexNum">Number of vertices for this group.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadFactory.Resize(System.Int32)">
            <summary>
            Resize buffers.
            </summary>
            <param name="vertexNum">The number of vertices that can be hold by the factory.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadFactory.CreateQuad">
            <summary>
            Creates a new quad.
            </summary>
            <returns>The created quad.</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadFactory.CreateMeshQuad(System.Int32,System.Int32)">
            <summary>
            Creates a IMeshQuad.
            </summary>
            <param name="columns">The number of vertices in every row.</param>
            <param name="rows">The number of vertices in every column.</param>
            <returns>The creates meshQuad.</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadFactory.FillVertexUnit(Purple.Graphics.TwoD.IQuad)">
            <summary>
            Fills the vertexUnit with a quad.
            </summary>
            <param name="quad">The quad to fill vertexUnit with.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadFactory.Upload">
            <summary>
            Uploads the changes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadFactory.Effect">
            <summary>
            Returns the effect used by the factory.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadFactory.Format">
            <summary>
            The vertex format used for quads of this group.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadFactory.VertexUnit">
            <summary>
            Returns the vertexUnit.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadFactory.Capacity">
            <summary>
            Number of vertices that can be hold by the factory.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadFactory.Filled">
            <summary>
            The number of vertices that are used.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadFactory.Instance">
            <summary>
            Returns the default instance of the QuadFactory.
            </summary>
        </member>
        <member name="T:Purple.Graphics.TwoD.QuadManager">
            <summary>
            Responsible for high performance visualization of quads.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadManager.Draw(Purple.Graphics.TwoD.IQuad)">
            <summary>
            Enques the quad for rendering.
            </summary>
            <param name="quad">Quad to render.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadManager.OnRender(System.Single)">
            <summary>
            Renders the queue auf the QuadManager.
            </summary>
            <param name="deltaTime">The time since the last frame.</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadManager.PixelToUnit(Purple.Math.Vector2)">
            <summary>
            converts pixel coordinates to unit coordinates
            </summary>
            <param name="pixel">pixel position</param>
            <returns>unit position</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadManager.UnitToPixel(Purple.Math.Vector2)">
            <summary>
            converts unit coordinates to pixel coordinates
            </summary>
            <param name="unit">unit position</param>
            <returns>pixel position</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadManager.RotateUnit(Purple.Math.Vector2,System.Single)">
            <summary>
            rotates a unit vector
            </summary>
            <param name="vec">vector to rotate</param>
            <param name="alpha">angle to use for rotation</param>
            <returns>rotates a certain unit vector</returns>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadManager.GetStatistics">
            <summary>
            Returns a statistics string.
            </summary>
            <returns>The statistics string.</returns>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadManager.QuadFactories">
            <summary>
            List of all available QuadFactories.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadManager.TotalQuads">
            <summary>
            The total number of quads drawn in the last frame.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadManager.FactoryChanges">
            <summary>
            The total number of factory changes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadManager.TextureChanges">
            <summary>
            The number of texture changes.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadManager.TargetSize">
            <summary>
            The taget size for the client area.
            </summary>
        </member>
        <member name="P:Purple.Graphics.TwoD.QuadManager.Instance">
            <summary>
            Returns the default instance of quad manager.
            </summary>
        </member>
        <member name="T:Purple.Graphics.TwoD.QuadUtil">
            <summary>
            some utility methods for faster creation of Quad and QuadFactory classes
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadUtil.FillPosition(Purple.Math.Vector2[],Purple.Math.Vector2,Purple.Math.Vector2,Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            fills four vectors into a positionStream at a certain position
            </summary>
            <param name="positionCache">The cache to fill.</param>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <param name="c">third vector</param>
            <param name="d">fourth vector</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadUtil.FillPosition(Purple.Math.Vector2[],Purple.Graphics.TwoD.Quad)">
            <summary>
            fills a positionStream with a quad given by position and size
            </summary>
            <param name="positionCache">The cache to fill with the data.</param>
            <param name="quad">quad to use</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadUtil.FillColor(System.Int32[],System.Int32)">
            <summary>
            fills a color stream with quad data
            </summary>
            <param name="colorCache">Cache to fill.</param>
            <param name="color">color to use</param>
        </member>
        <member name="M:Purple.Graphics.TwoD.QuadUtil.FillTexture(Purple.Math.Vector2[],System.Drawing.RectangleF)">
            <summary>
            fills the texture stream with texture coordinates
            </summary>
            <param name="textureCache">The textureCache to fill.</param>
            <param name="textureCoordinates">texture coordinates to use</param>
        </member>
        <member name="T:Purple.Graphics.Util">
            <summary>
            Some utility functions for Purple Gfx
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Util.CalcVertexNum(System.Int32)">
            <summary>
            calcluates the number of vertices for a given PrimitiveType and
            a given number of primitives
            </summary>
            <param name="primitiveCount">number of primitives</param>
            <returns>number of vertices</returns>
        </member>
        <member name="M:Purple.Graphics.Util.CalcTangentSpaceStreams(Purple.Graphics.VertexStreams.PositionStream,Purple.Graphics.VertexStreams.TextureStream,Purple.Graphics.VertexStreams.IndexStream)">
            <summary>
            calculate tangent, normal and binormal stream
            Triangle list is assumed for indices format
            there will be a more sophisticated version of this functions for SubSets, which will
            have much similiarity to NVidias MeshMender
            </summary>
            <param name="positions">stream containing vertex positions</param>
            <param name="textures">stream containing texture coordinates</param>
            <param name="indices">stream containing indices</param>
            <returns></returns>
        </member>
        <member name="T:Purple.Graphics.VertexElement">
            <summary>
            VertexElement - Defines input vertex data to the pipeline. 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexElement.Stream">
            <summary>Stream number</summary>
        </member>
        <member name="F:Purple.Graphics.VertexElement.Offset">
            <summary>Offset (if any) from the beginning of the stream to the start of the data</summary>
        </member>
        <member name="F:Purple.Graphics.VertexElement.DeclarationType">
            <summary>One of several predefined types that define the data size</summary>
        </member>
        <member name="F:Purple.Graphics.VertexElement.DeclarationMethod">
            <summary>Tessellator processing method. This method determines how the tessellator interprets/operates on the vertex data</summary>
        </member>
        <member name="F:Purple.Graphics.VertexElement.DeclarationUsage">
            <summary>Defines the intended use of the data</summary>
        </member>
        <member name="F:Purple.Graphics.VertexElement.UsageIndex">
            <summary>Modifies the usage data to allow the user to specify multiple usage types</summary>
        </member>
        <member name="M:Purple.Graphics.VertexElement.#ctor(System.Int16,System.Int16,Purple.Graphics.DeclarationType,Purple.Graphics.DeclarationMethod,Purple.Graphics.DeclarationUsage,System.Byte)">
            <summary>
            VertexElement - Defines input vertex data to the pipeline
            </summary>
            <param name="stream">Stream number</param>
            <param name="offset">Offset (if any) from the beginning of the stream to the start of the data</param>
            <param name="declarationType">One of several predefined types that define the data size</param>
            <param name="declarationMethod">Tessellator processing method. This method determines how the tessellator interprets/operates on the vertex data</param>
            <param name="declarationUsage">Defines the intended use of the data</param>
            <param name="usageIndex">Modifies the usage data to allow the user to specify multiple usage types</param>
        </member>
        <member name="P:Purple.Graphics.VertexElement.None">
            <summary>
            Returns a null <see cref="T:Purple.Graphics.VertexElement"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexFormat">
            <summary>
            This class defines the layout (the streams) of a <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para> 
              <para>Reworked: 0.3</para> 
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.#ctor(System.Type[])">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="types">The types of the <see cref="T:Purple.Graphics.IVertexStream"/>s.</param>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <remarks>
            It is assumed, that the streams are sorted!
            </remarks>
            <param name="streams">List of IVertexStreams to take format from.</param>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Contains(System.Type)">
            <summary>
            Returns true if a stream of a certain type is contained by this 
            <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="type">Type of the <see cref="T:Purple.Graphics.IVertexStream"/>.</param>
            <returns>True if a stream of a certain type is contained by this 
            <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Contains(System.Type,System.Int32)">
            <summary>
            Returns true if a stream of a certain type is contained by this <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="type">Type of the <see cref="T:Purple.Graphics.IVertexStream"/>.</param>
            <param name="usageIndex">The index of the stream.</param>
            <returns>True if a stream of a certain type is contained by this <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Contains(Purple.Graphics.Semantic)">
            <summary>
            Returns true if a stream with the given semantic is contained by this <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="sem"><see cref="T:Purple.Graphics.Semantic"/> to test for.</param>
            <returns>True if a stream with the given semantic is contained by this <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Count(System.Type)">
            <summary>
            Returns the number of streams of a certain type contained by this <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="type">Type of the <see cref="T:Purple.Graphics.IVertexStream"/>.</param>
            <returns>the number of streams of a certain type contained by this <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Count(Purple.Graphics.DeclarationUsage)">
            <summary>
            Returns the number of streams of a certain <see cref="T:Purple.Graphics.DeclarationUsage"/>.
            </summary>
            <param name="usage">The <see cref="T:Purple.Graphics.DeclarationUsage"/> to get the number of streams for.</param>
            <returns>The number of streams of a certain <see cref="T:Purple.Graphics.DeclarationUsage"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.GetIndex(System.Type,System.Int32)">
            <summary>
            Returns the index of the <see cref="T:Purple.Graphics.IVertexStream"/> in the <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <param name="type">Type of stream.</param>
            <param name="usageIndex">The nth stream with this type.</param>
            <returns>The index of the <see cref="T:Purple.Graphics.IVertexStream"/> in the <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If type or index is invalid.</exception>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.GetIndex(Purple.Graphics.Semantic)">
            <summary>
            Returns the index of the <see cref="T:Purple.Graphics.IVertexStream"/> for a given <see cref="T:Purple.Graphics.Semantic"/> description.
            </summary>
            <param name="sem">The <see cref="T:Purple.Graphics.Semantic"/> to get stream for.</param>
            <returns>The index of the <see cref="T:Purple.Graphics.IVertexStream"/> for a given <see cref="T:Purple.Graphics.Semantic"/> description.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.GetUsageIndex(System.Int32)">
            <summary>
            Returns the UsageIndex of a stream with a certain index.
            </summary>
            <param name="index">Index of stream.</param>
            <returns>The UsageIndex of a stream with a certain index.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.GetType(System.Int32)">
            <summary>
            Returns the type of a stream with a certain index.
            </summary>
            <param name="index">Index of stream.</param>
            <returns>The type of a stream.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.CompareTo(System.Object)">
            <summary>
            Compares two <see cref="T:Purple.Graphics.VertexFormat"/>s.
            </summary>
            <param name="format">Format to compare current object with.</param>
            <returns>0 if equal ...</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.GetHashCode">
            <summary>
            New hashcode function for <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
            <returns>The hashcode of the current object.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Equals(System.Object)">
            <summary>
            New equals function.
            </summary>
            <param name="obj"><see cref="T:Purple.Graphics.VertexFormat"/> to compare current object with.</param>
            <returns>True if equals.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.Clone(Purple.Graphics.Semantic[])">
            <summary>
            Converts this <see cref="T:Purple.Graphics.VertexFormat"/> to suit the passed <see cref="T:Purple.Graphics.Semantic"/>s.
            </summary>
            <param name="semantics">The semantics to convert to.</param>
            <returns>The converted <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexFormat.op_Addition(Purple.Graphics.VertexFormat,Purple.Graphics.VertexFormat)">
            <summary>
            Adds two <see cref="T:Purple.Graphics.VertexFormat"/>s together.
            </summary>
            <param name="fmt1">First format.</param>
            <param name="fmt2">Second format.</param>
            <returns>The combined <see cref="T:Purple.Graphics.VertexFormat"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.Types">
            <summary>
            Returns the <see cref="T:System.Type"/>s of the current <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.Size">
            <summary>
            Returns the number of streams of the current <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.VertexDeclaration">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Core.IVertexDeclaration"/> of the current format.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.Semantics">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Semantic"/>s for the current <see cref="T:Purple.Graphics.VertexFormat"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.Position">
            <summary>
            VertexUnit containing only a position stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionColor">
            <summary>
            VertexUnit contains a position and color stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionColorTexture">
            <summary>
            VertexUnit contains a position, color and texture stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionTexture">
            <summary>
            VertexUnit contains a position and Texture stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionNormalTexture">
            <summary>
            VertexUnit contains position, normal and a texture stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionCompressedNormalTexture">
            <summary>
            VertexUnit contains position, normal and a texture stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionCompressedNormalColorTexture">
            <summary>
            VertexUnit contains position, normal and a texture stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionTexture2">
            <summary>
            VertexUnit contains position and two texture streams.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionNormalColorTexture">
            <summary>
            VertexUnit contains position, normal, color and a texture streams.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.PositionTexture2Tangent">
            <summary>
            VertexUnit contains position, texture, normal texture, tangent, binormal, normal streams.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.BoneIndices">
            <summary>
            VertexUnit contains boneIndices.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexFormat.BoneWeights">
            <summary>
            VertexUnit contains boneWeights.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.BinormalStream">
            <summary>
            Binormal Vector stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.PositionStream">
            <summary>
            Position Stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.GraphicsStream">
            <summary>
            Abstract base class for an <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.GraphicsStream.used">
            <summary>
            The number of used elements.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.GraphicsStream.position">
            <summary>
            Start position in physical graphics buffer.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Resize(System.Int32)">
            <summary>
            resizes the stream
            creates new stream, copies the old one to the new one
            !!!don't uses this method in speed critical sections!!!
            </summary>
            <param name="size">new size</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Upload">
            <summary>
            uploads from offline to online data
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Upload(System.Int32,System.Int32)">
            <summary>
            uploads from offline to online data
            </summary>
            <param name="start">The start index for uploading.</param>
            <param name="length">The number of elements to upload</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.HasOnlineData">
            <summary>
            test if buffer has been uploaded
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.DisposeOnlineData">
            <summary>
            disposes online data
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.HasOfflineData">
            <summary>
            has offline data
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.DisposeOfflineData">
            <summary>
            disposes offline data
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Download">
            <summary>
            downloads online to offline data
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Dispose">
            <summary>
            dispose vertexUnit
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Copy(Purple.Graphics.IGraphicsStream)">
            <summary>
            copies the data of the stream to this stream
            </summary>
            <param name="stream">stream to take data from</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.GraphicsStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.Size">
            <summary>
            the size of the stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.Used">
            <summary>
            the number of used elements in the stream
            is set to size on construction, Init(size) and Resize(size)
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.Position">
            <summary>
            start position in physical graphics buffer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.PhysicalBuffer">
            <summary>
            returns the physical buffer
            </summary>		
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.GraphicsStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.PositionStream.defaultElement">
            <summary>
            The default VertexElement for PositionStreams.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.From(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            retrieve n'th positionStream from vertex Unit
            </summary>
            <param name="unit">vertexUnit to retrieve stream from</param>
            <param name="index">number of stream of type(PositionStream)</param>
            <returns>the n'th positionStream of the vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.From(Purple.Graphics.VertexUnit)">
            <summary>
            retrieves the first positionStream of a certain vertex unit
            </summary>
            <param name="unit">vertex unit to retrive stream from</param>
            <returns>the first position stream of the vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream.Transform(Purple.Math.Matrix4)">
            <summary>
            Transforms the <see cref="T:Purple.Graphics.VertexStreams.PositionStream"/> by a given matrix.
            </summary>
            <param name="matrix">Matrix to use for transforming the <see cref="T:Purple.Graphics.VertexStreams.PositionStream"/>.</param>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.Usage">
            <summary>
            Sets the declarationUsage for the current stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BinormalStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BinormalStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BinormalStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="capacity">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BinormalStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BinormalStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BinormalStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.BoneIndicesStream">
            <summary>
            a simple stream containing up to 4 indices
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.IntStream">
            <summary>
            a simple integer stream (4 bytes)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.IntStream.defaultElement">
            <summary>
            Default element for an <see cref="T:Purple.Graphics.VertexStreams.IntStream"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IntStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IntStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            a simple compressed int stream
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IntStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IntStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IntStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IntStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.Usage">
            <summary>
            Sets the usage of the stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.IntData">
            <summary>
            The int data.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IntStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.IBoneIndicesStream">
            <summary>
            Abstract interface for a stream containing bone indices.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IBoneIndicesStream.SetIndices(System.Int32,System.Byte[])">
            <summary>
            Sets the indices for a certain vertex.
            </summary>
            <param name="vertexIndex">Index of vertex to set bone indices for.</param>
            <param name="indices">The array of indices.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IBoneIndicesStream.GetIndices(System.Int32)">
            <summary>
            Returns the indices for a certain vertex.
            </summary>
            <param name="vertexIndex">The array of indices.</param>
            <returns>The array of indices.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            A simple boneIndicesStream.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.GetBoneIndex(System.Int32,System.Int32)">
            <summary>
            returns the bone index for a certain vertex
            </summary>
            <param name="vertexIndex">vertex to return weight for</param>
            <param name="weightIndex">inded of weight to return for bone</param>
            <returns>index of bone</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.SetBoneIndex(System.Int32,System.Int32,System.Byte)">
            <summary>
            sets the boneIndex for a certain weight of a certain vertex
            </summary>
            <param name="vertexIndex">the vertex to set value for</param>
            <param name="weightIndex">the index of the weight for the given vertex</param>
            <param name="boneIndex">the value to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.SetIndices(System.Int32,System.Byte[])">
            <summary>
            Sets the indices for a certain vertex.
            </summary>
            <param name="vertexIndex">Index of vertex to set bone indices for.</param>
            <param name="indices">The array of indices.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.GetIndices(System.Int32)">
            <summary>
            Returns the indices for a certain vertex.
            </summary>
            <param name="vertexIndex">The array of indices.</param>
            <returns>The array of indices.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.ExtractBoneIndex(System.UInt32,System.Int32)">
            <summary>
            calculates the bone index from an uint containing all 4 weights
            </summary>
            <param name="weights">uint containg all 4 weights</param>
            <param name="weightIndex">extracts a certain weightIndex</param>
            <returns>the index of a bone</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.SetBoneIndex(System.UInt32,System.Int32,System.Byte)">
            <summary>
            incorporates the bone index into an uint containing all 4 weights
            </summary>
            <param name="initialData">the initial value of the 4 bones</param>
            <param name="weightIndex">the index of the weight to set value for</param>
            <param name="boneIndex">the value to set</param>
            <returns>the new bone index value</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneIndicesStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneIndicesStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneIndicesStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.BoneWeightsStream">
            <summary>
            a simple stream containing up to 4 weights
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.IBoneWeightsStream">
            <summary>
            Abstract interface for a stream containing bone weights.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IBoneWeightsStream.SetWeights(System.Int32,System.Single[])">
            <summary>
            Sets the weights for a certain vertex.
            </summary>
            <param name="vertexIndex">Index of vertex to set bone weights for.</param>
            <param name="weights">The array of weights.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IBoneWeightsStream.GetWeights(System.Int32)">
            <summary>
            Returns the weights for a certain vertex.
            </summary>
            <param name="vertexIndex">The array of weights.</param>
            <returns>The array of weights.</returns>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.BoneWeightsStream.defaultElement">
            <summary>
            The default element for BoneWeightsStreams.
            </summary>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.BoneWeightsStream.vertexElement">
            <summary>
            description of stream
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.SetWeight(System.Int32,System.Int32,System.Single)">
            <summary>
            sets the weight
            </summary>
            <param name="vertexIndex">index of vertex to set weight for</param>
            <param name="weightIndex">index of weight for vertex to set weight for</param>
            <param name="weight">value of the weight</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.GetWeight(System.Int32,System.Int32)">
            <summary>
            returns the weight
            </summary>
            <param name="vertexIndex">index of vertex to set weight for</param>
            <param name="weightIndex">index of weight for vertex to set weight for</param>
            <returns>value of the weight</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.SetWeights(System.Int32,System.Single[])">
            <summary>
            Sets the weights for a certain vertex.
            </summary>
            <param name="vertexIndex">Index of vertex to set bone weights for.</param>
            <param name="weights">The array of weights.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.GetWeights(System.Int32)">
            <summary>
            Returns the weights for a certain vertex.
            </summary>
            <param name="vertexIndex">The array of weights.</param>
            <returns>The array of weights.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.BoneWeightsStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.BoneWeightsStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.ColorStream">
            <summary>
            Color stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.From(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            returns the n'th colorStream from a certain vertex unit
            </summary>
            <param name="vertexUnit">vertex unit to retrieve color stream from</param>
            <param name="index">number of the color stream</param>
            <returns>n'th color stream</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.From(Purple.Graphics.VertexUnit)">
            <summary>
            return the first colorStream from a certain vertex unit 
            </summary>
            <param name="vertexUnit">vertex unit to retrieve color stream from</param>
            <returns>first colorStream in vertexUnit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.ColorStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.ColorStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.CompressedNormalStream">
            <summary>
            a compressed normal stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            a simple compressed normal stream
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.From(Purple.Graphics.VertexStreams.NormalStream)">
            <summary>
            create a compresses normal stream from an uncompressed stream
            </summary>
            <param name="stream">stream to compress</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.CompressAndFill(Purple.Graphics.VertexStreams.NormalStream)">
            <summary>
            compresses the normal stream and fills the current stream
            both streams have to be the same size
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.CompressedNormalStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.CompressedNormalStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.CompressedNormalStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.FloatStream">
            <summary>
            Float Stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.FloatStream.defaultElement">
            <summary>
            Description of default stream.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.FloatStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.FloatStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.IndexStream">
            <summary>
            Abstract base class for an index stream.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">size of indexstream in number of indices</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new IndexStream depending on the size of the maxIndex.
            </summary>
            <param name="indexStreamSize">The number of indices to create.</param>
            <param name="maxIndex">The maximum index to handle (create IndexStream16 or IndexStream32).</param>
            <returns>The created indexStream.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.Create(System.Collections.IList,System.Int32)">
            <summary>
            Creates a new IndexStream object.
            </summary>
            <param name="indices">The list of indices.</param>
            <param name="maxIndex">The maximum index to handle (create IndexStream16 or IndexStream32).</param>
            <returns>The created indexStream.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.Create(System.Int32,System.Type)">
            <summary>
            Creates a new IndexStream depending on the size of the maxIndex.
            </summary>
            <param name="indexStreamSize">The number of indices to create.</param>
            <param name="type">Type of the indexStream to create.</param>
            <returns>The created indexStream.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.FromChain(System.Int32)">
            <summary>
            Creates an IndexStream from a chain of quads.
            </summary>
            <param name="quadNum">The number of quads.</param>
            <returns>The created indexStream.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.FromQuads(System.Int32)">
            <summary>
            Creates an IndexStream from a certain number of vertices that are organised in quads.
            </summary>
            <param name="quadNum">The number of quads.</param>
            <returns>The created indexStream.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.GetTriangle(System.Int32)">
            <summary>
            returns the triangle for the given index
            !!! assumes triangle list format !!!
            </summary>
            <param name="index">index of triangle</param>
            <returns>triangle</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.SetTriangle(Purple.Graphics.Triangle,System.Int32)">
            <summary>
            sets a triangle for a given index
            </summary>
            <param name="tri">triangle to set</param>
            <param name="index">index to use</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream.Copy(Purple.Graphics.VertexStreams.IndexStream,System.Int32,Purple.Graphics.VertexStreams.IndexStream,System.Int32,System.Int32,System.Int32)">
            <summary>
            copies a source index stream into a certain location of a destination vertex stream		
            </summary>
            <param name="source">index stream to take data from</param>
            <param name="sourceIndex">start index</param>
            <param name="dest">index to put data into</param>
            <param name="destIndex">start index</param>
            <param name="length">number of elements</param>
            <param name="vertexOffset">used if vertices are copied to another location</param>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream.Item(System.Int32)">
            <summary>
            data access via indexer
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.IndexStream16">
            <summary>
            Index stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">size of indexstream in number of indices</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.FromTriangles(System.Collections.ICollection)">
            <summary>
            Creates an IndexStream from a list of triangles
            </summary>
            <param name="triangles"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream16.Sort(Purple.Graphics.VertexStreams.PositionStream,System.Boolean)">
            <summary>
            Sorts the indexStream.
            </summary>
            <param name="posStream">The positions to use for sorting.</param>
            <param name="frontToBack">Flag that indicates if stream should be sorted 
            front to back or the way around.</param>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream16.Item(System.Int32)">
            <summary>
            data access via indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream16.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream16.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream16.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream16.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.IndexStream32">
            <summary>
            Index stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">size of indexstream in number of indices</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.FromTriangles(System.Collections.ICollection)">
            <summary>
            Creates an IndexStream from a list of triangles
            </summary>
            <param name="triangles"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.IndexStream32.Sort(Purple.Graphics.VertexStreams.PositionStream,System.Boolean)">
            <summary>
            Sorts the indexStream.
            </summary>
            <param name="posStream">The positions to use for sorting.</param>
            <param name="frontToBack">Flag that indicates if stream should be sorted 
            front to back or the way around.</param>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream32.Item(System.Int32)">
            <summary>
            data access via indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream32.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream32.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream32.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.IndexStream32.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.NormalStream">
            <summary>
            Normal Vector stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.NormalStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.NormalStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.NormalStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.NormalStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.NormalStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.NormalStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.PositionStream2">
            <summary>
            Position Stream containing 2d vectors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.PositionStream2.defaultElement">
            <summary>
            The default VertexElement.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.From(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            retrieve n'th PositionStream2 from vertex Unit
            </summary>
            <param name="unit">vertexUnit to retrieve stream from</param>
            <param name="index">number of stream of type(PositionStream2)</param>
            <returns>the n'th PositionStream2 of the vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.From(Purple.Graphics.VertexUnit)">
            <summary>
            retrieves the first PositionStream2 of a certain vertex unit
            </summary>
            <param name="unit">vertex unit to retrive stream from</param>
            <returns>the first position stream of the vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream2.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.DeclarationUsage">
            <summary>
            Sets the declarationUsage for the PositionStream;
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream2.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.PositionStream4">
            <summary>
            Position Stream containing 4d vectors.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.PositionStream4.defaultElement">
            <summary>
            The default VertexElement.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.From(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            retrieve n'th PositionStream2 from vertex Unit
            </summary>
            <param name="unit">vertexUnit to retrieve stream from</param>
            <param name="index">number of stream of type(PositionStream2)</param>
            <returns>the n'th PositionStream2 of the vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.From(Purple.Graphics.VertexUnit)">
            <summary>
            retrieves the first PositionStream2 of a certain vertex unit
            </summary>
            <param name="unit">vertex unit to retrive stream from</param>
            <returns>the first position stream of the vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.PositionStream4.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.DeclarationUsage">
            <summary>
            Sets the declarationUsage for the PositionStream;
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.PositionStream4.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream">
            <summary>
            A software stream holding an arbitrary number of bone indices.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            This stream is used to store the influencing bones for every vertex.
            </remarks>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.SoftwareStream">
            <summary>
            An abstract class for a software stream, that can't be uploaded to 
            the graphics hardware.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="F:Purple.Graphics.VertexStreams.SoftwareStream.defaultElement">
            <summary>
            The default element.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareStream.#ctor(System.Int32)">
            <summary>
            Constructor for a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
            <param name="size">Number of elements.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareStream.#ctor">
            <summary>
            Constructor for a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
            <remarks>
            Init has to be called!!!
            </remarks>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareStream.BufferManager">
            <summary>
            Returns the used BufferManager.
            </summary>
            <remarks>
            Not used for <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>s.
            </remarks>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareStream.Type">
            <summary>
            Type of vertices.
            </summary>
            Not used for <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>s.
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareStream.ElementSize">
            <summary>
            Returns the size in bytes of one array element.
            </summary>
            Not used for <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>s.
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream"/>.
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream"/>.
            </summary>
            <remarks>
            Init has to be called!!!
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.Init(System.Int32)">
            <summary>
            Initialises the array with a given size.
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.SetData(System.Array)">
            <summary>
            Sets the value of the array.
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.SetIndices(System.Int32,System.Byte[])">
            <summary>
            Sets the indices for a certain vertex.
            </summary>
            <param name="vertexIndex">Index of vertex to set bone indices for.</param>
            <param name="indices">The array of indices.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.GetIndices(System.Int32)">
            <summary>
            Returns the indices for a certain vertex.
            </summary>
            <param name="vertexIndex">The array of indices.</param>
            <returns>The array of indices.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.Item(System.Int32)">
            <summary>
            Data access via indexer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.Data">
            <summary>
            Array to array data.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareBoneIndicesStream.Name">
            <summary>
            Returns the name of the stream.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream">
            <summary>
            A software bone weights stream holding an arbitrary number of weights.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            This stream is used to store the influencing weights for every vertex.
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.#ctor(System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream"/>.
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream"/>.
            </summary>
            <remarks>
            Init has to be called!!!
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.Init(System.Int32)">
            <summary>
            Initialises the array with a given size.
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.SetData(System.Array)">
            <summary>
            Sets the value of the array.
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.SetWeights(System.Int32,System.Single[])">
            <summary>
            Sets the weights for a certain vertex.
            </summary>
            <param name="vertexIndex">Index of vertex to set bone weights for.</param>
            <param name="weights">The array of weights.</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.GetWeights(System.Int32)">
            <summary>
            Returns the weights for a certain vertex.
            </summary>
            <param name="vertexIndex">The array of weights.</param>
            <returns>The array of weights.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.Name">
            <summary>
            Returns the name of the stream.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.Item(System.Int32)">
            <summary>
            Data access via indexer.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.SoftwareBoneWeightsStream.Data">
            <summary>
            Array to array data.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.TangentStream">
            <summary>
            Tangent Vector stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TangentStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TangentStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TangentStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TangentStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TangentStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TangentStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexStreams.TextureStream">
            <summary>
            Texture array
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.Bind">
            <summary>
            Binds this type to the <see cref="T:Purple.Graphics.StreamFactory"/>.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.#ctor(Purple.Graphics.VertexUnit)">
            <summary>
            constructor
            </summary>
            <param name="vertexUnit"></param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.#ctor(System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="size">number of elements</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.#ctor">
            <summary>
            Constructor
            Init has to be called!!!
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.Init(System.Int32)">
            <summary>
            initialises the array with a given size
            </summary>
            <param name="size">size of array</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.SetData(System.Array)">
            <summary>
            sets the value of the array
            </summary>
            <param name="data">array to set</param>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.From(Purple.Graphics.VertexUnit,System.Int32)">
            <summary>
            returns the nth texture unit from a certain vertex unit
            </summary>
            <param name="vertexUnit">vertexUnit to get stream from</param>
            <param name="index">the number of the texture stream to retrieve</param>
            <returns>the nth texture stream from the vertex unit </returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.From(Purple.Graphics.VertexUnit)">
            <summary>
            return the first texture stream from a certain vertex unit
            </summary>
            <param name="vertexUnit">the vertex unit to retrieve stream from</param>
            <returns>first texture stream from a certain vertex unit</returns>
        </member>
        <member name="M:Purple.Graphics.VertexStreams.TextureStream.Clone">
            <summary>
            Creates a deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.
            </summary>
            <returns>A deep-copy of the current <see cref="T:Purple.Graphics.IGraphicsStream"/>.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.Item(System.Int32)">
            <summary>
            data access over indexer
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.Name">
            <summary>
            name of stream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.Data">
            <summary>
            access to array data
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.Type">
            <summary>
            type of vertices
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.ElementSize">
            <summary>
            returns the size in bytes of one array element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.VertexElement">
            <summary>
            gets the description of the vertex element
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.VertexUnit">
            <summary>
            returns vertexUnit of VertexStream
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.BufferManager">
            <summary>
            returns the used BufferManager
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexStreams.TextureStream.IsSoftware">
            <summary>
            Returns true if the current stream is a <see cref="T:Purple.Graphics.VertexStreams.SoftwareStream"/>.
            </summary>
        </member>
        <member name="T:Purple.Graphics.VertexUnit">
            <summary>
            Class that combines vertex data(<see cref="T:Purple.Graphics.IVertexStream"/>s).
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.#ctor(Purple.Graphics.VertexFormat,System.Int32)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
            <param name="format">The format of the <see cref="T:Purple.Graphics.VertexUnit"/>.</param>
            <param name="size">The number of elements per stream.</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.#ctor(System.Collections.IList)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
            <param name="streams">List of offline streams (must have same size).</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Upload">
            <summary>
            upload all streams of vertexUnit
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Upload(System.Int32,System.Int32)">
            <summary>
            upload all streams of vertexUnit
            </summary>
            <param name="start">Index to start with uploading</param>
            <param name="length">Number of elements to upload.</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.HasOnlineData">
            <summary>
            Returns true if the vertexUnit already has at least one stream online.
            </summary>
            <returns>True if the vertexUnit already has at least one stream online.</returns>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Clone(Purple.Graphics.VertexFormat)">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
            <param name="format">The <see cref="T:Purple.Graphics.VertexFormat"/> of the new format.</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.ChangeFormat(Purple.Graphics.Semantic[])">
            <summary>
            Changes the format of the <see cref="T:Purple.Graphics.VertexUnit"/> to fit the given 
            semantics.
            </summary>
            <param name="semantics">Semantics to fit.</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Clone(Purple.Graphics.Semantic[])">
            <summary>
            Creates a new <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
            <param name="semantics">The semantics to fit.</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Clone">
            <summary>
            clones vertex buffer - uses depth copy
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Dispose">
            <summary>
            dispose vertexUnit
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.DisposeOfflineData">
            <summary>
            Disposes the offline data.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.DisposeOnlineData">
            <summary>
            Disposes the online data.
            </summary>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Resize(System.Int32)">
            <summary>
            Resizes the vertexUnit;
            </summary>
            <param name="size">New size</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Copy(Purple.Graphics.VertexUnit,System.Int32,Purple.Graphics.VertexUnit,System.Int32,System.Int32)">
            <summary>
            copies VertexUnit data
            </summary>
            <param name="source">VertexUnit containing source streams</param>
            <param name="sourceIndex">index of source</param>
            <param name="dest">ertexUnit containing destination streams</param>
            <param name="destIndex">index of destination</param>
            <param name="length">number of elements to copy</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.Indexify(Purple.Graphics.VertexUnit@,Purple.Graphics.VertexStreams.IndexStream@)">
            <summary>
            creates an indexed vertexUnit and the indexStream from the current vertexUnit
            </summary>
            <param name="vertexUnit">created vertexUnit</param>
            <param name="indexStream">created indexStream</param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.CopyTo(System.Array,System.Int32)">
            <summary>
            When implemented by a class, copies the elements of the <see cref="T:System.Collections.ICollection"/>
            to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. 
            The Array must have zero-based indexing. </param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Purple.Graphics.VertexUnit.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Size">
            <summary>
            The number of elements contained by each <see cref="T:Purple.Graphics.IVertexStream"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.StreamCount">
            <summary>
            The number of streams of the <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Position">
            <summary>
            Start offset in the physical buffer.
            </summary>
            <remarks>
            All streams must have the same start position ;-). Perhaps this 
            will change in the future (hardware restriction).
            </remarks>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.VertexDeclaration">
            <summary>
            Returns the vertexDeclaration for the current <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Semantics">
            <summary>
            Returns the <see cref="T:Purple.Graphics.Semantic"/>s for the current <see cref="T:Purple.Graphics.VertexUnit"/>.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Format">
            <summary>
            Returns the <see cref="T:Purple.Graphics.VertexFormat"/> of unit.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Item(System.Int32)">
            <summary>
            Returns an <see cref="T:Purple.Graphics.IVertexStream"/> via index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Item(System.String)">
            <summary>
            Returns an <see cref="T:Purple.Graphics.IVertexStream"/> via name.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Item(System.String,System.Int32)">
            <summary>
            Returns an <see cref="T:Purple.Graphics.IVertexStream"/> via name and index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Item(System.Type)">
            <summary>
            Returns an <see cref="T:Purple.Graphics.IVertexStream"/> via its type.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Item(System.Type,System.Int32)">
            <summary>
            Returns an <see cref="T:Purple.Graphics.IVertexStream"/> via its type and index.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Item(Purple.Graphics.Semantic)">
            <summary>
            Returns an <see cref="T:Purple.Graphics.IVertexStream"/> via its semantic.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.Count">
            <summary>
            The number elements in the collection.
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the 
            <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:Purple.Graphics.VertexUnit.SyncRoot">
            <summary>
            When implemented by a class, gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Purple.Graphics.Viewport">
            <summary>
            view port
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            creates an viewport object
            </summary>
            <param name="left">upper left corner of the viewport on the render target</param>
            <param name="top">upper left corner of the viewport on the render target</param>
            <param name="right">lower right corner of the viewport on the render target</param>
            <param name="bottom">lower right corner of the viewport on the render target</param>
        </member>
        <member name="P:Purple.Graphics.Viewport.Left">
            <summary>
            upper left corner of the viewport on the render target
            </summary>
        </member>
        <member name="P:Purple.Graphics.Viewport.Top">
            <summary>
            upper left corner of the viewport on the render target
            </summary>
        </member>
        <member name="P:Purple.Graphics.Viewport.Right">
            <summary>
            lower right corner of the viewport on the render target
            </summary>
        </member>
        <member name="P:Purple.Graphics.Viewport.Bottom">
            <summary>
            lower right corner of the viewport on the render target
            </summary>
        </member>
        <member name="P:Purple.Graphics.Viewport.Width">
            <summary>
            width of the viewport
            </summary>
        </member>
        <member name="P:Purple.Graphics.Viewport.Height">
            <summary>
            height of the viewport
            </summary>
        </member>
        <member name="P:Purple.Graphics.Viewport.Rectangle">
            <summary>
            return viewport as rectangle
            </summary>
        </member>
        <member name="T:Purple.Input.Capabilities">
            <summary>
            Capabilities for a certain input device.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="F:Purple.Input.Capabilities.Axes">
            <summary>
            The number of axes of the device.
            </summary>
        </member>
        <member name="F:Purple.Input.Capabilities.Buttons">
            <summary>
            The number of buttons of the device.
            </summary>
        </member>
        <member name="F:Purple.Input.Capabilities.PointOfViews">
            <summary>
            The number of point of view controllers available on the device.
            </summary>
        </member>
        <member name="T:Purple.Input.ForceFeedback.IEffect">
            <summary>
            Abstract interface for a force feedback effect.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Input.ForceFeedback.IEffect.Start(System.Int32)">
            <summary>
            Starts playing an effect.
            </summary>
            <param name="iterations">Number of times to play the effect.</param>
        </member>
        <member name="M:Purple.Input.ForceFeedback.IEffect.Stop">
            <summary>
            Stops playing an effect;
            </summary>
        </member>
        <member name="M:Purple.Input.ForceFeedback.IEffect.SetDirection(System.Int32,System.Single)">
            <summary>
            Sets the direction of the effect for a certain axis.
            </summary>
            <param name="index">The index of the axis.</param>
            <param name="dir">The direction of the axis.</param>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IEffect.Name">
            <summary>
            Name of the effect.
            </summary>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IEffect.Duration">
            <summary>
            The duration of the effect.
            </summary>
            <remarks>The total duration of the effect, in microseconds. 
            If this value is INFINITE, the effect has infinite duration. 
            If an envelope has been applied to the effect, the attack is applied, followed by an infinite sustain. </remarks>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IEffect.Gain">
            <summary>
            The gain to be applied to the effect, in the range from 0.0f through 1.0f; 
            The gain is a scaling factor applied to all magnitudes of the effect and its envelope. 
            </summary>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IEffect.AxesCount">
            <summary>
            Returns the number of force feedback axes of the effect.
            </summary>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IEffect.IsPlaying">
            <summary>
            Returns true if the effect is currently playing.
            </summary>
        </member>
        <member name="T:Purple.Input.ForceFeedback.IConstantEffect">
            <summary>
            Constant force effect.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IConstantEffect.Magnitude">
            <summary>
            The magnitude of the effect, in the range from –1.0f through 1.0f 
            If an envelope is applied to this effect, the value represents the magnitude of the sustain. 
            If no envelope is applied, the value represents the amplitude of the entire effect. 
            </summary>
        </member>
        <member name="T:Purple.Input.ForceFeedback.IRampEffect">
            <summary>
            Ramp force effect.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            The <c>Duration</c> of an IRampEffect mustn't be infinte!
            </remarks>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IRampEffect.Begin">
            <summary>
            Magnitude at the start of the effect, in the range from –1.0f through 1.0f. 
            </summary>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IRampEffect.End">
            <summary>
            Magnitude at the end of the effect, in the range from –1.0f through 1.0f.
            </summary>
        </member>
        <member name="T:Purple.Input.ForceFeedback.IPeriodicEffect">
            <summary>
            Periodic force effect.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IPeriodicEffect.Magnitude">
            <summary>
            The magnitude of the effect, in the range from –1.0f through 1.0f 
            If an envelope is applied to this effect, the value represents the magnitude of the sustain. 
            If no envelope is applied, the value represents the amplitude of the entire effect. 
            </summary>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IPeriodicEffect.Offset">
            <summary>
            Offset of the effect. The range of forces generated by the effect is Offset minus Magnitude to Offset plus Magnitude.
            The value of the lOffset member is also the baseline for any envelope that is applied to the effect. 
            </summary>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IPeriodicEffect.Phase">
            <summary>
            Position in the cycle of the periodic effect at which playback begins, in the range from 0 through 2 Pi.
            </summary>
            <remarks>
            A device driver cannot provide support for all values in the Phase member. 
            In this case, the value is rounded off to the nearest supported value.
            </remarks>
        </member>
        <member name="P:Purple.Input.ForceFeedback.IPeriodicEffect.Period">
            <summary>
            Period of the effect, in seconds. 
            </summary>
        </member>
        <member name="T:Purple.Input.IGamePad">
            <summary>
            Abstract interface for a gamePad.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="T:Purple.Input.IInputDevice">
            <summary>
            Abstract interface for a certain input device.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="P:Purple.Input.IInputDevice.Capabilities">
            <summary>
            Returns the capabilties of the device.
            </summary>
        </member>
        <member name="M:Purple.Input.IGamePad.IsDown(System.Int32)">
            <summary>
            Returns true if a certain button is down.
            </summary>
            <param name="button">The button to test for.</param>
            <returns>True if button is down.</returns>
        </member>
        <member name="M:Purple.Input.IGamePad.IsUp(System.Int32)">
            <summary>
            Returns true if a certain button is up. 
            </summary>
            <param name="button">The button to test for.</param>
            <returns>True if button is up.</returns>
        </member>
        <member name="M:Purple.Input.IGamePad.FindEffect(System.Type)">
            <summary>
            Searches for an effect with a certain type.
            </summary>
            <param name="type">Type of effect to search for.</param>
            <returns>The first effect with a certain type or null.</returns>
        </member>
        <member name="P:Purple.Input.IGamePad.PointOfViews">
            <summary>
            Returns the angles of the point of view controls of the gamePad or float.NAN if they are centered.
            </summary>
        </member>
        <member name="P:Purple.Input.IGamePad.Axes">
            <summary>
            Returns the positions of the axes of the gamePad.
            </summary>
        </member>
        <member name="P:Purple.Input.IGamePad.Effects">
            <summary>
            Available force feedback effects.
            </summary>
        </member>
        <member name="P:Purple.Input.IGamePad.SupportsForceFeedback">
            <summary>
            Returns true if the device supports force feedback.
            </summary>
        </member>
        <member name="T:Purple.Input.IInputEngine">
            <summary>
            Abstract interface for an input engine.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.IInputEngine.Init(System.Windows.Forms.Control)">
            <summary>
            Initializes the input engine.
            </summary>
            <param name="control">Instance of control to render into.</param>
        </member>
        <member name="M:Purple.Input.IInputEngine.Update">
            <summary>
            Updates all input devices.
            </summary>
            <remarks>
            Should be called once per frame.
            </remarks>
        </member>
        <member name="P:Purple.Input.IInputEngine.Initialized">
            <summary>
            Returns true if engine is initialized.
            </summary>
        </member>
        <member name="P:Purple.Input.IInputEngine.Keyboard">
            <summary>
            Returns the keyboard object.
            </summary>
        </member>
        <member name="P:Purple.Input.IInputEngine.Mouse">
            <summary>
            Returns the mouse object.
            </summary>
        </member>
        <member name="P:Purple.Input.IInputEngine.GamePads">
            <summary>
            Returns the the array of gamepads.
            </summary>
        </member>
        <member name="T:Purple.Input.IKeyHandler">
            <summary>
            Interface that defines a keyboard handler.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.IKeyHandler.OnKey(Purple.Input.Key,System.Boolean)">
            <summary>
            Method that handles mouse events.
            </summary>
            <param name="key">The key that was pressed or released.</param>
            <param name="pressed">Flag that indicates if key was pressed or released.</param>
            <returns>True if the key was handled and shouldn't be passed on to the underlaying elements.</returns>
        </member>
        <member name="T:Purple.Input.KeyHandler">
            <summary>
            Delegate for handling key events.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Input.CharHandler">
            <summary>
            Delegate for handling text input.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="T:Purple.Input.IKeyboard">
            <summary>
            Abstract interface for the keyboard.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.IKeyboard.IsUp(Purple.Input.Key)">
            <summary>
            Returns true is key is up at the moment.
            </summary>
            <param name="key">Key to test for.</param>
            <returns>True is key is up (not pressed).</returns>
        </member>
        <member name="M:Purple.Input.IKeyboard.IsDown(Purple.Input.Key)">
            <summary>
            Returns true if key is down at the moment.
            </summary>
            <param name="key">Key to test for.</param>
            <returns>True if key is down (pressed).</returns>
        </member>
        <member name="E:Purple.Input.IKeyboard.OnKey">
            <summary>
            Event that is fired when a key gets pressed or released.
            </summary>
        </member>
        <member name="E:Purple.Input.IKeyboard.OnChar">
            <summary>
            Event that is fired when an key was pressed. This event handler returns the 
            ASCII value.
            </summary>
        </member>
        <member name="T:Purple.Input.MouseButton">
            <summary>
            Enumeration of all mouse buttons.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="F:Purple.Input.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Button4">
            <summary>
            Mouse button 4.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Button5">
            <summary>
            Mouse button 5.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Button6">
            <summary>
            Mouse button 6.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Button7">
            <summary>
            Mouse button 7.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.Button8">
            <summary>
            Mouse button 8.
            </summary>
        </member>
        <member name="F:Purple.Input.MouseButton.None">
            <summary>
            No mouse button was pressed.
            </summary>
        </member>
        <member name="T:Purple.Input.MouseHandler">
            <summary>
            Delegate for handling mouse events.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>  
              <para>Since: 0.4</para>
            </remarks>
        </member>
        <member name="T:Purple.Input.IMouse">
            <summary>
            Abstract interface for the mouse.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.IMouse.IsDown(Purple.Input.MouseButton)">
            <summary>
            Returns true if a certain mouse button is down. 
            </summary>
            <param name="mouseButton">The mouse button to test for.</param>
            <returns>True if mouse button is down.</returns>
        </member>
        <member name="M:Purple.Input.IMouse.IsUp(Purple.Input.MouseButton)">
            <summary>
            Returns true if a certain mouse button is up. 
            </summary>
            <param name="mouseButton">The mouse button to test for.</param>
            <returns>True if mouse button is up.</returns>
        </member>
        <member name="E:Purple.Input.IMouse.OnMouse">
            <summary>
            Event that is fired in case of mouse events.
            </summary>
        </member>
        <member name="P:Purple.Input.IMouse.Delta">
            <summary>
            Movement of the mouse.
            </summary>
        </member>
        <member name="P:Purple.Input.IMouse.Position">
            <summary>
            Returns the position of the mouse.
            </summary>
        </member>
        <member name="P:Purple.Input.IMouse.ButtonNum">
            <summary>
            Returns the number of mouse buttons.
            </summary>
        </member>
        <member name="P:Purple.Input.IMouse.Clamp">
            <summary>
            Flag that indicates if the mouse position is clamped to the screen.
            </summary>
            <remarks>The default value of this flag is true.</remarks>
        </member>
        <member name="P:Purple.Input.IMouse.HideNativeCursor">
            <summary>
            Gets or sets the flag which indicates if the native mouse
            cursor should be hidden when inside the window.
            </summary>
        </member>
        <member name="T:Purple.Input.InputEngine">
            <summary>
            InputEngine using an inputEngine plugIn
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Input.InputEngine.Init(System.Windows.Forms.Control)">
            <summary>
            inits the input engine
            </summary>
            <param name="control">main window</param>
        </member>
        <member name="M:Purple.Input.InputEngine.Update">
            <summary>
            updates all input devices
            is called by engine once fore every frame
            </summary>
        </member>
        <member name="M:Purple.Input.InputEngine.Dispose">
            <summary>
            dispose the engine
            </summary>
        </member>
        <member name="M:Purple.Input.InputEngine.LoadMouseCursor">
            <summary>
            Loads the standard mouse cursor.
            </summary>
            <returns>The standard mouse cursor.</returns>
        </member>
        <member name="P:Purple.Input.InputEngine.StandardMouseCursor">
            <summary>
            Returns the standard mouse cursor;
            </summary>
        </member>
        <member name="P:Purple.Input.InputEngine.Instance">
            <summary>
            gets singleton instance of InputEngine
            </summary>
        </member>
        <member name="P:Purple.Input.InputEngine.Initialized">
            <summary>
            Flag that indicates if <see cref="T:Purple.Input.InputEngine"/> is initialized.
            </summary>
        </member>
        <member name="P:Purple.Input.InputEngine.Keyboard">
            <summary>
            get the keyboard device
            </summary>
        </member>
        <member name="P:Purple.Input.InputEngine.Mouse">
            <summary>
            get the mouse device
            </summary>
        </member>
        <member name="P:Purple.Input.InputEngine.GamePads">
            <summary>
            Returns the array of gamepads.
            </summary>
        </member>
        <member name="T:Purple.Input.Key">
            <summary>
            Key enumeration
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Input.Key.Esc">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N1">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N2">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N3">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N4">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N5">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N6">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N7">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N8">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N9">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N0">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Minus">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Equals">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Back">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Tab">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Q">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.W">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.E">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.R">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.T">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Y">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.U">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.I">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.O">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.P">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.LeftBracket">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.RightBracket">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Return">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.LeftControl">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.A">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.S">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.D">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.G">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.H">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.J">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.K">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.L">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Semicolon">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Apostrophe">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Grave">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.LeftShift">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.BackSlash">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Z">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.X">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.C">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.V">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.B">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.N">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.M">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Comma">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Period">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Slash">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.RightShift">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Multiply">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.LeftAlt">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Space">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Capital">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F1">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F2">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F3">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F4">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F5">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F6">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F7">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F8">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F9">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F10">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F11">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F12">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F13">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F14">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.F15">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.NumLock">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Scroll">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num7">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num8">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Subtract">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num4">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num5">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num6">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Add">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num1">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num2">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num3">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Num0">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Decimal">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.OEM102">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Kana">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.AbntC1">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Convert">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.NoConvert">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Yen">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.AnbtC2">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.NumEquals">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.PrevTrack">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.At">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Colon">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Underline">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Kanji">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Stop">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Ax">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Unlabeled">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.NextTrack">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Enter">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.RightControl">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Mute">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Calculator">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.PlayPause">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.MediaStop">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.VolumeDown">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.VolumeUp">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebHome">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.NumComma">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Divide">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.SysRQ">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.RightAlt">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Pause">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Home">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Up">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Prior">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Left">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Right">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.End">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Down">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Next">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Insert">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Delete">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.LeftWin">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.RightWin">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Apps">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Power">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Sleep">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Wake">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebSearch">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebFavorites">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebRefresh">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebStop">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebForward">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.WebBack">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.MyComputer">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.Mail">
            <summary></summary>
        </member>
        <member name="F:Purple.Input.Key.MediaSelect">
            <summary></summary>
        </member>
        <member name="T:Purple.IO.FileSystem">
            <summary>
            The standard implementation of <see cref="T:Purple.IO.IFileSystem"/> that 
            allows to create a file system for a certain directory.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
              <para>Last Update: 0.72</para>
            </remarks>
        </member>
        <member name="T:Purple.IO.IFileSystem">
            <summary>
            The abstract interface for a "virtual file system".
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
              <para>Last Update: 0.72</para>
            </remarks>
        </member>
        <member name="M:Purple.IO.IFileSystem.Open(System.String)">
            <summary>
            Returns the stream of a certain file within the file system. 
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The stream of a certain file within the file system.</returns>
        </member>
        <member name="M:Purple.IO.IFileSystem.Create(System.String)">
            <summary>
            Creates a new file with a certain name and returns the created stream.
            </summary>
            <param name="fileName">Name of the file to create.</param>
            <returns>The stream of the created file.</returns>
        </member>
        <member name="M:Purple.IO.IFileSystem.Exists(System.String)">
            <summary>
            Returns true if a file with a certain name exists within the file system.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>True if a file with a certain name exists within the file system.</returns>
        </member>
        <member name="M:Purple.IO.IFileSystem.ExistsDirectory(System.String)">
            <summary>
            Returns true if a directory with a certain name exits.
            </summary>
            <param name="directory">The directory to test for.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:Purple.IO.IFileSystem.GetFullPath(System.String)">
            <summary>
            Returns the full path for a certain file name.
            </summary>
            <param name="fileName">The fileName to return the full path for.</param>
            <returns>The full path for a certain file name.</returns>
        </member>
        <member name="M:Purple.IO.IFileSystem.GetFiles(System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.IFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.IFileSystem.GetDirectories(System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.IFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.IFileSystem.GetProperties(System.String)">
            <summary>
            Returns the file properties for a certain file. 
            </summary>
            <param name="path">The filepath to get attributes for.</param>
            <returns>The file properties or null if file doesn't exist.</returns>
        </member>
        <member name="M:Purple.IO.FileSystem.#ctor(System.String)">
            <summary>
            Creates a new instance of a disc file system.
            </summary>
            <param name="root">The root directory for the file system.</param>
        </member>
        <member name="M:Purple.IO.FileSystem.Open(System.String)">
            <summary>
            Returns the stream of a certain file within the file system. 
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The stream of a certain file within the file system.</returns>
        </member>
        <member name="M:Purple.IO.FileSystem.Create(System.String)">
            <summary>
            Creates a new file with a certain name and returns the created stream.
            </summary>
            <param name="fileName">Name of the file to create.</param>
            <returns>The stream of the created file.</returns>
        </member>
        <member name="M:Purple.IO.FileSystem.Save(System.IO.Stream,System.String)">
            <summary>
            Saves the data contained by the stream to the given file.
            </summary>
            <param name="stream">Stream containing the data.</param>
            <param name="fileName">Name of file to save to.</param>
        </member>
        <member name="M:Purple.IO.FileSystem.Exists(System.String)">
            <summary>
            Returns true if a file with a certain name exists within the file system.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>True if a file with a certain name exists within the file system.</returns>
        </member>
        <member name="M:Purple.IO.FileSystem.ExistsDirectory(System.String)">
            <summary>
            Returns true if a directory with a certain name exits.
            </summary>
            <param name="directory">The directory to test for.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:Purple.IO.FileSystem.GetFullPath(System.String)">
            <summary>
            Returns the full path for a certain file name.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.IO.FileSystem.GetFiles(System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
        </member>
        <member name="M:Purple.IO.FileSystem.GetDirectories(System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
        </member>
        <member name="M:Purple.IO.FileSystem.GetFiles(System.String,System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
        </member>
        <member name="M:Purple.IO.FileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
        </member>
        <member name="M:Purple.IO.FileSystem.GetProperties(System.String)">
            <summary>
            Returns the file properties for a certain file. 
            </summary>
            <param name="path">The filepath to get attributes for.</param>
            <returns>The file properties or null if file doesn't exist.</returns>
        </member>
        <member name="P:Purple.IO.FileSystem.Root">
            <summary>
            The root path for the FileSystem.
            </summary>
        </member>
        <member name="T:Purple.IO.Folder">
            <summary>
            A sub directory of a certain <see cref="T:Purple.IO.IFileSystem"/> that can 
            be treated like an <see cref="T:Purple.IO.IFileSystem"/> again.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
              <parA>Last Update: 0.72</parA>
            </remarks>
        </member>
        <member name="M:Purple.IO.Folder.#ctor(Purple.IO.IFileSystem,System.String)">
            <summary>
            Creates a new instance of a directory file system.
            </summary>
            <param name="parent">Parent file system.</param>
            <param name="folderPath">The path within the file system.</param>
        </member>
        <member name="M:Purple.IO.Folder.#ctor(System.String)">
            <summary>
            Creates a new instance of a folder file system.
            </summary>
            <param name="folderPath">The folderpath relative to the Engine.FileSystem</param>
        </member>
        <member name="M:Purple.IO.Folder.Open(System.String)">
            <summary>
            Returns the stream of a certain file within the file system. 
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The stream of a certain file within the file system.</returns>
        </member>
        <member name="M:Purple.IO.Folder.Create(System.String)">
            <summary>
            Creates a new file with a certain name and returns the created stream.
            </summary>
            <param name="fileName">Name of the file to create.</param>
            <returns>The stream of the created file.</returns>
        </member>
        <member name="M:Purple.IO.Folder.Exists(System.String)">
            <summary>
            Returns true if a file with a certain name exists within the file system.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>True if a file with a certain name exists within the file system.</returns>
        </member>
        <member name="M:Purple.IO.Folder.ExistsDirectory(System.String)">
            <summary>
            Returns true if a directory with a certain name exits.
            </summary>
            <param name="directory">The directory to test for.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:Purple.IO.Folder.GetFullPath(System.String)">
            <summary>
            Returns the full path for a certain file name.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.IO.Folder.GetFiles(System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
        </member>
        <member name="M:Purple.IO.Folder.GetDirectories(System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
        </member>
        <member name="M:Purple.IO.Folder.GetFiles(System.String,System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
        </member>
        <member name="M:Purple.IO.Folder.GetDirectories(System.String,System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
        </member>
        <member name="M:Purple.IO.Folder.GetProperties(System.String)">
            <summary>
            Returns the file properties for a certain file. 
            </summary>
            <param name="path">The filepath to get attributes for.</param>
            <returns>The file properties or null if file doesn't exist.</returns>
        </member>
        <member name="T:Purple.IO.FileProperties">
            <summary>
            The properties of a certain file.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para> 
            Most properties are missing at the moment!
            </remarks>
        </member>
        <member name="F:Purple.IO.FileProperties.CreationTime">
            <summary>
            Returns the creation time of the file.
            </summary>
        </member>
        <member name="F:Purple.IO.FileProperties.LastWriteTime">
            <summary>
            Returns the last time, the file was modified.
            </summary>
        </member>
        <member name="M:Purple.IO.FileProperties.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Creates a new instance of the FileProperties class.
            </summary>
            <param name="creationTime">The creationTime of the file.</param>
            <param name="lastWriteTime">The last time, the file was modified.</param>
        </member>
        <member name="T:Purple.IO.Path">
            <summary>
            A helper class for handling filePath stuff.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
            </remarks>
        </member>
        <member name="M:Purple.IO.Path.GetFolder(System.String)">
            <summary>
            Extracts the folder path from a filePath. 
            </summary>
            <param name="filePath">The folder path + fileName.</param>
            <returns>The folder path.</returns>
        </member>
        <member name="M:Purple.IO.Path.GetFileName(System.String)">
            <summary>
            Extracts the fileName from a filePath.
            </summary>
            <param name="filePath">The filePath to extract the fileName from.</param>
            <returns>The extracted fileName.</returns>
        </member>
        <member name="M:Purple.IO.Path.GetExtension(System.String)">
            <summary>
            Extracts the extension from a given filePath.
            </summary>
            <param name="filePath">The filePath to extract the fileName from.</param>
            <returns>The extracted fileName.</returns>
        </member>
        <member name="M:Purple.IO.Path.Match(System.String[],System.String)">
            <summary>
            Tests an array of strings if they match a certain pattern.
            </summary>
            <param name="names">String to test if the match the pattern.</param>
            <param name="pattern">The pattern to use for testing the strings.</param>
            <returns>Returns the array of strings that match the pattern.</returns>
        </member>
        <member name="M:Purple.IO.Path.Unify(System.String)">
            <summary>
            Creates a unified path from a operating system dependant.
            </summary>
            <param name="path">Source path to unify.</param>
            <returns>The unified path.</returns>
        </member>
        <member name="M:Purple.IO.Path.Unify(System.String[])">
            <summary>
            Unifies an array of pathes.
            </summary>
            <param name="pathes">Array of pathes to unify.</param>
            <returns>The unified path array.</returns>
        </member>
        <member name="M:Purple.IO.Path.Merge(System.String,System.String)">
            <summary>
            Merges two filePaths.
            </summary>
            <param name="filePath1">The first path to merge.</param>
            <param name="filePath2">The second path to merge.</param>
            <returns>The merged filePath.</returns>
            <exception cref="T:System.ArgumentException">Thrown if filePath2 is a full path, but 
            filePath1 isn't empty.</exception> 
        </member>
        <member name="M:Purple.IO.Path.IsFullPath(System.String)">
            <summary>
            Tests if a given path is a already a full path.
            </summary>
            <param name="path">Path to test.</param>
            <returns>Returns true if it is a full path.</returns>
        </member>
        <member name="M:Purple.IO.Path.Remove(System.String,System.String)">
            <summary>
            Removes a certain subPath from a path.
            </summary>
            <param name="path">The path to remove subPath from.</param>
            <param name="subPath">The path to remove.</param>
            <returns>The remaining path.</returns>
        </member>
        <member name="T:Purple.IO.RefFileSystem">
            <summary>
            The <see cref="T:Purple.IO.RefFileSystem"/> holds a reference to another 
            <see cref="T:Purple.IO.FileSystem"/>. It is mainly used for referencing the 
            <code>Engine.Instance.FileSystem</code>.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
            The need for this class might not be obvious at the first glance. 
            It is mainly used to reference the <code>Engine.Instance.FileSystem</code>. By using 
            the <see cref="T:Purple.IO.RefFileSystem"/>, the underlying filesystem can be exchanged without 
            having to update all classes referencing the filesystem to change.
            </remarks>
        </member>
        <member name="M:Purple.IO.RefFileSystem.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.IO.RefFileSystem"/> referencing 
            the standard <code>Engine.Instance.FileSystem</code>.
            </summary>
        </member>
        <member name="M:Purple.IO.RefFileSystem.#ctor(Purple.IO.IFileSystemContainer)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.IO.RefFileSystem"/> referencing a certain 
            other filesystem.
            </summary>
            <param name="fsc">The filesystem container to reference.</param>
        </member>
        <member name="M:Purple.IO.RefFileSystem.Open(System.String)">
            <summary>
            Returns the stream of a certain file within the file system. 
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The stream of a certain file within the file system.</returns>
        </member>
        <member name="M:Purple.IO.RefFileSystem.Create(System.String)">
            <summary>
            Creates a new file with a certain name and returns the created stream.
            </summary>
            <param name="fileName">Name of the file to create.</param>
            <returns>The stream of the created file.</returns>
        </member>
        <member name="M:Purple.IO.RefFileSystem.Exists(System.String)">
            <summary>
            Returns true if a file with a certain name exists within the file system.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>True if a file with a certain name exists within the file system.</returns>
        </member>
        <member name="M:Purple.IO.RefFileSystem.GetProperties(System.String)">
            <summary>
            Returns the file properties for a certain file. 
            </summary>
            <param name="path">The filepath to get attributes for.</param>
            <returns>The file properties or null if file doesn't exist.</returns>
        </member>
        <member name="M:Purple.IO.RefFileSystem.ExistsDirectory(System.String)">
            <summary>
            Returns true if a directory with a certain name exits.
            </summary>
            <param name="directory">The directory to test for.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:Purple.IO.RefFileSystem.GetFullPath(System.String)">
            <summary>
            Returns the full path for a certain file name.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.IO.RefFileSystem.GetFiles(System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.RefFileSystem.GetFiles(System.String,System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.RefFileSystem.GetDirectories(System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.RefFileSystem.GetDirectories(System.String,System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="P:Purple.IO.RefFileSystem.Instance">
            <summary>
            Returns the standard instance of the <see cref="T:Purple.IO.RefFileSystem"/>.
            </summary>
        </member>
        <member name="T:Purple.IO.ResourceFileSystem">
            <summary>
            A filesystem for loading embedded resource files.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para> 
              Some methods still have to be implemented!
            </remarks>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.#ctor">
            <summary>
            Creates a new instance of a resource file system.
            </summary>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.#ctor(System.Reflection.Assembly)">
            <summary>
            Creates a new instance of a resource file system.
            </summary>
            <param name="assembly">Assembly containing the resources.</param>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.Add(System.Reflection.Assembly)">
            <summary>
            Adds an assembly to the resource file system.
            </summary>
            <param name="assembly">Assembly to add.</param>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.Open(System.String)">
            <summary>
            Returns the stream of a certain file within the file system. 
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>The stream of a certain file within the file system.</returns>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.Create(System.String)">
            <summary>
            Creates a new file with a certain name and returns the created stream.
            </summary>
            <param name="fileName">Name of the file to create.</param>
            <returns>The stream of the created file.</returns>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.Exists(System.String)">
            <summary>
            Returns true if a file with a certain name exists within the file system.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>True if a file with a certain name exists within the file system.</returns>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.GetProperties(System.String)">
            <summary>
            Returns the file properties for a certain file. 
            </summary>
            <param name="path">The filepath to get attributes for.</param>
            <returns>The file properties or null if file doesn't exist.</returns>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.ExistsDirectory(System.String)">
            <summary>
            Returns true if a directory with a certain name exits.
            </summary>
            <param name="directory">The directory to test for.</param>
            <returns>True if the directory exists.</returns>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.GetFullPath(System.String)">
            <summary>
            Returns the full path for a certain file name.
            </summary>
            <param name="fileName">The fileName to return the full path for.</param>
            <returns>The full path for a certain file name.</returns>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.GetFiles(System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.Purple#IO#IFileSystem#GetFiles(System.String,System.String)">
            <summary>
            Returns the list of files contained by the <see cref="T:Purple.IO.IFileSystem"/>.
            </summary>
            <param name="path">File relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.GetDirectories(System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="M:Purple.IO.ResourceFileSystem.Purple#IO#IFileSystem#GetDirectories(System.String,System.String)">
            <summary>
            Returns the list of directories contained by the <see cref="T:Purple.IO.IFileSystem"/>
            </summary>
            <param name="path">Path relative to the <see cref="T:Purple.IO.IFileSystem"/>.</param>
            <param name="pattern">The regular expression pattern to apply.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if search path doesn't exist.</exception>
        </member>
        <member name="P:Purple.IO.ResourceFileSystem.Instance">
            <summary>
            Returns the default instance of the filesystem.
            </summary>
        </member>
        <member name="T:Purple.Log">
            <summary>
            standard logger
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Log.#cctor">
            <summary>
            static constructor of log class
            </summary>
        </member>
        <member name="M:Purple.Log.GetStackTrace(System.Int32)">
            <summary>
            get the current stack trace
            </summary>
            <param name="skipFrames">number of frames to skip</param>
            <returns>the stack trace string</returns>
        </member>
        <member name="M:Purple.Log.Spam(System.String,System.String)">
            <summary>
            write info with low priority to the log file
            </summary>
            <param name="message">info to write</param>
            <param name="category">category of info (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Log.Spam(System.String)">
            <summary>
            write info with low priority to the log file
            </summary>
            <param name="message">info to write</param>
        </member>
        <member name="M:Purple.Log.Info(System.String,System.String)">
            <summary>
            write an info to the log file
            </summary>
            <param name="message">info to write</param>
            <param name="category">category of info (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Log.Info(System.String)">
            <summary>
            writes info to the log file
            </summary>
            <param name="message">info to write</param>
        </member>
        <member name="M:Purple.Log.Warning(System.String,System.String)">
            <summary>
            write a warning to the log file
            </summary>
            <param name="message">warning to write</param>
            <param name="category">category of this warning (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Log.Warning(System.String)">
            <summary>
            write a warning to the log file
            </summary>
            <param name="message">warning to write</param>
        </member>
        <member name="M:Purple.Log.Error(System.String,System.String)">
            <summary>
            write and error message to the log file
            </summary>
            <param name="message">message to write</param>
            <param name="category">category of this message (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Log.Error(System.String)">
            <summary>
            write an error message to the log file
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Purple.Log.Logger">
            <summary>
            the internally used logger object
            </summary>
        </member>
        <member name="T:Purple.Logging.DebugWindowListener">
            <summary>
            a listener sending log messages to the debug window
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="T:Purple.Logging.ILogListener">
            <summary>
            abstract interface for a log listener
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Logging.ILogListener.Log(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            write a simple message for a given category to the file
            and then move to next line
            </summary>
            <param name="level">severity level of message</param>
            <param name="message">message to write</param>
            <param name="category">category to use</param>
        </member>
        <member name="P:Purple.Logging.ILogListener.Level">
            <summary>
            minimum severity of the log message to get logged
            </summary>
        </member>
        <member name="M:Purple.Logging.DebugWindowListener.#ctor">
            <summary>
            create an instance of a debug window listener
            </summary>
        </member>
        <member name="M:Purple.Logging.DebugWindowListener.Log(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            write a simple message
            </summary>
            <param name="level">log level of message</param>
            <param name="message">message to write</param>
            <param name="category">category to use</param>
        </member>
        <member name="P:Purple.Logging.DebugWindowListener.Level">
            <summary>
            minimum severity of the log message to get logged
            </summary>
        </member>
        <member name="T:Purple.Logging.FileListener">
            <summary>
            A file listener for writing log information to files
            file is secured with a mutex or 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="F:Purple.Logging.FileListener.writer">
            <summary>
            the stream writer used for non-mutex logging
            </summary>
        </member>
        <member name="M:Purple.Logging.FileListener.#ctor(System.String)">
            <summary>
            create an instance of the file listener
            </summary>
        </member>
        <member name="M:Purple.Logging.FileListener.Log(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            write a simple message for a given category to the file
            </summary>
            <param name="level">log level of message</param>
            <param name="message">message to write</param>
            <param name="category">category to use</param>
        </member>
        <member name="M:Purple.Logging.FileListener.CreateString(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            create the string to write
            </summary>
            <param name="level">log level of message</param>
            <param name="message">message to use</param>
            <param name="category">category to use</param>
            <returns>the final string</returns>
        </member>
        <member name="M:Purple.Logging.FileListener.CurrentFileName">
            <summary>
            returns the currently used fileName
            </summary>
            <returns>fileName</returns>
        </member>
        <member name="P:Purple.Logging.FileListener.Level">
            <summary>
            minimum severity of the log message to get logged
            </summary>
        </member>
        <member name="P:Purple.Logging.FileListener.LogTime">
            <summary>
            flag which indicates if time is added to logEntries
            </summary>
        </member>
        <member name="P:Purple.Logging.FileListener.LogAssembly">
            <summary>
            flat indicating if the current assembly should be logged
            </summary>
        </member>
        <member name="P:Purple.Logging.FileListener.Mutex">
            <summary>
            mutex for secure file access
            when mutex is null, a simple critical section is used
            </summary>
        </member>
        <member name="T:Purple.Logging.LogLevel">
            <summary>
            the severity of a certain log message
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="F:Purple.Logging.LogLevel.Error">
            <summary>
            critical error => execution will be stopped
            </summary>
        </member>
        <member name="F:Purple.Logging.LogLevel.Warning">
            <summary>
            warning that something unexpected happended
            non-critical error => execution goes on, but error might result into 
            another critical error
            </summary>
        </member>
        <member name="F:Purple.Logging.LogLevel.Info">
            <summary>
            information with medium priority
            </summary>
        </member>
        <member name="F:Purple.Logging.LogLevel.Spam">
            <summary>
            spam with low priority
            </summary>
        </member>
        <member name="T:Purple.Logging.Logger">
            <summary>
            the logger class
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Logging.Logger.#ctor">
            <summary>
            creates an instance of a logger
            </summary>
        </member>
        <member name="M:Purple.Logging.Logger.#ctor(System.String)">
            <summary>
            creates a logger with a certain base category
            </summary>
            <param name="baseCategory">base category to use</param>
        </member>
        <member name="M:Purple.Logging.Logger.#ctor(System.String,Purple.Logging.Logger)">
            <summary>
            creates a logger with a certain base category
            </summary>
            <param name="baseCategory">base category to use</param>
            <param name="baseNode">base node</param>
        </member>
        <member name="M:Purple.Logging.Logger.CreateNode(System.String)">
            <summary>
            creates new logger node (for a certain subcategory
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Logging.Logger.GetStackTrace(System.Int32)">
            <summary>
            get the current stack trace
            </summary>
            <param name="skipFrames">number of frames to skip</param>
            <returns>the stack trace string</returns>
        </member>
        <member name="M:Purple.Logging.Logger.Spam(System.String,System.String)">
            <summary>
            write info with low priority to the log file
            </summary>
            <param name="message">info to write</param>
            <param name="category">category of info (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Logging.Logger.Spam(System.String)">
            <summary>
            write info with low priority to the log file
            </summary>
            <param name="message">info to write</param>
        </member>
        <member name="M:Purple.Logging.Logger.Info(System.String,System.String)">
            <summary>
            write an info to the log file
            </summary>
            <param name="message">info to write</param>
            <param name="category">category of info (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Logging.Logger.Info(System.String)">
            <summary>
            writes info to the log file
            </summary>
            <param name="message">info to write</param>
        </member>
        <member name="M:Purple.Logging.Logger.Warning(System.String,System.String)">
            <summary>
            write a warning to the log file
            </summary>
            <param name="message">warning to write</param>
            <param name="category">category of this warning (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Logging.Logger.Warning(System.String)">
            <summary>
            write a warning to the log file
            </summary>
            <param name="message">warning to write</param>
        </member>
        <member name="M:Purple.Logging.Logger.Error(System.String,System.String)">
            <summary>
            write and error message to the log file
            </summary>
            <param name="message">message to write</param>
            <param name="category">category of this message (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Logging.Logger.Error(System.String)">
            <summary>
            write an error message to the log file
            </summary>
            <param name="message">message to write</param>
        </member>
        <member name="M:Purple.Logging.Logger.Log(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            writes a line to the debug output
            </summary>
            <param name="level">severity level of the message</param>
            <param name="message">message to send</param>
            <param name="category">the category (e.g: Purple.Graphics.TwoD)</param>
        </member>
        <member name="M:Purple.Logging.Logger.CreateString(Purple.Logging.LogLevel,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a string from a log message.
            </summary>
            <param name="level">log level of message</param>
            <param name="message">message to use</param>
            <param name="category">category to use</param>
            <param name="logTime">Flag that indicates if the time should be logged.</param>
            <param name="logAssembly">Flag that indicates if the assembly should be logged.</param>
            <returns>the final string</returns>
        </member>
        <member name="P:Purple.Logging.Logger.BaseCategory">
            <summary>
            the base category for this logger - 
            the category passed to write is attended to the base category
            
            </summary>
        </member>
        <member name="P:Purple.Logging.Logger.Listeners">
            <summary>
            access to listeners
            </summary>
        </member>
        <member name="P:Purple.Logging.Logger.Instance">
            <summary>
            the default logger instance
            </summary>
        </member>
        <member name="T:Purple.Logging.LogListeners">
            <summary>
            collection of ILogListener objects
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Logging.LogListeners.#ctor">
            <summary>
             create new instance of logListeners
            </summary>
        </member>
        <member name="M:Purple.Logging.LogListeners.Log(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            writes a line to the debug output
            </summary>
            <param name="level">severity level of log message</param>
            <param name="message">message to send</param>
            <param name="category">the category (e.g: Graphics.DirectX.Rendering)</param>
        </member>
        <member name="M:Purple.Logging.LogListeners.AddRange(System.Collections.ICollection)">
            <summary>
            adds a certain amount of log listeners to 
            </summary>
            <param name="col">collection with log listeners</param>
        </member>
        <member name="M:Purple.Logging.LogListeners.Add(Purple.Logging.ILogListener)">
            <summary>
            add a loglistener to the list
            </summary>
            <param name="logListener">element to add</param>
        </member>
        <member name="M:Purple.Logging.LogListeners.CopyTo(System.Array,System.Int32)">
            <summary>
            copies all LogListeners to an array starting at a certain index
            </summary>
            <param name="array">destination array</param>
            <param name="index">index to start in destination array</param>
        </member>
        <member name="M:Purple.Logging.LogListeners.GetEnumerator">
            <summary>
            returns the enumerator object to use for enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="P:Purple.Logging.LogListeners.Item(System.Int32)">
            <summary>
            get element by index
            </summary>
        </member>
        <member name="P:Purple.Logging.LogListeners.IsSynchronized">
            <summary>
            returns true if collection is synchronized
            </summary>
        </member>
        <member name="P:Purple.Logging.LogListeners.Count">
            <summary>
            returns the number of listeners
            </summary>
        </member>
        <member name="P:Purple.Logging.LogListeners.SyncRoot">
            <summary>
            the object to use for synchronization
            </summary>
        </member>
        <member name="T:Purple.Logging.TreeViewListener">
            <summary>
            a listener logging into a treeView 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Logging.TreeViewListener.#ctor(System.Windows.Forms.TreeView,System.Windows.Forms.TextBoxBase)">
            <summary>
            creates an instance of a tree view listener
            </summary>
        </member>
        <member name="M:Purple.Logging.TreeViewListener.Log(Purple.Logging.LogLevel,System.String,System.String)">
            <summary>
            write a simple message for a given category to the treeview
            </summary>
            <param name="level">log level of message</param>
            <param name="message">message to write</param>
            <param name="category">category to use</param>
        </member>
        <member name="M:Purple.Logging.TreeViewListener.Update">
            <summary>
            update treeView
            </summary>
        </member>
        <member name="M:Purple.Logging.TreeViewListener.Remove(System.String)">
            <summary>
            removes a certain category
            </summary>
            <param name="category">category to remove</param>
        </member>
        <member name="P:Purple.Logging.TreeViewListener.Level">
            <summary>
            minimum severity of the log message to get logged
            </summary>
        </member>
        <member name="P:Purple.Logging.TreeViewListener.LogTime">
            <summary>
            flag which indicates if time is added to logEntries
            </summary>
        </member>
        <member name="P:Purple.Logging.TreeViewListener.LogAssembly">
            <summary>
            flat indicating if the current assembly should be logged
            </summary>
        </member>
        <member name="P:Purple.Logging.TreeViewListener.LogLevelNode">
            <summary>
            indicates if there should be a node for Warning, Info, Errors, Spam
            </summary>
        </member>
        <member name="T:Purple.Math.AABB">
            <summary>
            Implementation of an axis aligned bounding box.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
              <para>Last Update: 0.5</para>
            </remarks>
        </member>
        <member name="F:Purple.Math.AABB.min">
            <summary>
            Lower/left/front point.
            </summary>
        </member>
        <member name="F:Purple.Math.AABB.max">
            <summary>
            Upper/right/back point.
            </summary>
        </member>
        <member name="M:Purple.Math.AABB.#ctor(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            Creates an axis aligned bound box.
            </summary>
            <param name="min">Lower, left, front point.</param>
            <param name="max">Upper, right, back point.</param>
        </member>
        <member name="M:Purple.Math.AABB.IsInside(Purple.Math.Vector3)">
            <summary>
            Tests if point is inside box.
            </summary>
            <param name="vec">Point to test if it is inside.</param>
            <returns>True if point is inside box.</returns>
        </member>
        <member name="M:Purple.Math.AABB.Grow(Purple.Math.Vector3)">
            <summary>
            Enlarge the box to make the point fit into the <see cref="T:Purple.Math.AABB"/>.
            </summary>
            <param name="vec">Point to add.</param>
        </member>
        <member name="M:Purple.Math.AABB.Grow(System.Single,System.Single,System.Single)">
            <summary>
            Enlarge the box to make the point fit into the <see cref="T:Purple.Math.AABB"/>.
            </summary>
            <param name="x">The x part of the point to add.</param>
            <param name="y">The y part of the point to add.</param>
            <param name="z">The z part of the point to add.</param>
        </member>
        <member name="M:Purple.Math.AABB.Grow(Purple.Math.AABB)">
            <summary>
            Enlarge the box to make the passed box fit into our <see cref="T:Purple.Math.AABB"/>.
            </summary>
            <param name="aabb">Box to add.</param>
        </member>
        <member name="M:Purple.Math.AABB.Intersects(Purple.Math.AABB)">
            <summary>
            Test if two <see cref="T:Purple.Math.AABB"/> intersect.
            </summary>
            <param name="b">Second <see cref="T:Purple.Math.AABB"/>.</param>
            <returns>True if they overlap.</returns>
        </member>
        <member name="P:Purple.Math.AABB.Min">
            <summary>
            Access to the lower, left, front <see cref="T:Purple.Math.Vector3"/>.
            </summary>
        </member>
        <member name="P:Purple.Math.AABB.Max">
            <summary>
            Access to the upper, right, back <see cref="T:Purple.Math.Vector3"/>.
            </summary>
        </member>
        <member name="P:Purple.Math.AABB.Size">
            <summary>
            Returns the size of the bounding box.
            </summary>
        </member>
        <member name="P:Purple.Math.AABB.Center">
            <summary>
            Center of the bounding box.
            </summary>
        </member>
        <member name="T:Purple.Math.Basic">
            <summary>
            Basic functions
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.5</para>
            </remarks>
        </member>
        <member name="F:Purple.Math.Basic.PI">
            <summary>simple PI - no discussion</summary>
        </member>
        <member name="M:Purple.Math.Basic.Sqrt(System.Single)">
            <summary>
            calculates the square root of a certain value
            </summary>
            <param name="value">to calc sqrt from</param>
            <returns>sqrt of value</returns>
        </member>
        <member name="M:Purple.Math.Basic.InvSqrt(System.Single)">
            <summary>
            Calculates the inverse square root of a certain value.
            </summary>
            <param name="x">Value to calc the inverse sqrt from.</param>
            <returns>The inverse sqrt.</returns>
        </member>
        <member name="M:Purple.Math.Basic.Abs(System.Single)">
            <summary>
            calculates the absolute value
            </summary>
            <param name="value">to calc absolute value from</param>
            <returns>absolute value</returns>
        </member>
        <member name="M:Purple.Math.Basic.Log(System.Double)">
            <summary>
            Returns the natural (base e) logarithm of a specified number.
            </summary>
            <param name="a">The number to calculate the logarithm from.</param>
            <returns>The natural (base e) logarithm of a specified number.</returns>
        </member>
        <member name="M:Purple.Math.Basic.Log(System.Double,System.Double)">
            <summary>
            Returns the logarithm of a specified number in a specified base.
            </summary>
            <param name="a">The number to calculate the logarithm from.</param>
            <param name="newBase">The base to use.</param>
            <returns>The logarithm of a specified number in a specified base.</returns>
        </member>
        <member name="M:Purple.Math.Basic.Log10(System.Double)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="a">The number to calculate the logarithm from.</param>
            <returns>The base 10 logarithm of a specified number.</returns>
        </member>
        <member name="M:Purple.Math.Basic.Exp(System.Double)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="power">The power to raise e.</param>
            <returns>E raised to the specified power.</returns>
        </member>
        <member name="M:Purple.Math.Basic.Pow(System.Double,System.Double)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="a">A number to be raised to a power.</param>
            <param name="power">A number that specifies a power.</param>
            <returns>A specified number raised to the specified power.</returns>
        </member>
        <member name="M:Purple.Math.Basic.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps the value to the given range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value!</returns>
        </member>
        <member name="M:Purple.Math.Basic.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps the value to the given range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value!</returns>
        </member>
        <member name="T:Purple.Math.Box">
            <summary>
            Class representing a simple 3d box.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.4</para>  
            The box may be used for collision boxes, bounding boxes and more...
            </remarks>
        </member>
        <member name="M:Purple.Math.Box.#ctor(Purple.Math.Vector3[])">
            <summary>
            Creates an instance of <see cref="T:Purple.Math.Box"/> with six corners.
            </summary>
            <param name="corners">The eight corners of the box.</param>
        </member>
        <member name="M:Purple.Math.Box.Transform(Purple.Math.Matrix4)">
            <summary>
            Transforms the current box with a transformation matrix.
            </summary>
            <param name="matrix">The matrix to transform box with.</param>
        </member>
        <member name="T:Purple.Math.BSpline">
            <summary>
            B-Spline
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.BSpline.Interpolate(System.Single,Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            interpolates a vector3
            </summary>
            <param name="time">current interpolation time (0.0 - 1.0f)</param>
            <param name="pre">the weight giving values before the actual interpolation interval</param>
            <param name="from">the start of the interpolation interval</param>
            <param name="to">the end of the interpolation interval</param>
            <param name="post">the weight giving values after the actual interpolation interval</param>
        </member>
        <member name="M:Purple.Math.BSpline.Interpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            interpolates a certain value
            </summary>
            <param name="time">current interpolation time (0.0 - 1.0f)</param>
            <param name="pre">the weight giving value before the actual interpolation interval</param>
            <param name="from">the start of the interpolation interval</param>
            <param name="to">the end of the interpolation interval</param>
            <param name="post">the weight giving value after the actual interpolation interval</param>
            <returns>the interpolated value</returns>
        </member>
        <member name="T:Purple.Math.CRSpline">
            <summary>
            Catmul-Rom Spline
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.CRSpline.Interpolate(System.Single,Purple.Math.Vector3[])">
            <summary>
            Gets the interpolated vector for a certain amount of vectors and a certain time.
            !! Note: There must be one additional interpolation vector at the begin and the end of the array!!
            </summary>
            <param name="time">time</param>
            <param name="vectors">array of vectors (at least 4)</param>
            <returns>the interpolated vector for a given time</returns>
        </member>
        <member name="M:Purple.Math.CRSpline.Interpolate(System.Single,Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            interpolates a vector3
            </summary>
            <param name="time">current interpolation time (0.0 - 1.0f)</param>
            <param name="pre">the weight giving values before the actual interpolation interval</param>
            <param name="from">the start of the interpolation interval</param>
            <param name="to">the end of the interpolation interval</param>
            <param name="post">the weight giving values after the actual interpolation interval</param>
        </member>
        <member name="M:Purple.Math.CRSpline.Interpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            interpolates a certain value
            </summary>
            <param name="time">current interpolation time (0.0 - 1.0f)</param>
            <param name="pre">the weight giving value before the actual interpolation interval</param>
            <param name="from">the start of the interpolation interval</param>
            <param name="to">the end of the interpolation interval</param>
            <param name="post">the weight giving value after the actual interpolation interval</param>
            <returns>the interpolated value</returns>
        </member>
        <member name="T:Purple.Math.FrustumPlanes">
            <summary>
            Planes of a Frustum.
            </summary>
        </member>
        <member name="F:Purple.Math.FrustumPlanes.Left">
            <summary></summary>
        </member>
        <member name="F:Purple.Math.FrustumPlanes.Right">
            <summary></summary>
        </member>
        <member name="F:Purple.Math.FrustumPlanes.Top">
            <summary></summary>
        </member>
        <member name="F:Purple.Math.FrustumPlanes.Bottom">
            <summary></summary>
        </member>
        <member name="F:Purple.Math.FrustumPlanes.Near">
            <summary></summary>
        </member>
        <member name="F:Purple.Math.FrustumPlanes.Far">
            <summary></summary>
        </member>
        <member name="T:Purple.Math.Frustum">
            <summary>
            A class that represents the viewing frustum.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Frustum.#ctor(Purple.Math.Matrix4)">
            <summary>
            Creates a new frustum from a projection matrix.
            </summary>
        </member>
        <member name="M:Purple.Math.Frustum.Contains(Purple.Math.Vector3)">
            <summary>
            Tests if a certain point is within the frustum.
            </summary>
            <param name="vec">Vector to test.</param>
            <returns>True if the point is within the frustum.</returns>
        </member>
        <member name="M:Purple.Math.Frustum.Contains(Purple.Math.Sphere)">
            <summary>
            Tests if a sphere is at least partly contained by the Frustum.
            </summary>
            <param name="sphere">The sphere to test for.</param>
            <returns>True if the sphere is at least partly contained by the Frustum.</returns>
        </member>
        <member name="P:Purple.Math.Frustum.Planes">
            <summary>
            The planes of the Frustum.
            </summary>
        </member>
        <member name="T:Purple.Math.Line">
            <summary>
            Class representing a simple 3d line.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Line.#ctor(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            Creates a new line object.
            </summary>
            <param name="from">The from point.</param>
            <param name="to">The to point.</param>
        </member>
        <member name="P:Purple.Math.Line.A">
            <summary>
            The point where the line starts.
            </summary>
        </member>
        <member name="P:Purple.Math.Line.B">
            <summary>
            The destination point of the line.
            </summary>
        </member>
        <member name="P:Purple.Math.Line.AB">
            <summary>
            The direction vector.
            </summary>
        </member>
        <member name="P:Purple.Math.Line.Length">
            <summary>
            The length of the line.
            </summary>
        </member>
        <member name="T:Purple.Math.Matrix4">
            <summary>
            Matrix structure 4*4	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.3</para>
            </remarks>
        </member>
        <member name="F:Purple.Math.Matrix4.A1">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.A2">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.A3">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.A4">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.B1">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.B2">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.B3">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.B4">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.C1">
            <summary>third row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.C2">
            <summary>third row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.C3">
            <summary>third row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.C4">
            <summary>third row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.D1">
            <summary>forth row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.D2">
            <summary>forth row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.D3">
            <summary>forth row</summary>
        </member>
        <member name="F:Purple.Math.Matrix4.D4">
            <summary>forth row</summary>
        </member>
        <member name="M:Purple.Math.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor for fillin all elements
            </summary>
            <param name="a1"></param>
            <param name="b1"></param>
            <param name="c1"></param>
            <param name="d1"></param>
            <param name="a2"></param>
            <param name="b2"></param>
            <param name="c2"></param>
            <param name="d2"></param>
            <param name="a3"></param>
            <param name="b3"></param>
            <param name="c3"></param>
            <param name="d3"></param>
            <param name="a4"></param>
            <param name="b4"></param>
            <param name="c4"></param>
            <param name="d4"></param>
        </member>
        <member name="M:Purple.Math.Matrix4.#ctor(Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            build matrix from vectors
            </summary>
            <param name="A">first row</param>
            <param name="B">second row</param>
            <param name="C">third row</param>
            <param name="D">fourth row</param>
        </member>
        <member name="M:Purple.Math.Matrix4.#ctor(Purple.Math.Matrix3,Purple.Math.Vector3)">
            <summary>
            creates a new matrix from a rotation matrix and a translation vector
            </summary>
            <param name="rot"></param>
            <param name="trans"></param>
        </member>
        <member name="M:Purple.Math.Matrix4.RotationX(System.Single)">
            <summary>
            retuns the rotation matrix around the x-axis
            </summary>
            <param name="alpha">angle in rad</param>
            <returns>rotation matrix around x-axis</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.RotationY(System.Single)">
            <summary>
            retuns the rotation matrix around the y-axis
            </summary>
            <param name="alpha">angle in rad</param>
            <returns>rotation matrix around y-axis</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.RotationZ(System.Single)">
            <summary>
            retuns the rotation matrix around the z-axis
            </summary>
            <param name="alpha">angle in rad</param>
            <returns>rotation matrix around z-axis</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Rotation(System.Single,System.Single,System.Single)">
            <summary>
            returns the rotation matrix for alpha, beta and gamma
            </summary>
            <param name="alpha">around x-Axis: yaw</param>
            <param name="beta">around y-Axis: pitch</param>
            <param name="gamma">around z-Axis: role</param>
        </member>
        <member name="M:Purple.Math.Matrix4.Translation(Purple.Math.Vector3)">
            <summary>
            build translation matrix
            </summary>
            <param name="vec">translation vector to use</param>
            <returns>translation matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="x">The x component of the translation.</param>
            <param name="y">The y component of the translation.</param>
            <param name="z">The z component of the translation.</param>
            <returns>A translation matrix.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Scaling(System.Single)">
            <summary>
            builds scale matrix
            </summary>
            <param name="value">value to scale</param>
            <returns>scale matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Scaling(Purple.Math.Vector3)">
            <summary>
            builds scale matrix
            </summary>
            <param name="vec">value to scale</param>
            <returns>scale matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Translate(Purple.Math.Vector3)">
            <summary>
            translates the matrix 
            </summary>
            <param name="vec">translation vector</param>
        </member>
        <member name="M:Purple.Math.Matrix4.Translate(System.Single,System.Single,System.Single)">
            <summary>
            Translates the current matrix.
            </summary>
            <param name="x">The x component of the translation.</param>
            <param name="y">The y component of the translation.</param>
            <param name="z">The z component of the translation.</param>
        </member>
        <member name="M:Purple.Math.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a left-handed perspective projection matrix
            </summary>
            <param name="width">Width of the view-volume at the near view-plane</param>
            <param name="height">Height of the view-volume at the near view-plane.</param>
            <param name="near"> Z-value of the near view-plane</param>
            <param name="far">Z-value of the far view-plane</param>
            <returns>left-handed perspective projection matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.PerspectiveInfinity(System.Single,System.Single,System.Single)">
            <summary>
            Builds a left-handed perspective projection matrix where the far plane is set to infinity.
            </summary>
            <param name="width">Width of the view-volume at the near view-plane</param>
            <param name="height">Height of the view-volume at the near view-plane.</param>
            <param name="near"> Z-value of the near view-plane</param>
            <returns>left-handed perspective projection matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.PerspectiveFOV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Builds a left-handed perspective projection matrix based on a field of view (FOV).
            </summary>
            <param name="fovY">Field of view, in the y direction, in radians</param>
            <param name="ratio">Aspect ratio, defined as view space height divided by width</param>
            <param name="near">Z-value of the near view-plane</param>
            <param name="far">Z-value of the far view-plane</param>
            <returns>left-handed perspective projection matrix based on a field of view (FOV)</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Orthogonal(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a left-handed orthogonal matrix.
            </summary>
            <param name="w">The width of the view volume.</param>
            <param name="h">The height of the view volume.</param>
            <param name="near">The near clipping plane.</param>
            <param name="far">The far clipping plane.</param>
            <returns>Orthogonal matrix.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.PerspectiveFOVInfinity(System.Single,System.Single,System.Single)">
            <summary>
            Builds a left-handed perspective projection matrix based on a field of view (FOV) where the 
            far plane is set to infinity.
            </summary>
            <param name="fovY">Field of view, in the y direction, in radians</param>
            <param name="ratio">Aspect ratio, defined as view space height divided by width</param>
            <param name="near">Z-value of the near view-plane</param>
            <returns>left-handed perspective projection matrix based on a field of view (FOV)</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.LookAt(Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            Builds a left-handed, look-at matrix.
            </summary>
            <param name="eye">vector that defines the eye point. This value is used in translation.</param>
            <param name="at">vector that defines the camera look-at target</param>
            <param name="up">vector that defines the current world's up, usually [0, 1, 0]. </param>
            <returns>left-handed, look-at matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Rotation(Purple.Math.Vector3,System.Single)">
            <summary>
            builds a rotation matrix for a given vector and an angle
            </summary>
            <param name="vec">to rotate around</param>
            <param name="angle">rotation angle</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Slerp(Purple.Math.Matrix4,Purple.Math.Matrix4,System.Single)">
            <summary>
            Spherical linear interpolation between to matrices.
            </summary>
            <param name="a">First matrix.</param>
            <param name="b">Second matrix.</param>
            <param name="time">Interpolation time [0..1].</param>
            <returns>Interpolated matrix.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Squad(Purple.Math.Matrix4,Purple.Math.Matrix4,Purple.Math.Matrix4,Purple.Math.Matrix4,System.Single)">
            <summary>
            Spherical quadratic interpolation between matrices.
            </summary>
            <remarks>The matrices are converted to quaternion for every invocation => it is recommended to use the Quaternion.Squad 
            method instead.</remarks>
            <param name="pre">One matrix before the actual interpolation matrices.</param>
            <param name="a">First matrix.</param>
            <param name="b">Second matrix.</param>
            <param name="post">One matrix after the actual interpolation matrices.</param>
            <param name="time">The interpolation time.</param>
            <returns>The interpolated matrix.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Transpose(Purple.Math.Matrix4)">
            <summary>
            returns the transposed matrix
            </summary>
            <param name="matrix">matrix to transpose</param>
            <returns>the transposed matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Minor(Purple.Math.Matrix4,System.Int32,System.Int32)">
            <summary>
            get 3x3 matrix from 4x4 matrix without specified column and row
            </summary>
            <param name="source">source matrix (4x4)</param>
            <param name="column">column to remove</param>
            <param name="row">row to remove</param>
            <returns>3x3 matrix from 4x4 matrix without specified column and row</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Adjoint(Purple.Math.Matrix4)">
            <summary>
            returns the adjoint matrix
            </summary>
            <param name="source">matrix to calculate adjoint matrix from</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Det">
            <summary>
            calcluates the deterimant of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Matrix4.Invert(Purple.Math.Matrix4)">
            <summary>
            calculates the inverse matrix of a source matrix
            </summary>
            <param name="m">to calculate inverse matrix from</param>
            <returns>inverse matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.op_Addition(Purple.Math.Matrix4,Purple.Math.Matrix4)">
            <summary>
            add two matrices
            </summary>
            <param name="a">matrix a</param>
            <param name="b">matrix b</param>
            <returns>sum of the two matrices</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.op_Multiply(Purple.Math.Matrix4,Purple.Math.Matrix4)">
            <summary>
            multiplies two matrices
            </summary>
            <param name="a">first matrix</param>
            <param name="b">second matrix</param>
            <returns>result matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.op_Multiply(Purple.Math.Matrix4,System.Single)">
            <summary>
            multiplies a given matrix with a scalar
            </summary>
            <param name="source">matrix to multiply with scalar</param>
            <param name="scalar">to multiply matrix with</param>
            <returns>source*scalar</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.op_Division(Purple.Math.Matrix4,System.Single)">
            <summary>
            divides a given matrix with a scalar
            </summary>
            <param name="source">matrix to divide with scalar</param>
            <param name="scalar">to divide matrix with</param>
            <returns>source/scalar</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.From(System.Single[])">
            <summary>
            creates a matrix from an array
            </summary>
            <param name="values">array of 16 float elements</param>
            <returns>created matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.From(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns an array of matrices.
            </summary>
            <param name="data">The data stream containing the matrices.</param>
            <param name="offset">The offset in the stream to start with.</param>
            <param name="count">The number of matrices to load.</param>
            <returns>The array of matrices.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.From(System.Byte[])">
            <summary>
            Creates a matrix from a byte array.
            </summary>
            <param name="bytes">Array of at least 64 byte elements.</param>
            <returns>Created matrix.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.From(System.Byte[],System.Int32)">
            <summary>
            Creates a matrix from a byte array.
            </summary>
            <param name="bytes">Array of at least 64 byte elements.</param>
            <param name="offset">The start offset in the buffer.</param>
            <returns>Created matrix.</returns>
        </member>
        <member name="M:Purple.Math.Matrix4.From(Purple.Math.Matrix3)">
            <summary>
            creates a matrix from a Matrix3 object
            </summary>
            <param name="m">3x3 matrix</param>
            <returns>4x4 matrix</returns>
        </member>
        <member name="P:Purple.Math.Matrix4.Identity">
            <summary>
            returns the identity matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Zero">
            <summary>
            returns a matrix filled with 0.0f
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Column1">
            <summary>
            returns/sets the first column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Column2">
            <summary>
            returns/sets the second column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Column3">
            <summary>
            returns/sets the third column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Column4">
            <summary>
            returns/sets the fourth column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.LookAtVector">
            <summary>
            returns the lookAt vector of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.UpVector">
            <summary>
            returns the up vector of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.RightVector">
            <summary>
            returns the orthogonal-vector of up and look
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.TranslationVector">
            <summary>
            returns the translation vector of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.RotationMatrix">
            <summary>
            converts current matrix to a matrix3 object
            </summary>
            <returns>converted matrix3 object</returns>
        </member>
        <member name="P:Purple.Math.Matrix4.Quaternion">
            <summary>
            converts matrix to quaternion
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix4.Item(System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="T:Purple.Math.Matrix3">
            <summary>
            Matrix structure 3*3	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Math.Matrix3.A1">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.A2">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.A3">
            <summary>first row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.B1">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.B2">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.B3">
            <summary>second row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.C1">
            <summary>third row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.C2">
            <summary>third row</summary>
        </member>
        <member name="F:Purple.Math.Matrix3.C3">
            <summary>third row</summary>
        </member>
        <member name="M:Purple.Math.Matrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor for fillin all elements
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="a3"></param>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="b3"></param>
            <param name="c1"></param>
            <param name="c2"></param>
            <param name="c3"></param>
        </member>
        <member name="M:Purple.Math.Matrix3.#ctor(Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            build matrix from vectors
            </summary>
            <param name="A">first row</param>
            <param name="B">second row</param>
            <param name="C">third row</param>
        </member>
        <member name="M:Purple.Math.Matrix3.RotationX(System.Single)">
            <summary>
            retuns the rotation matrix around the x-axis
            </summary>
            <param name="alpha">angle in rad</param>
            <returns>rotation matrix around x-axis</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.RotationY(System.Single)">
            <summary>
            retuns the rotation matrix around the y-axis
            </summary>
            <param name="alpha">angle in rad</param>
            <returns>rotation matrix around y-axis</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.RotationZ(System.Single)">
            <summary>
            retuns the rotation matrix around the z-axis
            </summary>
            <param name="alpha">angle in rad</param>
            <returns>rotation matrix around z-axis</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.Rotation(System.Single,System.Single,System.Single)">
            <summary>
            returns the rotation matrix for alpha, beta and gamma
            </summary>
            <param name="alpha">around x-Axis: yaw</param>
            <param name="beta">around y-Axis: pitch</param>
            <param name="gamma">around z-Axis: role</param>
        </member>
        <member name="M:Purple.Math.Matrix3.Scaling(System.Single)">
            <summary>
            builds scale matrix
            </summary>
            <param name="value">value to scale</param>
            <returns>scale matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.Scaling(Purple.Math.Vector3)">
            <summary>
            builds scale matrix
            </summary>
            <param name="vec">value to scale</param>
            <returns>scale matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.LookAt(Purple.Math.Vector3,Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            Builds a left-handed, look-at matrix.
            </summary>
            <param name="eye">vector that defines the eye point. This value is used in translation.</param>
            <param name="at">vector that defines the camera look-at target</param>
            <param name="up">vector that defines the current world's up, usually [0, 1, 0]. </param>
            <returns>left-handed, look-at matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.Rotation(Purple.Math.Vector3,System.Single)">
            <summary>
            builds a rotation matrix for a given vector and an angle
            </summary>
            <param name="vec">to rotate around</param>
            <param name="angle">rotation angle</param>
            <returns>rotation matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.Transpose(Purple.Math.Matrix3)">
            <summary>
            returns the transposed matrix
            </summary>
            <param name="matrix">matrix to transpose</param>
            <returns>the transposed matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.Det">
            <summary>
            calcluates the deterimant of the matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Matrix3.Slerp(Purple.Math.Matrix3,Purple.Math.Matrix3,System.Single)">
            <summary>
            spherical interpolation between to matrices
            </summary>
            <param name="a">first matrix</param>
            <param name="b">second matrix</param>
            <param name="time">interpolation time [0..1]</param>
            <returns>interpolated matrix</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.op_Addition(Purple.Math.Matrix3,Purple.Math.Matrix3)">
            <summary>
            add two matrices
            </summary>
            <param name="a">matrix a</param>
            <param name="b">matrix b</param>
            <returns>sum of the two matrices</returns>
        </member>
        <member name="M:Purple.Math.Matrix3.op_Multiply(Purple.Math.Matrix3,Purple.Math.Matrix3)">
            <summary>
            multiplies two matrices
            </summary>
            <param name="a">first matrix</param>
            <param name="b">second matrix</param>
            <returns>result matrix</returns>
        </member>
        <member name="P:Purple.Math.Matrix3.Identity">
            <summary>
            returns the identity matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Zero">
            <summary>
            returns a matrix filled with 0.0f
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Column1">
            <summary>
            returns/sets the first column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Column2">
            <summary>
            returns/sets the second column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Column3">
            <summary>
            returns/sets the third column of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.LookAtVector">
            <summary>
            returns the lookAt vector of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.UpVector">
            <summary>
            returns the up vector of the matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.RightVector">
            <summary>
            returns the orthogonal-vector of up and look
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Quaternion">
            <summary>
            converts matrix to quaternion
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Item(System.Int32,System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Matrix3.Item(System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="T:Purple.Math.Plane">
            <summary>
            A simple plane in 3d space.	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Plane.SignedDistance(Purple.Math.Vector3)">
            <summary>
            Calculates the signed distance between a point and the plane.
            </summary>
            <remarks>The sign indicates if the point is on the front or back side of the plane.
            The front side is the side, the normal vector points to.</remarks>
            <param name="p">The point to calculate the width for.</param>
            <returns>The signed distance between a point and the plane.</returns>
        </member>
        <member name="M:Purple.Math.Plane.Distance(Purple.Math.Vector3)">
            <summary>
            Calculates the distance between a point and the plane.
            </summary>
            <param name="p">The point to calculate distance for.</param>
            <returns>The distance between a point and the plane.</returns>
        </member>
        <member name="M:Purple.Math.Plane.IsInFront(Purple.Math.Vector3)">
            <summary>
            Method to test if a certain point is in front of the plane.
            </summary>
            <param name="p">Point to test.</param>
            <returns>True if the point is in front of the plane.</returns>
        </member>
        <member name="M:Purple.Math.Plane.ContainsPoint(Purple.Math.Vector3)">
            <summary>
            Method to test if a point lies on the plane.
            </summary>
            <param name="p">The point to test.</param>
            <returns>True if the point lies on the plane.</returns>
        </member>
        <member name="P:Purple.Math.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="P:Purple.Math.Plane.D">
            <summary>
            The d constant of the plane where Normal*X = d
            </summary>
        </member>
        <member name="T:Purple.Math.Quaternion">
            <summary>
            Matrix structure 4*4	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.Math.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            standard constructor
            </summary>
            <param name="x">x-value</param>
            <param name="y">y-value</param>
            <param name="z">z-value</param>
            <param name="w">w-value</param>
        </member>
        <member name="M:Purple.Math.Quaternion.Dot(Purple.Math.Quaternion)">
            <summary>
            Calculates the dot product of two quaternions.
            </summary>
            <param name="b">The second quaternion to use for calcualting the dot product.</param>
            <returns>The dot product of two quaternions.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Length(Purple.Math.Quaternion)">
            <summary>
            Calculates the magnitude of a quaternion.
            </summary>
            <param name="q">The quaternion to calculate magnitude for.</param>
            <returns>The magnitude of a quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Multiply(Purple.Math.Quaternion,System.Single)">
            <summary>
            Multiplies a quaternion with a scalar.
            </summary>
            <param name="s">The scalar.</param>
            <param name="q">The quaternion to multiply.</param>
            <returns>The result of multiplying a quaternion with a scalar.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Multiply(System.Single,Purple.Math.Quaternion)">
            <summary>
            Multiplies a quaternion with a scalar.
            </summary>
            <param name="s">The scalar.</param>
            <param name="q">The quaternion to multiply.</param>
            <returns>The result of multiplying a quaternion with a scalar.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Addition(Purple.Math.Quaternion,Purple.Math.Quaternion)">
            <summary>
            Calculates the sum of two quaternions.
            </summary>
            <param name="a">The first quaternion.</param>
            <param name="b">The second quaternion.</param>
            <returns>The sum of both quaternions.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Subtraction(Purple.Math.Quaternion,Purple.Math.Quaternion)">
            <summary>
            Subtracts two quaternions.
            </summary>
            <param name="a">The quaternion to subtract from.</param>
            <param name="b">The quaternion to subtract.</param>
            <returns>Quaternion b subtracted from a.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_UnaryNegation(Purple.Math.Quaternion)">
            <summary>
            Returns the negative quaternion.
            </summary>
            <param name="a">The quaternion to calculate the negative quaternion from.</param>
            <returns>The negative quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Conjugate(Purple.Math.Quaternion)">
            <summary>
            Calculates the conjugate of a quaternion.
            </summary>
            <param name="q">The quaternion to calculate the inverse from.</param>
            <returns>The conjugate of the current quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Norm(Purple.Math.Quaternion)">
            <summary>
            Calculates the norm of a quaternion.
            </summary>
            <param name="q">The quaternion to calculate norm for.</param>
            <returns>The norm of the quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Division(Purple.Math.Quaternion,System.Single)">
            <summary>
            Divides a quaternion by a scalar.
            </summary>
            <param name="a">Quaternion to divide.</param>
            <param name="scalar">The scalar to divide the quaternion with.</param>
            <returns>The quaternion divided by the scalar.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Inverse(Purple.Math.Quaternion)">
            <summary>
            Caluclates the inverse of a certain quaternion.
            </summary>
            <param name="q">The quaternion to calculate the inverse from.</param>
            <returns>The inverse of the quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Division(Purple.Math.Quaternion,Purple.Math.Quaternion)">
            <summary>
            Divide the first quaternion by the second one.
            </summary>
            <param name="a">The quaternion to divide.</param>
            <param name="b">The quaternion to divide a with.</param>
            <returns>A divided by b.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.op_Multiply(Purple.Math.Quaternion,Purple.Math.Quaternion)">
            <summary>
            Multiplies two quaternions.
            </summary>
            <param name="a">The quaternion that is multiplied by b.</param>
            <param name="b">The quaternion to multiply a with.</param>
            <returns>A multiplied with B.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Normalize(Purple.Math.Quaternion)">
            <summary>
            Normalizes the current quaternion.
            </summary>
        </member>
        <member name="M:Purple.Math.Quaternion.Log(Purple.Math.Quaternion)">
            <summary>
            Calculates the logarithm of a quaternion.
            </summary>
            <param name="q">The quaternion to calculate logarithm for.</param>
            <returns>The logarithm of a quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Exp(Purple.Math.Quaternion)">
            <summary>
            Calculates e raised by a quaternion.
            </summary>
            <param name="q">The quaternion to use.</param>
            <returns>E raised by a quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Lerp(Purple.Math.Quaternion,Purple.Math.Quaternion,System.Single)">
            <summary>
            Linear interpolation between two quaternions.
            </summary>
            <param name="a">First quaternion.</param>
            <param name="b">Second quaternion.</param>
            <param name="t">Time [0..1].</param>
            <returns>Interpolated quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Slerp(Purple.Math.Quaternion,Purple.Math.Quaternion,System.Single)">
            <summary>
            Spherical interpolation between two quaternions.
            </summary>
            <param name="a">First quaternion.</param>
            <param name="b">Second quaternion.</param>
            <param name="t">Time [0..1].</param>
            <returns>Interpolated quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Squad(Purple.Math.Quaternion,Purple.Math.Quaternion,Purple.Math.Quaternion,Purple.Math.Quaternion,System.Single)">
            <summary>
            Spherical cubic interpolation between a and b.
            </summary>
            <param name="a">The start quaternion.</param>
            <param name="b">The end quaternion.</param>
            <param name="ta">The tangent for point a. Can be calculated by Spline.</param>
            <param name="tb">The tangent for point b. Can be calculated by Spline.</param>
            <param name="t">The interpolation time [0..1].</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.SimpleSquad(Purple.Math.Quaternion,Purple.Math.Quaternion,Purple.Math.Quaternion,Purple.Math.Quaternion,System.Single)">
            <summary>
            Spherical cubic interpolation between a and b.
            </summary>
            <remarks>Simple usage but slow. It is recommended to  </remarks>
            <param name="prev">The quaternion before a.</param>
            <param name="a">The start quaternion.</param>
            <param name="b">The end quaternion.</param>
            <param name="post">The quaternion after b.</param>
            <param name="t">The time [0..1].</param>
            <returns>The interpolated quaternion.</returns>
        </member>
        <member name="M:Purple.Math.Quaternion.Spline(Purple.Math.Quaternion,Purple.Math.Quaternion,Purple.Math.Quaternion)">
            <summary>
            Caclulates a control point to be used in spline interpolation.
            </summary>
            <param name="pre">The quaternion before the current quaternion.</param>
            <param name="q">The quaternion to calculate control point for.</param>
            <param name="post">The quaternion after the current quaternion.</param>
            <returns>The control point calculated by the three quaternions.</returns>
        </member>
        <member name="P:Purple.Math.Quaternion.X">
            <summary>
            x - value
            </summary>
        </member>
        <member name="P:Purple.Math.Quaternion.Y">
            <summary>
            y - value
            </summary>
        </member>
        <member name="P:Purple.Math.Quaternion.Z">
            <summary>
            z - value
            </summary>
        </member>
        <member name="P:Purple.Math.Quaternion.W">
            <summary>
            w - value
            </summary>
        </member>
        <member name="P:Purple.Math.Quaternion.Zero">
            <summary>
            Returns a quaternion where all elements are zero.
            </summary>
        </member>
        <member name="P:Purple.Math.Quaternion.Matrix4">
            <summary>
            converts quaternion to matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Quaternion.Matrix">
            <summary>
            converts quaternion to matrix
            </summary>
        </member>
        <member name="T:Purple.Math.Sphere">
            <summary>
            Class representing a simple 3d sphere.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            The sphere may be used for collision spheres, bounding spheres and more...
            </remarks>
        </member>
        <member name="M:Purple.Math.Sphere.#ctor(Purple.Math.Vector3,System.Single)">
            <summary>
            Creates a new instance of a sphere.
            </summary>
            <param name="center">Origin of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="M:Purple.Math.Sphere.Transform(Purple.Math.Matrix4)">
            <summary>
            Transforms the current sphere with a transformation matrix.
            </summary>
            <param name="matrix">The matrix to transform sphere with.</param>
        </member>
        <member name="M:Purple.Math.Sphere.IsInside(Purple.Math.Vector3)">
            <summary>
            Returns true if the given vector is inside the sphere.
            </summary>
            <param name="vec">Vector to test if inside.</param>
            <returns>True if the vector is inside the sphere.</returns>
        </member>
        <member name="M:Purple.Math.Sphere.Grow(Purple.Math.Vector3)">
            <summary>
            Enlarges the sphere to make the point fit into the <see cref="T:Purple.Math.Sphere"/>.
            </summary>
            <param name="vec"></param>
        </member>
        <member name="M:Purple.Math.Sphere.Intersects(Purple.Math.Sphere)">
            <summary>
            Tests if the current sphere intersects with another sphere.
            </summary>
            <param name="sphere">Sphere to test with.</param>
            <returns>True if the current sphere intersects with another sphere.</returns>
        </member>
        <member name="M:Purple.Math.Sphere.Distance(Purple.Math.Sphere)">
            <summary>
            Calculates the distance between the current and another sphere.
            </summary>
            <param name="sphere">The sphere to use for calculation.</param>
            <returns>The distance between the current and another sphere.</returns>
        </member>
        <member name="M:Purple.Math.Sphere.DistanceSquared(Purple.Math.Sphere)">
            <summary>
            Calculates the squared distance between the current and another sphere.
            </summary>
            <param name="sphere">The sphere to use for calculation.</param>
            <returns>The squared distance between the current and another sphere.</returns>
        </member>
        <member name="M:Purple.Math.Sphere.CollisionTime(Purple.Math.Vector3,Purple.Math.Sphere)">
            <summary>
            Calculates the CollisionTime between the current moving sphere and a static sphere.
            </summary>
            <param name="sphere">The static sphere to use.</param>
            <param name="moveVector">The move vector of the current sphere.</param>
            <returns>The time of the collision relative to the length of the move Vector or float.MaxValue if there was no collision.</returns>
        </member>
        <member name="M:Purple.Math.Sphere.CollisionTime(Purple.Math.Vector3,Purple.Math.Sphere,Purple.Math.Vector3)">
            <summary>
            Returns the collision time of the current moving sphere with another sphere.
            </summary>
            <param name="moveVector">The move vector of the current sphere.</param>
            <param name="sphere">The other moving sphere.</param>
            <param name="otherMoveVector">The move vector of the other sphere.</param>
            <returns>The collision time of the current moving sphere with a another sphere.</returns>
        </member>
        <member name="P:Purple.Math.Sphere.Center">
            <summary>
            The center of the sphere.
            </summary>
        </member>
        <member name="P:Purple.Math.Sphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="T:Purple.Math.TestCases.MatrixTestCase">
            <summary>
            PerformanceTest example
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Testing.TestCase">
            <summary>
            abstract class for a TestCase
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Testing.TestCaseBase">
            <summary>
            abstract class for abstract TestCases or PerformanceTestCases;)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Testing.TestCaseBase.methodsToTest">
            <summary>
            list of methods which have to be tested
            precalculated in constructor and returned in GetMethodsToTest
            </summary>
        </member>
        <member name="M:Purple.Testing.TestCaseBase.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Testing.TestCaseBase.GetMethodsToTest">
            <summary>
            retrieves alls methods of this testCase to test
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Testing.TestCaseBase.CalcMethodsToTest">
            <summary>
            calcs all methods of this testCase to test
            </summary>    
        </member>
        <member name="M:Purple.Testing.TestCaseBase.CalcMethodsToTest(System.Type)">
            <summary>
            calcs all methods of this testCase to test
            </summary>
            <returns>list of MethodInfo objects</returns>
        </member>
        <member name="M:Purple.Testing.TestCase.Fail">
            <summary>
            makes test fail without any comment
            </summary>
        </member>
        <member name="M:Purple.Testing.TestCase.Fail(System.String)">
            <summary>
            makes test fail
            </summary>
            <param name="message">comment why test failed</param>
        </member>
        <member name="M:Purple.Testing.TestCase.Assert(System.Boolean)">
            <summary>
            tests a certain condition
            if condition failed => test fails
            </summary>
            <param name="condition">to test for</param>
        </member>
        <member name="M:Purple.Testing.TestCase.Assert(System.Boolean,System.String)">
            <summary>
            tests a certain condition
            </summary>
            <param name="condition">to test for</param>
            <param name="message">comment what was tested</param>
        </member>
        <member name="T:Purple.Math.Trigonometry">
            <summary>
            Trigonmetry functions
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Trigonometry.Cos(System.Single)">
            <summary>
            cosinus function
            </summary>
            <param name="angle">angle in radians</param>
            <returns>the cos of the specified angle</returns>
        </member>
        <member name="M:Purple.Math.Trigonometry.Acos(System.Single)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="number">The number.</param>
            <returns>The angle whose cosine is the specified number.</returns>
        </member>
        <member name="M:Purple.Math.Trigonometry.Sin(System.Single)">
            <summary>
            sinus function
            </summary>
            <param name="angle">angle in radians</param>
            <returns>the sin of the specified angle</returns>
        </member>
        <member name="M:Purple.Math.Trigonometry.Cot(System.Single)">
            <summary>
            co-tangens function (cos/sin)
            </summary>
            <param name="angle">angle in radians</param>
            <returns>co-tangens of specified angle</returns>
        </member>
        <member name="T:Purple.Math.Vector4">
            <summary>
            Vector structure (4 elements)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            constructor for filling all elements
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Purple.Math.Vector4.#ctor(Purple.Math.Vector3)">
            <summary>
            creates a new vector4 from a vector3
            </summary>
            <param name="vec">object to create vector4 from</param>
        </member>
        <member name="M:Purple.Math.Vector4.#ctor(Purple.Math.Vector3,System.Single)">
            <summary>
            creates a new vector4 from a vector3
            </summary>
            <param name="vec"></param>
            <param name="w"></param>
        </member>
        <member name="M:Purple.Math.Vector4.GetHashCode">
            <summary>
            new hashcode function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector4.Equals(System.Object)">
            <summary>
            new equals function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector4.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Purple.Math.Vector4.Unit(Purple.Math.Vector4)">
            <summary>
            calc unit vector from a certain Vector
            </summary>
            <param name="a">vector to calc unit vector from</param>
            <returns>normalized vector</returns>
        </member>
        <member name="M:Purple.Math.Vector4.Normalize">
            <summary>
            normalizes the current instance
            </summary>
        </member>
        <member name="M:Purple.Math.Vector4.Length">
            <summary>
            Calculates the length of the current vector.
            </summary>
            <returns>Length of the current vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the current vector.
            </summary>
            <returns>The squared length of the current vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector4.Lerp(Purple.Math.Vector4,Purple.Math.Vector4,System.Single)">
            <summary>
            linear interpolation between to vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <param name="time">interpolation time [0..1]</param>
            <returns>interpolated vector</returns>
        </member>
        <member name="M:Purple.Math.Vector4.op_Addition(Purple.Math.Vector4,Purple.Math.Vector4)">
            <summary>
            add two vectors
            </summary>
            <param name="a">vector a</param>
            <param name="b">vector b</param>
            <returns>sum of the two vedctors</returns>
        </member>
        <member name="M:Purple.Math.Vector4.op_Multiply(Purple.Math.Vector4,Purple.Math.Vector4)">
            <summary>
            dot product of two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>dot product</returns>
        </member>
        <member name="M:Purple.Math.Vector4.op_Multiply(Purple.Math.Vector4,System.Single)">
            <summary>
            multiply a vector with a scalar
            </summary>
            <param name="vec">vector to multiply with scalar</param>
            <param name="scalar">to multiply vector with</param>
            <returns>result of vec*scalar</returns>
        </member>
        <member name="M:Purple.Math.Vector4.Dot(Purple.Math.Vector4,Purple.Math.Vector4)">
            <summary>
            dot product of two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>dot product</returns>
        </member>
        <member name="M:Purple.Math.Vector4.op_Multiply(Purple.Math.Vector4,Purple.Math.Matrix4)">
            <summary>
            transform a vector by a given Matrix
            </summary>
            <param name="v">vector to transform</param>
            <param name="m">matrix to use for Transformation</param>
            <returns>transformed vector</returns>
        </member>
        <member name="M:Purple.Math.Vector4.op_Division(Purple.Math.Vector4,System.Single)">
            <summary>
            divide vector
            </summary>
            <param name="vec">vector to divide</param>
            <param name="divisor">divisor to divide vector with</param>
            <returns>vector/divisor</returns>
        </member>
        <member name="P:Purple.Math.Vector4.X">
            <summary>X element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector4.Y">
            <summary>Y element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector4.Z">
            <summary>Z element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector4.W">
            <summary>W element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector4.Zero">
            <summary>
            returns the identity matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Vector4.Vector3">
            <summary>
            Returns a vector containing the first three components.
            </summary>
        </member>
        <member name="P:Purple.Math.Vector4.Item(System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="T:Purple.Math.Vector3">
            <summary>
            Vector structure (3 elements)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            constructor for filling all elements
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>		
        </member>
        <member name="M:Purple.Math.Vector3.#ctor(Purple.Math.Vector2)">
            <summary>
            construct vector3 from vector2
            z component is filled with 0
            </summary>
            <param name="vec2"></param>
        </member>
        <member name="M:Purple.Math.Vector3.#ctor(Purple.Math.Vector2,System.Single)">
            <summary>
            construct vector3 from vector2
            z component is filled with 0
            </summary>
            <param name="vec2"></param>
            <param name="z"></param>
        </member>
        <member name="M:Purple.Math.Vector3.From(System.Byte[])">
            <summary>
            Creates a vector from a byte array.
            </summary>
            <param name="bytes">Array of at least 12 byte elements.</param>
            <returns>Created vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector3.From(System.Byte[],System.Int32)">
            <summary>
            Creates a vector from a byte array.
            </summary>
            <param name="bytes">Array of at least 12 byte elements.</param>
            <param name="offset">Start offset in buffer.</param>
            <returns>Created vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector3.AddSkinned(Purple.Math.Vector3,Purple.Math.Matrix4@,System.Single)">
            <summary>
            Adds the weighted skinned source vector.
            </summary>
        </member>
        <member name="M:Purple.Math.Vector3.GetHashCode">
            <summary>
            new hashcode function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.Equals(System.Object)">
            <summary>
            new equals function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Unit(Purple.Math.Vector3)">
            <summary>
            calc unit vector from a certain Vector
            </summary>
            <param name="a">vector to calc unit vector from</param>
            <returns>unit vector</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Normalize">
            <summary>
            normalizes the current instance
            </summary>
        </member>
        <member name="M:Purple.Math.Vector3.Length">
            <summary>
            Returns the length of the vector.
            </summary>
            <returns>Length of the vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector3.LengthSquared">
            <summary>
            Returns the squared length of the vector.
            </summary>
            <returns>Squared length of the vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Cross(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            calcs the cross product of two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>normal vector of a and b</returns>
        </member>
        <member name="M:Purple.Math.Vector3.CrossUnit(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            calcs the cross product of two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>normal vector of a and b</returns>
        </member>
        <member name="M:Purple.Math.Vector3.FromArray(System.Single[])">
            <summary>
            creates a vector from an array
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.Lerp(Purple.Math.Vector3,Purple.Math.Vector3,System.Single)">
            <summary>
            linear interpolation between to vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <param name="time">interpolation time [0..1]</param>
            <returns>interpolated vector</returns>
        </member>
        <member name="M:Purple.Math.Vector3.SetZero">
            <summary>
            Sets the vector to zero.
            </summary>
        </member>
        <member name="M:Purple.Math.Vector3.op_Addition(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            add two vectors
            </summary>
            <param name="a">vector a</param>
            <param name="b">vector b</param>
            <returns>sum of the two vedctors</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Add(Purple.Math.Vector3)">
            <summary>
            Adds a certain vector to the current vector.
            </summary>
            <param name="a">The vector to add.</param>
        </member>
        <member name="M:Purple.Math.Vector3.AddWeighted(Purple.Math.Vector3,System.Single)">
            <summary>
            Adds a weighted vector.
            </summary>
            <param name="a">The vector to add.</param>
            <param name="scalar">The scalar to multiply vector beforea adding.</param>
        </member>
        <member name="M:Purple.Math.Vector3.op_Subtraction(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            subtracts Vector be from Vector a
            </summary>
            <param name="a">vector to subtract from</param>
            <param name="b">vector to subtract</param>
            <returns>result of subtraction</returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_UnaryNegation(Purple.Math.Vector3)">
            <summary>
            Negate vector
            </summary>
            <param name="a">vector to negate</param>
            <returns>negative vector</returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_Division(Purple.Math.Vector3,System.Single)">
            <summary>
            divide vector
            </summary>
            <param name="vec">vector to divide</param>
            <param name="divisor">divisor to divide vector with</param>
            <returns>vector/divisor</returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_Multiply(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            scalar product
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>scalar product</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Dot(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            dot product of two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>dot product</returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_Multiply(Purple.Math.Vector3,Purple.Math.Matrix4)">
            <summary>
            transform a vector by a given Matrix
            </summary>
            <param name="m">matrix to use for Transformation</param>
            <param name="v">vector to transform</param>		
            <returns>transformed vector</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Mul(Purple.Math.Matrix4@)">
            <summary>
            Transforms the current vector by a matrix.
            </summary>
            <param name="m">Matrix to transform current vector with.</param>
        </member>
        <member name="M:Purple.Math.Vector3.op_Multiply(Purple.Math.Vector3,Purple.Math.Matrix3)">
            <summary>
            transform a vector by a given Matrix
            </summary>
            <param name="m">matrix to use for Transformation</param>
            <param name="v">vector to transform</param>		
            <returns>transformed vector</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Scale(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            scales the vector by a scale vector
            </summary>
            <param name="a">the vector to scale</param>
            <param name="b">the scale vector</param>
            <returns>the element wise multiplication of the two vectors</returns>
        </member>
        <member name="M:Purple.Math.Vector3.AllLess(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            tests if all elements of one vector are smaller than all of another vector
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.AllLessOrEqual(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            tests if all elements of one vector are smaller than all of another vector
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.OneLess(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            test if at least one element of a is smaller than in b
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.OneLessOrEqual(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            test if at least one element of a is smaller than in b
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_Multiply(Purple.Math.Vector3,System.Single)">
            <summary>
            multiply a vector with a scalar
            </summary>
            <param name="vec">vector to multiply with scalar</param>
            <param name="scalar">to multiply vector with</param>
            <returns>result of vec*scalar</returns>
        </member>
        <member name="M:Purple.Math.Vector3.Mul(System.Single)">
            <summary>
            Multiplies the current vector with a scalar.
            </summary>
            <param name="scalar"></param>
        </member>
        <member name="M:Purple.Math.Vector3.op_Multiply(System.Single,Purple.Math.Vector3)">
            <summary>
            multiply a vector with a scalar
            </summary>
            <param name="scalar">to multiply vector with</param>
            <param name="vec">vector to multiply with scalar</param>
            <returns>result of scalar*vec</returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_Equality(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            tests if two vectors are the same
            </summary>
            <param name="vec">first vector to compare</param>
            <param name="vec2">second vector ti compare</param>
            <returns>true if the elements of the vectors are the same</returns>
        </member>
        <member name="M:Purple.Math.Vector3.op_Inequality(Purple.Math.Vector3,Purple.Math.Vector3)">
            <summary>
            tests if two vectors are different
            </summary>
            <param name="vec">first vector to compare</param>
            <param name="vec2">second vector ti compare</param>
            <returns>true if at least one elements of vec is different from vec2</returns>
        </member>
        <member name="P:Purple.Math.Vector3.X">
            <summary>X element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector3.Y">
            <summary>Y element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector3.Z">
            <summary>Z element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector3.Zero">
            <summary>
            returns the identity matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Vector3.LookAt">
            <summary>
            a column of matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Vector3.Up">
            <summary>
            b column of matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Vector3.Right">
            <summary>
            c column of matrix
            </summary>
        </member>
        <member name="P:Purple.Math.Vector3.Vector2">
            <summary>
            Returns a vector containing the first three components.
            </summary>
        </member>
        <member name="P:Purple.Math.Vector3.Item(System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="T:Purple.Math.Vector2">
            <summary>
            Vector structure (2 elements)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            constructor for filling all elements
            </summary>
            <param name="x"></param>
            <param name="y"></param>		
        </member>
        <member name="M:Purple.Math.Vector2.From(System.Byte[])">
            <summary>
            Creates a vector from a byte array.
            </summary>
            <param name="bytes">Array of at least 8 byte elements.</param>
            <returns>Created vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector2.From(System.Byte[],System.Int32)">
            <summary>
            Creates a vector from a byte array.
            </summary>
            <param name="bytes">Array of at least 8 byte elements.</param>
            <param name="offset">The start offset in the buffer.</param>
            <returns>Created vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector2.GetHashCode">
            <summary>
            new hashcode function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector2.Equals(System.Object)">
            <summary>
            new equals function
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector2.ToString">
            <summary>
            Returns the string representation of the object.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:Purple.Math.Vector2.Unit(Purple.Math.Vector2)">
            <summary>
            calc unit vector from a certain Vector
            </summary>
            <param name="a">vector to calc unit vector from</param>
            <returns>unit vector</returns>
        </member>
        <member name="M:Purple.Math.Vector2.Ortho(Purple.Math.Vector2)">
            <summary>
            Calculates the orthogonal vector that points to the right.
            </summary>
            <param name="a">Vector to calculate orthogonal vector from.</param>
            <returns>The orthogonal vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector2.Normalize">
            <summary>
            normalizes the current instance
            </summary>
        </member>
        <member name="M:Purple.Math.Vector2.Length">
            <summary>
            Calculates the length of the current vector.
            </summary>
            <returns>Length of the current vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the current vector.
            </summary>
            <returns>The squared length of the current vector.</returns>
        </member>
        <member name="M:Purple.Math.Vector2.FromArray(System.Single[])">
            <summary>
            creates a vector from an array
            </summary>
            <param name="vec"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector2.Lerp(Purple.Math.Vector2,Purple.Math.Vector2,System.Single)">
            <summary>
            linear interpolation between to vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <param name="time">interpolation time [0..1]</param>
            <returns>interpolated vector</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Addition(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            add two vectors
            </summary>
            <param name="a">vector a</param>
            <param name="b">vector b</param>
            <returns>sum of the two vedctors</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Subtraction(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            subtracts Vector be from Vector a
            </summary>
            <param name="a">vector to subtract from</param>
            <param name="b">vector to subtract</param>
            <returns>result of subtraction</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_UnaryNegation(Purple.Math.Vector2)">
            <summary>
            Negate vector
            </summary>
            <param name="a">vector to negate</param>
            <returns>negative vector</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Division(Purple.Math.Vector2,System.Single)">
            <summary>
            divide vector
            </summary>
            <param name="vec">vector to divide</param>
            <param name="divisor">divisor to divide vector with</param>
            <returns>vector/divisor</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Multiply(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            scalar product
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>scalar product</returns>
        </member>
        <member name="M:Purple.Math.Vector2.Dot(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            dot product of two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>dot product</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Multiply(Purple.Math.Vector2,System.Single)">
            <summary>
            multiply a vector with a scalar
            </summary>
            <param name="vec">vector to multiply with scalar</param>
            <param name="scalar">to multiply vector with</param>
            <returns>result of vec*scalar</returns>
        </member>
        <member name="M:Purple.Math.Vector2.ToVector3">
            <summary>
            convert from Vector2 to Vector3
            </summary>
            <returns>returns vector3 where x,y = vec2.x,y and z = 0</returns>
        </member>
        <member name="M:Purple.Math.Vector2.Rotate(Purple.Math.Vector2,System.Single)">
            <summary>
            rotates a given vector
            </summary>
            <param name="vec">vector to rotate</param>
            <param name="angle">angle to use for roation</param>
            <returns>the rotated vector</returns>
        </member>
        <member name="M:Purple.Math.Vector2.MultiplyElements(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            multiplies two vectors elementwise
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector2.DivideElements(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            multiplies two vectors elementwise
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Equality(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            compares two vectors if they are equal
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>true if the two vectors are equal</returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Inequality(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            compares two vectors if they are equal
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns>true if the two vectors are equal</returns>
        </member>
        <member name="M:Purple.Math.Vector2.Max(Purple.Math.Vector2,Purple.Math.Vector2)">
            <summary>
            calculats the maximum of the two vectors
            </summary>
            <param name="a">first vector</param>
            <param name="b">second vector</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Math.Vector2.op_Explicit(System.Drawing.Size)~Purple.Math.Vector2">
            <summary>
            Explicit conversion.
            </summary>
            <param name="size">The variable to convert.</param>
            <returns>The Vector2 object.</returns>
        </member>
        <member name="P:Purple.Math.Vector2.X">
            <summary>X element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector2.Y">
            <summary>Y element of the vector.</summary>
        </member>
        <member name="P:Purple.Math.Vector2.Zero">
            <summary>
            returns the a vector initialised with 0.0f
            </summary>
        </member>
        <member name="P:Purple.Math.Vector2.One">
            <summary>
            returns a vector initialised with 1.0f
            </summary>
        </member>
        <member name="P:Purple.Math.Vector2.Item(System.Int32)">
            <summary>
            indexer for matrix
            </summary>
        </member>
        <member name="T:Purple.Math.Vector2Converter">
            <summary>
            Converter, that converts a Vector2 object to a string and 
            vice versa.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Vector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType"></param>
            <returns>The Type to convert the value parameter to.</returns>
        </member>
        <member name="M:Purple.Math.Vector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture. </param>
            <param name="value">The Object to convert. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Purple.Math.Vector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:Purple.Math.Vector3Converter">
            <summary>
            Converter, that converts a Vector3 object to a string and 
            vice versa.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Vector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType"></param>
            <returns>The Type to convert the value parameter to.</returns>
        </member>
        <member name="M:Purple.Math.Vector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture. </param>
            <param name="value">The Object to convert. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Purple.Math.Vector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:Purple.Math.Vector4Converter">
            <summary>
            Converter, that converts a Vector3 object to a string and 
            vice versa.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>  
            </remarks>
        </member>
        <member name="M:Purple.Math.Vector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType"></param>
            <returns>The Type to convert the value parameter to.</returns>
        </member>
        <member name="M:Purple.Math.Vector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="culture">The CultureInfo to use as the current culture. </param>
            <param name="value">The Object to convert. </param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Purple.Math.Vector4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, 
            using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context. </param>
            <param name="sourceType">A Type that represents the type you want to convert from. </param>
            <returns>True if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="T:Purple.Net.ConnectionState">
            <summary>
            Enumeration over all states of a connection.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="F:Purple.Net.ConnectionState.Uninitialised">
            <summary>
            Not connected.
            </summary>
        </member>
        <member name="F:Purple.Net.ConnectionState.Connected">
            <summary>
            Connected.
            </summary>
        </member>
        <member name="F:Purple.Net.ConnectionState.ConnectionFailed">
            <summary>
            Connection failed.
            </summary>
        </member>
        <member name="T:Purple.Net.ConnectionArgs">
            <summary>
            EventArgs for Connection events.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.ConnectionArgs.#ctor(Purple.Net.IConnection,System.Int32)">
            <summary>
            Creates a new ConnectionArgs object.
            </summary>
            <param name="connection">The connection the event is fired for.</param>
            <param name="id">The sequence number of the operation.</param>
        </member>
        <member name="P:Purple.Net.ConnectionArgs.Connection">
            <summary>
            The connection the event was fired for.
            </summary>
        </member>
        <member name="P:Purple.Net.ConnectionArgs.Id">
            <summary>
            The sequence number of the operation.
            </summary>
        </member>
        <member name="T:Purple.Net.ErrorType">
            <summary>
            Enumeration over all types of connection errors.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="F:Purple.Net.ErrorType.ConnectingFailed">
            <summary>
            Couldn't connect to server.
            </summary>
        </member>
        <member name="F:Purple.Net.ErrorType.SendFailed">
            <summary>
            Error when sending data.
            </summary>
        </member>
        <member name="F:Purple.Net.ErrorType.ReceiveFailed">
            <summary>
            Error receiving data.
            </summary>
        </member>
        <member name="F:Purple.Net.ErrorType.ConnectionLost">
            <summary>
            Connection was lost.
            </summary>
        </member>
        <member name="T:Purple.Net.ErrorArgs">
            <summary>
            Error event args.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.ErrorArgs.#ctor(Purple.Net.ErrorType,System.String)">
            <summary>
            Creates a new <see cref="T:Purple.Net.ErrorArgs"/> object.
            </summary>
            <param name="type">The type of the error.</param>
            <param name="description">The textual description.</param>
        </member>
        <member name="P:Purple.Net.ErrorArgs.ErrorType">
            <summary>
            The type of the error that occured.
            </summary>
        </member>
        <member name="P:Purple.Net.ErrorArgs.Description">
            <summary>
            A textual description of the error.
            </summary>
        </member>
        <member name="T:Purple.Net.ConnectionCallback">
            <summary>
            Callback that is used for the <c>Connected</c>, <c>Sent</c> and <c>Received</c> events.
            </summary>
        </member>
        <member name="T:Purple.Net.ConnectionFailedCallback">
            <summary>
            Callback that is used if something went wrong.
            </summary>
        </member>
        <member name="T:Purple.Net.Connections.SocketConnection">
            <summary>
            Abstract base class for all <see cref="T:Purple.Net.IConnection"/>s that 
            are based on sockets.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="T:Purple.Net.IConnection">
            <summary>
            The abstract interface for a certain type of connection.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.IConnection.Connect(System.String,System.Int32)">
            <summary>
            Tries to connect to another host.
            </summary>
            <param name="hostName">Ip or name of the host.</param>
            <param name="port">The port to connect to.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.IConnection.Connect(System.Net.IPEndPoint)">
            <summary>
            Tries to connect to another host.
            </summary>
            <param name="endPoint">The endPoint to connect to.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.IConnection.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Tries to send a certain amount of data.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The offset within the data array.</param>
            <param name="count">The number of bytes to use within the array.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.IConnection.Send(System.Byte[])">
            <summary>
            Tries to send a certain amount of data.
            </summary>
            <param name="data">The data to send.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.IConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="E:Purple.Net.IConnection.Connected">
            <summary>
            Event that is thrown if connecting to a host succeeded.
            </summary>
        </member>
        <member name="E:Purple.Net.IConnection.ConnectionFailed">
            <summary>
            Event that is thrown if connecting to a host failed.
            </summary>
        </member>
        <member name="E:Purple.Net.IConnection.ConnectionLost">
            <summary>
            Event that is fired if an already existing connection was lost.
            </summary>
        </member>
        <member name="E:Purple.Net.IConnection.Sent">
            <summary>
            Event that gets thrown if data was successfully sent.
            </summary>
        </member>
        <member name="E:Purple.Net.IConnection.Received">
            <summary>
            Event that gets thrown if data was successfully received.
            </summary>
        </member>
        <member name="P:Purple.Net.IConnection.State">
            <summary>
            The current state of the connection.
            </summary>
        </member>
        <member name="P:Purple.Net.IConnection.Data">
            <summary>
            The received data.
            </summary>
        </member>
        <member name="P:Purple.Net.IConnection.Filled">
            <summary>
            The number of bytes the <c>Data</c> property is filled with valid data.
            </summary>
        </member>
        <member name="P:Purple.Net.IConnection.Logger">
            <summary>
            Returns the used logger.
            </summary>
        </member>
        <member name="P:Purple.Net.IConnection.Local">
            <summary>
            Returns the local end point of the connection.
            </summary>
        </member>
        <member name="P:Purple.Net.IConnection.Remote">
            <summary>
            Returns the remote end point of the connection.
            </summary>
        </member>
        <member name="F:Purple.Net.Connections.SocketConnection.socket">
            <summary>
            The used socket by the connection.
            </summary>
        </member>
        <member name="F:Purple.Net.Connections.SocketConnection.data">
            <summary>
            The received data.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.Net.Connections.TcpConnection"/> object.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.#ctor(Purple.Logging.Logger,System.Net.Sockets.Socket)">
            <summary>
            Creates a new <see cref="T:Purple.Net.Connections.TcpConnection"/> object.
            </summary>
            <param name="logger">The logger used for the object.</param>
            <param name="socket">The socket to use for the connection.</param>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.Connect(System.String,System.Int32)">
            <summary>
            Tries to connect to another host.
            </summary>
            <param name="hostName">Ip or name of the host.</param>
            <param name="port">The port to connect to.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.Connect(System.Net.IPEndPoint)">
            <summary>
            Tries to connect to another host.
            </summary>
            <param name="endPoint">The endPoint to connect to.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Tries to send a certain amount of data.
            </summary>
            <param name="data">The data to send.</param>
            <param name="offset">The offset within the data array.</param>
            <param name="count">The number of bytes to use within the array.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.Send(System.Byte[])">
            <summary>
            Tries to send a certain amount of data.
            </summary>
            <param name="data">The data to send.</param>
            <returns>The sequence number of the operation.</returns>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.Receive">
            <summary>
            Starts receiving data.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.SocketConnection.Close">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.BufferSize">
            <summary>
            The size of the buffer used for receiving data.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.State">
            <summary>
            The current state of the connection.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.Data">
            <summary>
            The received data.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.Filled">
            <summary>
            The number of bytes the <c>Data</c> property is filled with valid data.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.Logger">
            <summary>
            Returns the used logger.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.Local">
            <summary>
            Returns the local end point of the connection.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketConnection.Remote">
            <summary>
            Returns the remote end point of the connection.
            </summary>
        </member>
        <member name="E:Purple.Net.Connections.SocketConnection.Connected">
            <summary>
            Event that is thrown if connecting to a host succeeded.
            </summary>
        </member>
        <member name="E:Purple.Net.Connections.SocketConnection.ConnectionFailed">
            <summary>
            Event that is thrown if connecting to a host failed.
            </summary>
        </member>
        <member name="E:Purple.Net.Connections.SocketConnection.ConnectionLost">
            <summary>
            Event that is fired if an already existing connection was lost.
            </summary>
        </member>
        <member name="E:Purple.Net.Connections.SocketConnection.Sent">
            <summary>
            Event that gets thrown if data was successfully sent.
            </summary>
        </member>
        <member name="E:Purple.Net.Connections.SocketConnection.Received">
            <summary>
            Event that gets thrown if data was successfully received.
            </summary>
        </member>
        <member name="T:Purple.Net.Connections.SocketListener">
            <summary>
            Abstract base class for all <see cref="T:Purple.Net.IListener"/>s that 
            are based on sockets.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="T:Purple.Net.IListener">
            <summary>
            An abstract interface for a connection listener.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            This interface is mostly used for servers that listen for 
            clients that want to connect.
            </remarks>
        </member>
        <member name="M:Purple.Net.IListener.Listen(System.Int32)">
            <summary>
            Listen for connecting hosts.
            </summary>
            <param name="port">Port to listen on.</param>
        </member>
        <member name="M:Purple.Net.IListener.Close">
            <summary>
            Closes the listener.
            </summary>
        </member>
        <member name="E:Purple.Net.IListener.Accepted">
            <summary>
            Event that is thrown if a connection gets accepted.
            </summary>
        </member>
        <member name="F:Purple.Net.Connections.SocketListener.socket">
            <summary>
            The socket to use by the listener.
            </summary>
        </member>
        <member name="F:Purple.Net.Connections.SocketListener.logger">
            <summary>
            The logger to use by the listener.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.SocketListener.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Net.Connections.TcpListener"/>.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.SocketListener.#ctor(Purple.Logging.Logger)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Net.Connections.TcpListener"/>.
            </summary>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="M:Purple.Net.Connections.SocketListener.Listen(System.Int32)">
            <summary>
            Listen for connecting hosts.
            </summary>
            <param name="port">Port to listen on.</param>
        </member>
        <member name="M:Purple.Net.Connections.SocketListener.Close">
            <summary>
            Closes the listener.
            </summary>
        </member>
        <member name="P:Purple.Net.Connections.SocketListener.MaxConnections">
            <summary>
            The maximum number of concurrent connections the listener can handle.
            </summary>
        </member>
        <member name="E:Purple.Net.Connections.SocketListener.Accepted">
            <summary>
            Event that is thrown if a connection gets accepted.
            </summary>
        </member>
        <member name="T:Purple.Net.Connections.TcpConnection">
            <summary>
            Implementation of the <see cref="T:Purple.Net.IConnection"/> interface 
            that uses the TCP protocol.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.Connections.TcpConnection.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.Net.Connections.TcpConnection"/> object.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.TcpConnection.#ctor(Purple.Logging.Logger,System.Net.Sockets.Socket)">
            <summary>
            Creates a new <see cref="T:Purple.Net.Connections.TcpConnection"/> object.
            </summary>
            <param name="logger">The logger used for the object.</param>
            <param name="socket">The socket to use for the connection.</param>
        </member>
        <member name="M:Purple.Net.Connections.TcpConnection.InitSocket">
            <summary>
            Initializes the socket.
            </summary>
        </member>
        <member name="T:Purple.Net.Connections.TcpListener">
            <summary>
            Implementation of the <see cref="T:Purple.Net.IListener"/> interface 
            that uses the TCP protocol.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.Connections.TcpListener.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Net.Connections.TcpListener"/>.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.TcpListener.#ctor(Purple.Logging.Logger)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Net.Connections.TcpListener"/>.
            </summary>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="T:Purple.Net.Connections.UdpConnection">
            <summary>
            Implementation of the <see cref="T:Purple.Net.IConnection"/> interface 
            that uses the UDP protocol.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.Connections.UdpConnection.#ctor">
            <summary>
            Creates a new <see cref="T:Purple.Net.Connections.UdpConnection"/> object.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.UdpConnection.#ctor(Purple.Logging.Logger,System.Net.Sockets.Socket)">
            <summary>
            Creates a new <see cref="T:Purple.Net.Connections.UdpConnection"/> object.
            </summary>
            <param name="logger">The logger used for the object.</param>
            <param name="socket">The socket to use for the connection.</param>
        </member>
        <member name="T:Purple.Net.Connections.UdpListener">
            <summary>
            Implementation of the <see cref="T:Purple.Net.IListener"/> interface 
            that uses the UDP protocol.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.Connections.UdpListener.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Net.Connections.TcpListener"/>.
            </summary>
        </member>
        <member name="M:Purple.Net.Connections.UdpListener.#ctor(Purple.Logging.Logger)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Net.Connections.TcpListener"/>.
            </summary>
            <param name="logger">The logger to use.</param>
        </member>
        <member name="T:Purple.Net.ListenerState">
            <summary>
            Enumeration over all possible listener states.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="F:Purple.Net.ListenerState.Uninitialised">
            <summary>
            The listener is uninitialized.
            </summary>
        </member>
        <member name="F:Purple.Net.ListenerState.Listening">
            <summary>
            Successfully listening.
            </summary>
        </member>
        <member name="F:Purple.Net.ListenerState.ListeningFailed">
            <summary>
            Listening failed.
            </summary>
        </member>
        <member name="T:Purple.Net.ListenerArgs">
            <summary>
            EventArgs for listener events.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.ListenerArgs.#ctor(Purple.Net.IListener,System.Int32,Purple.Net.IConnection)">
            <summary>
            Creates a new ListenerArgs object.
            </summary>
            <param name="server">The listener object.</param>
            <param name="id">The sequence number of the operation.</param>
            <param name="client">The client connection.</param>
        </member>
        <member name="P:Purple.Net.ListenerArgs.Client">
            <summary>
            The client connection.
            </summary>
        </member>
        <member name="P:Purple.Net.ListenerArgs.Id">
            <summary>
            The sequence number of the operation.
            </summary>
        </member>
        <member name="P:Purple.Net.ListenerArgs.Server">
            <summary>
            
            </summary>
        </member>
        <member name="T:Purple.Net.ListenerCallback">
            <summary>
            Callback that is used for listener events.
            </summary>
        </member>
        <member name="T:Purple.Net.Packets.Packet">
            <summary>
            The packet structure used to serialize and deserialize packets.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="F:Purple.Net.Packets.Packet.MagicNumber">
            <summary>
            The magic header number of each packet.
            </summary>
        </member>
        <member name="F:Purple.Net.Packets.Packet.Header">
            <summary>
            Header size of the packet.
            </summary>
        </member>
        <member name="F:Purple.Net.Packets.Packet.Size">
            <summary>
            Total size of packet.
            </summary>
        </member>
        <member name="F:Purple.Net.Packets.Packet.Data">
            <summary>
            The data.
            </summary>
        </member>
        <member name="M:Purple.Net.Packets.Packet.#ctor(System.Byte[])">
            <summary>
            Creates a new packet.
            </summary>
            <param name="data">Data of packet.</param>
        </member>
        <member name="P:Purple.Net.Packets.Packet.HeaderSize">
            <summary>
            Size of the header in bytes.
            </summary>
        </member>
        <member name="T:Purple.Net.Packets.PacketHandler">
            <summary>
            Event that handles <see cref="T:Purple.Net.Packets.Packetizer"/> events.
            </summary>
        </member>
        <member name="T:Purple.Net.Packets.Packetizer">
            <summary>
            A class that puts data into packets and sends them over the 
            net. These packets can easily be unwraped on the client side and 
            passes as a whole to the application. 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Net.Packets.Packetizer.#ctor(Purple.Net.IConnection)">
            <summary>
            Creates a new instance of the packetizer.
            </summary>
            <param name="connection">Connection to use.</param>
        </member>
        <member name="M:Purple.Net.Packets.Packetizer.Send(System.Byte[])">
            <summary>
            Send a new data chunk.
            </summary>
            <param name="data">The data to send.</param>
            <returns>The running sequence number.</returns>
        </member>
        <member name="E:Purple.Net.Packets.Packetizer.PacketReceived">
            <summary>
            Event that is fired when a new packet was received.
            </summary>
        </member>
        <member name="P:Purple.Net.Packets.Packetizer.Connection">
            <summary>
            The connection used by the packetizer.
            </summary>
        </member>
        <member name="T:Purple.Net.Queues.ObjectQueue">
            <summary>
            The queue storing all incoming objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            The objet queue stores all incoming but not yet processed objects. 
            The queue is thread safe and a comfortable way to get control when 
            the incoming objects should be processed.
            </remarks>
        </member>
        <member name="M:Purple.Net.Queues.ObjectQueue.#ctor(Purple.Net.Packets.Packetizer)">
            <summary>
            Creates a new instance of an ObjectQueue.
            </summary>
        </member>
        <member name="M:Purple.Net.Queues.ObjectQueue.Enqueue(System.Object)">
            <summary>
            Adds an object to the end of the ObjectQueue.
            </summary>
            <param name="obj">Object to add.</param>
        </member>
        <member name="M:Purple.Net.Queues.ObjectQueue.Peek">
            <summary>
            Returns an object without removing it.
            </summary>
            <returns>The object at the beginning of the ObjectQueue.</returns>
        </member>
        <member name="M:Purple.Net.Queues.ObjectQueue.Dequeue">
            <summary>
            Returns the object at the beginning of the ObjectQueue and removes it.
            </summary>
            <returns>The object at the beginning of the ObjectQueue and removes it.</returns>
        </member>
        <member name="T:Purple.Player.PlayerState">
            <summary>
            All possible states of a player.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="F:Purple.Player.PlayerState.Stopped">
            <summary>
            The player is stopped.
            </summary>
        </member>
        <member name="F:Purple.Player.PlayerState.Playing">
            <summary>
            The player is currently playing.
            </summary>
        </member>
        <member name="F:Purple.Player.PlayerState.Paused">
            <summary>
            The player is paused.
            </summary>
        </member>
        <member name="T:Purple.PlugIn.Factory">
            <summary>
            PlugIn Factory which loads PlugIns, creates objects and
            can be cofigurated over a xml file
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Update: 0.5</para>
            </remarks>
        </member>
        <member name="T:Purple.Serialization.ISerializer">
            <summary>
            An abstract interface for an object which is able to serialize objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.ISerializer.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializer.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Purple.PlugIn.Factory.Register(System.String,System.String,System.String)">
            <summary>
            registeres a plugIn
            </summary>
            <param name="name">name to identify plugIn</param>
            <param name="dllPath">path of dll</param>
            <param name="className">name of class to create</param>
        </member>
        <member name="M:Purple.PlugIn.Factory.Register(System.String,System.String,System.String,System.Object[])">
            <summary>
            registeres a plugIn
            </summary>
            <param name="name">name to identify plugIn</param>
            <param name="dllPath">path of dll</param>
            <param name="className">name of class to create</param>
            <param name="arguments">Arguments to use for creating the plugIn instance.</param>
        </member>
        <member name="M:Purple.PlugIn.Factory.IsRegistered(System.String)">
            <summary>
            test if a certain plugIn is registered
            </summary>
            <param name="name">name to identify plugIn</param>
            <returns>true if given name is already registered</returns>
        </member>
        <member name="M:Purple.PlugIn.Factory.Unregister(System.String)">
            <summary>
            unregister a certain plugIn
            </summary>
            <param name="name">name to identify plugIn</param>
        </member>
        <member name="M:Purple.PlugIn.Factory.Load(System.String)">
            <summary>
            configurates the Factory by the passed xml file
            </summary>
            <param name="fileName">filename of xml file</param>
        </member>
        <member name="M:Purple.PlugIn.Factory.Save(System.String)">
            <summary>
            save current configuration of Factory
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Purple.PlugIn.Factory.Get(System.String)">
            <summary>
            returns the instance of the object given by a certain name
            </summary>
            <param name="name">string to identify object</param>
            <returns></returns>
        </member>
        <member name="M:Purple.PlugIn.Factory.Create(System.String)">
            <summary>
            creates a certain instance
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.PlugIn.Factory.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.PlugIn.Factory.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:Purple.PlugIn.Factory.Instance">
            <summary>
            returns the singleton instance of the factory
            </summary>
        </member>
        <member name="P:Purple.PlugIn.Factory.FileSystem">
            <summary>
            The contained <see cref="P:Purple.PlugIn.Factory.FileSystem"/>.
            </summary>
        </member>
        <member name="F:Purple.PlugIn.Factory.PlugInData.Name">
            <summary>
            name to identify plugIn
            </summary>
        </member>
        <member name="F:Purple.PlugIn.Factory.PlugInData.DllPath">
            <summary>
            path to dll containing class
            </summary>
        </member>
        <member name="F:Purple.PlugIn.Factory.PlugInData.ClassName">
            <summary>
            name of class to create
            </summary>
        </member>
        <member name="F:Purple.PlugIn.Factory.PlugInData.Arguments">
            <summary>
            The array of arguments for the fileSystem.
            </summary>
        </member>
        <member name="M:Purple.PlugIn.Factory.PlugInData.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            create instance of PlugInData
            </summary>
            <param name="name">name to identify plugIn</param>
            <param name="dllPath">path to dll containing class</param>
            <param name="className">name of class to create</param>
            <param name="arguments">The arguments for creating the plugIn.</param>
        </member>
        <member name="T:Purple.PlugIn.PlugIn">
            <summary>
            PlugIn loads .NET Assemblies, instantiates classes, ...
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Last change: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.PlugIn.PlugIn.#ctor(System.String)">
            <summary>
            Creates a PlugIn using the Assembly given by the fileName.
            </summary>
            <remarks>
            It's very important that the file is in the same directory or within one of the subdirectories
            than the binaries of the main application.
            </remarks>
            <param name="fileName">FileName of the PlugIn =&gt; e.g. "PlugIn.dll".</param>
            <exception cref="T:Purple.Exceptions.StreamException">Thrown if Assembly couldn't be loaded.</exception>
            <exception cref="T:Purple.PlugIn.PlugInException">Assembly couldn't be created!</exception>
        </member>
        <member name="M:Purple.PlugIn.PlugIn.GetInstanceOf(System.String,System.Object[])">
            <summary>
            Returns an instance of a certain class.
            </summary>
            <remarks>
            If parameters are passed, GetInstanceOf uses the contstructor fitting to the 
            parameters for the object creation. Otherwise it tries to call the static property 
            Instance. If this doesn't work it uses the standard constructor.
            </remarks>
            <param name="type">Name of the class e.g. "Purple.Scripting.CSharp.ScriptEngine".</param>
            <param name="parameters">The parameters used by the constructor.</param>
            <returns>One instance of the given class.</returns>
            <exception cref="T:Purple.PlugIn.PlugInException">Thrown if type is invalid or unable to get an instance.</exception>
        </member>
        <member name="M:Purple.PlugIn.PlugIn.GetInstanceOf(System.String)">
            <summary>
            Returns an instance of a certain class.
            </summary>
            <remarks>
            If parameters are passed, GetInstanceOf uses the contstructor fitting to the 
            parameters for the object creation. Otherwise it tries to call the static property 
            Instance. If this doesn't work it uses the standard constructor.
            </remarks>
            <param name="type">Name of the class e.g. "Purple.Scripting.CSharp.ScriptEngine".</param>
            <returns>One instance of the given class.</returns>
            <exception cref="T:Purple.PlugIn.PlugInException">Thrown if type is invalid or unable to get an instance.</exception>
        </member>
        <member name="T:Purple.PlugIn.PlugInException">
            <summary>
            exception which is thrown in case of PlugIn errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.PlugIn.PlugInException.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.PlugIn.PlugInException.#ctor(System.String)">
            <summary>
            constructor taking string describing reasons for exception
            </summary>
            <param name="description">Description why exception is thrown</param>
        </member>
        <member name="T:Purple.PlugIn.RemoteLoader">
            <summary>
            The remote assembly loader that is used for loading an assembly into 
            a certain appDomain and retrieving the main object.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.5</para>
            </remarks>
        </member>
        <member name="M:Purple.PlugIn.RemoteLoader.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:Purple.PlugIn.RemoteLoader"/>.
            </summary>
        </member>
        <member name="M:Purple.PlugIn.RemoteLoader.Load(System.String)">
            <summary>
            Loads the assembly.
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="T:Purple.Profiling.Profiler">
            <summary>
            Profiler for in-game profiling.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last change: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Profiling.Profiler.Sample(System.String)">
            <summary>
            Returns an IDisposable object that creates a profiling sample.
            </summary>
            <remarks>
            This method should be used in connection with the using statement.
            <code>
            using (profiler.Sample("Name")) {
              // code block to profile...
            }
            </code>
            </remarks>
            <param name="name">Name of the sample.</param>
        </member>
        <member name="M:Purple.Profiling.Profiler.Begin(System.String)">
            <summary>
            Begins recording a certain <see cref="T:Purple.Profiling.ProfilingSample"/>.
            </summary>
            <param name="name">Name of the sample.</param>	
        </member>
        <member name="M:Purple.Profiling.Profiler.Begin">
            <summary>
            Begins recording a certain <see cref="T:Purple.Profiling.ProfilingSample"/>.
            </summary>	
        </member>
        <member name="M:Purple.Profiling.Profiler.End">
            <summary>
            Stops recording the current <see cref="T:Purple.Profiling.ProfilingSample"/>.
            </summary>
        </member>
        <member name="M:Purple.Profiling.Profiler.End(System.String)">
            <summary>
            Stops recording the current <see cref="T:Purple.Profiling.ProfilingSample"/>.
            </summary>
            <param name="name">Name of current sample.</param>	
        </member>
        <member name="M:Purple.Profiling.Profiler.BeginFrame">
            <summary>
            Starts recoding a new frame.
            </summary>
        </member>
        <member name="M:Purple.Profiling.Profiler.EndFrame">
            <summary>
            Ends recording a new frame.
            </summary>
            <remarks>
            Usually called for every frame -> fires event containing data.
            Mustn't be called between Begin and End.
            </remarks>
            <returns>
            Returns the time within the frame.
            </returns>
        </member>
        <member name="E:Purple.Profiling.Profiler.ProfilerCallback">
            <summary>
            Event that is called after each frame.
            </summary>
        </member>
        <member name="P:Purple.Profiling.Profiler.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:Purple.Profiling.Profiler"/>.
            </summary>
        </member>
        <member name="M:Purple.Profiling.Profiler.UsingBlock.#ctor(Purple.Profiling.Profiler,System.String)">
            <summary>
            Creates a new using block object.
            </summary>
            <param name="profiler">The profiler to use.</param>
            <param name="name">Name of the current sample.</param>
        </member>
        <member name="T:Purple.Profiling.ProfilingData">
            <summary>
            Class that gathers the profiling data.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>  
            </remarks>
        </member>
        <member name="M:Purple.Profiling.ProfilingData.#ctor">
            <summary>
            Creates a new ProfilingData object.
            </summary>
        </member>
        <member name="M:Purple.Profiling.ProfilingData.Reset">
            <summary>
            Resets the gathered profiling data.
            </summary>
        </member>
        <member name="M:Purple.Profiling.ProfilingData.UpdateProfilerData(Purple.Profiling.ProfilingSample)">
            <summary>
            Update the profiler data.
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:Purple.Profiling.ProfilingData.CreateString(System.Boolean)">
            <summary>
            Creates the profiling string.
            </summary>
            <param name="currentData">Flag that indicates if the last frame data should be added.</param>
            <returns>The string describing the profiling data.</returns>
        </member>
        <member name="P:Purple.Profiling.ProfilingData.Total">
            <summary>
            The total time for all executions.
            </summary>
        </member>
        <member name="P:Purple.Profiling.ProfilingData.Min">
            <summary>
            The minimum time for one execution.
            </summary>
        </member>
        <member name="P:Purple.Profiling.ProfilingData.Current">
            <summary>
            The current profiling sample.
            </summary>
        </member>
        <member name="P:Purple.Profiling.ProfilingData.Max">
            <summary>
            The maximum time for one execution.
            </summary>
        </member>
        <member name="T:Purple.Profiling.ProfilingLogger">
            <summary>
            Logs the profiling data.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Profiling.ProfilingLogger.#ctor">
            <summary>
            Creates a new ProfilerLogger object.
            </summary>
        </member>
        <member name="M:Purple.Profiling.ProfilingLogger.Write(System.String)">
            <summary>
            Save the result to a file.
            </summary>
            <param name="fileName">name of file</param>
        </member>
        <member name="M:Purple.Profiling.ProfilingLogger.Write(Purple.Logging.Logger)">
            <summary>
            Write the output to a logger.
            </summary>
            <param name="logger">Logger to write the profiling data to.</param>
        </member>
        <member name="T:Purple.Profiling.ProfilerCallback">
            <summary>
            Delegate to inform application about profiling results
            </summary>  
        </member>
        <member name="T:Purple.Profiling.ProfilingSample">
            <summary>
            ProfilerSample 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.Name">
            <summary>Name of sample.</summary>
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.StartTime">
            <summary>Start time (inserted by Profiler.Begin()).</summary>
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.TotalTime">
            <summary>Total time (updated by Profler.End()).</summary>
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.OpenCounter">
            <summary>Number of Profiler.Begin() - Profiler.End() calls.</summary>
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.NumberOfCalls">
            <summary>Amount how often begin/end block is executed.</summary>
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.Parent">
            <summary>Parent sample.</summary>		
        </member>
        <member name="F:Purple.Profiling.ProfilingSample.Children">
            <summary>Child samples.</summary>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.#ctor(System.String)">
            <summary>
            Creates a new instance of a <see cref="T:Purple.Profiling.ProfilingSample"/>.
            </summary>
            <param name="name">Name of profiler sample</param>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.Reset">
            <summary>
            Reset the counter variables.
            </summary>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.Contains(System.String)">
            <summary>
            returns true if ProfilerSample contains child ProfilerSample with specified name
            </summary>
            <param name="name">of child</param>
            <returns>true if ProfilerSample contains child ProfilerSample with specified name</returns>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.Add(Purple.Profiling.ProfilingSample)">
            <summary>
            adds a profilerSample to the child list
            </summary>
            <param name="sample"></param>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.Clone">
            <summary>
            creates a clone of the profilerSample (without children)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.DoAdd(Purple.Profiling.ProfilingSample)">
            <summary>
            adds the values of the sample to the current sample
            </summary>
            <param name="sample">sample to add</param>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.DoMin(Purple.Profiling.ProfilingSample)">
            <summary>
            tests if new sample is new min
            </summary>
            <param name="sample">sample to test for new min</param>
        </member>
        <member name="M:Purple.Profiling.ProfilingSample.DoMax(Purple.Profiling.ProfilingSample)">
            <summary>
            test if new sample is new max
            </summary>
            <param name="sample">sample to test for new max</param>
        </member>
        <member name="P:Purple.Profiling.ProfilingSample.Root">
            <summary>
            get the root element
            </summary>
        </member>
        <member name="P:Purple.Profiling.ProfilingSample.Item(System.String)">
            <summary>
            returns ProfilerSample with specified name
            </summary>
        </member>
        <member name="T:Purple.Scripting.CompilerErrorException">
            <summary>
            exception which is thrown when compilation errors occured
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.CompilerErrorException.#ctor(System.String,System.CodeDom.Compiler.CompilerErrorCollection)">
            <summary>
            scripting exception taking className and collection of CompilerErrors as parameters
            </summary>
            <param name="className">name of compiled class</param>
            <param name="errors">collection of CompilerErrors</param>
        </member>
        <member name="M:Purple.Scripting.CompilerErrorException.ToString">
            <summary>
            get CompilerErrors in form of a string (similar to C#.NET way)
            </summary>
            <returns>string describing errors</returns>
        </member>
        <member name="P:Purple.Scripting.CompilerErrorException.CompilerErrors">
            <summary>
            get the errors in form of a collection - this way detailed information can
            be read out about the occured errors
            </summary>
        </member>
        <member name="T:Purple.Scripting.ScriptingException">
            <summary>
            an abstract base class for Scripting based exception
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.ScriptingException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            creates a new exception object
            </summary>
            <param name="fileName">name of the file, where the error occured</param>
            <param name="line">number of the line, where the error occured</param>
            <param name="column">number of the column, where the error occured</param>
            <param name="description">error description</param>
        </member>
        <member name="P:Purple.Scripting.ScriptingException.FileName">
            <summary>
            name of the file, where the error occured
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingException.Line">
            <summary>
            number of the line, where the error occured
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingException.Column">
            <summary>
            number of the column, where the error occured
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingException.Description">
            <summary>
            error description
            </summary>
        </member>
        <member name="T:Purple.Scripting.ScannerException">
            <summary>
            a exception which is thrown in case of symbolical errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.ScannerException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            creates a new exception object
            </summary>
            <param name="fileName">name of the file, where the error occured</param>
            <param name="line">number of the line, where the error occured</param>
            <param name="column">number of the column, where the error occured</param>
            <param name="description">error description</param>
        </member>
        <member name="T:Purple.Scripting.ParserException">
            <summary>
            a exception which is thrown in case of syntax errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.ParserException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            creates a new exception object
            </summary>
            <param name="fileName">name of the file, where the error occured</param>
            <param name="line">number of the line, where the error occured</param>
            <param name="column">number of the column, where the error occured</param>
            <param name="description">error description</param>
        </member>
        <member name="T:Purple.Scripting.SemanticException">
            <summary>
            a exception which is thrown in case of semantic errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.SemanticException.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            creates a new exception object
            </summary>
            <param name="fileName">name of the file, where the error occured</param>
            <param name="line">number of the line, where the error occured</param>
            <param name="column">number of the column, where the error occured</param>
            <param name="description">error description</param>
        </member>
        <member name="T:Purple.Scripting.IScript">
            <summary>
            abstract interface for a certain Script (VBScript, JScript, ..)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="T:Purple.Tools.ICommand">
            <summary>
            public interface for an command object
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.ICommand.Execute">
            <summary>
            executes a command
            </summary>
        </member>
        <member name="M:Purple.Scripting.IScript.GetInstance">
            <summary>
            scripted class has to support method: public static object GetInstance();
            otherweise GetInstance uses standard constructor
            </summary>
            <returns>returns one ínstance of main class (of the script)</returns>
            <exception cref="T:Purple.Scripting.ScriptingException">
            instance couldn't be created =&gt; no GetInstance method and no standard constructor
            </exception>
        </member>
        <member name="P:Purple.Scripting.IScript.FileName">
            <summary>
            name of script file or null
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScript.ClassName">
            <summary>
            class name of script
            if script contains more classes, name of the main class (EntryPoint)
            </summary>
        </member>
        <member name="T:Purple.Scripting.IScriptingEngine">
            <summary>
            abstract interface for a certain scriptEngine (VbScript, JScript, ..)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.IScriptingEngine.Load(System.String,System.String)">
            <summary>
            loads a script from a file and creates a script object
            </summary>
            <param name="className">name of object e.g. Purple.Scripts.TestScript</param>
            <param name="fileName">filepath for script</param>
            <returns>script object</returns>   
            <exception cref="T:Purple.Scripting.CompilerErrorException">thrown if script contains compiler errors</exception>
            <exception cref="T:Purple.Scripting.ScriptingException">if assembly couldn't be created</exception>
            <exception cref="T:Purple.Exceptions.StreamException">if script file couldn't be loaded</exception>
        </member>
        <member name="M:Purple.Scripting.IScriptingEngine.Create(System.String,System.String)">
            <summary>
            creates a new script from a string containing the source
            </summary>
            <param name="className">name of object e.g. Purple.Scripts.TestScript</param>
            <param name="source">string containing source</param>
            <returns>script object</returns>   
            <exception cref="T:Purple.Scripting.CompilerErrorException">thrown if script contains compiler errors</exception>
            <exception cref="T:Purple.Scripting.ScriptingException">if assembly couldn't be created</exception>
        </member>
        <member name="M:Purple.Scripting.IScriptingEngine.Create(System.String,System.String,System.String)">
            <summary>
            creates a new script from a string containing the source
            </summary>
            <param name="className">name of object e.g. Purple.Scripts.TestScript</param>
            <param name="source">string containing source</param>
            <param name="compiledFileName">fileName of compiled script</param>
            <returns>script object</returns>   
            <exception cref="T:Purple.Scripting.CompilerErrorException">thrown if script contains compiler errors</exception>
            <exception cref="T:Purple.Scripting.ScriptingException">if assembly couldn't be created</exception>
        </member>
        <member name="P:Purple.Scripting.IScriptingEngine.References">
            <summary>
            list of references of type string (e.g. "DirectX.dll")
            </summary>
        </member>
        <member name="T:Purple.Scripting.IScriptingHost">
            <summary>
            abstract interface for creating a faked C# scripting host
            it's just faked because C# code is never interpreted but gets compiled
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.Create">
            <summary>
            creates a script
            </summary>
            <exception cref="T:Purple.Scripting.ScriptingException">if IScript object can't be created</exception>
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.LoadScriptlet(Purple.Scripting.Scriptlet)">
            <summary>
            loads a scriptlet
            </summary>
            <param name="scriptlet">scriptlet to take data from</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.CreateScriptlet">
            <summary>
            creates an scriptlet from the current state of the scripting host
            </summary>
            <returns>scriptlet</returns>
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.Load(System.IO.Stream)">
            <summary>
            loads script from a PurpleSharp script file
            </summary>
            <param name="stream">to load script from</param>
            <returns>true if loading was successful</returns>
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.Save(System.IO.Stream)">
            <summary>
            saves data into a PurpleSharp script file
            </summary>
            <param name="stream">to save data to</param>    
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.Execute">
            <summary>
            executing script
            </summary>
            <exception cref="T:Purple.Scripting.ScriptingException">if source can't be executed</exception>
        </member>
        <member name="M:Purple.Scripting.IScriptingHost.GetCombinedSource">
            <summary>
            returns the source combined with the template and references
            </summary>
            <returns>combined source</returns>
        </member>
        <member name="P:Purple.Scripting.IScriptingHost.ScriptingEngine">
            <summary>
            scriptingEngine to use to "interpret" code
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScriptingHost.References">
            <summary>
            to add assembly references like: System.DLL, ...
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScriptingHost.Namespaces">
            <summary>
            to add namespaces like: System.IO, Purple.Graphics....
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScriptingHost.TemplateSource">
            <summary>
            source which is used as template (predefined variables, ...)
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScriptingHost.Source">
            <summary>
            actual source to execute
            </summary>
        </member>
        <member name="T:Purple.Scripting.IParser">
            <summary>
            An abstract interface for script parsers.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.IParser.Load(System.String)">
            <summary>
            loads a certain script
            </summary>
            <param name="script">script to load</param>
        </member>
        <member name="M:Purple.Scripting.IParser.LoadStream(System.IO.Stream)">
            <summary>
            loads a new script from a stream
            </summary>
            <param name="stream">stream to load script from</param>
        </member>
        <member name="M:Purple.Scripting.IParser.LoadFile(System.String)">
            <summary>
            loads a script from a file
            </summary>
            <param name="fileName">name of file to load script from</param>
        </member>
        <member name="M:Purple.Scripting.IParser.Execute">
            <summary>
            execute script
            </summary>
            <returns>the variablest collection</returns>
            <exception cref="T:Purple.Scripting.ParserException">in case of a syntactical error a ParserException is thrown</exception>
            <exception cref="T:Purple.Scripting.ScannerException">in case of a textual error a ScannerException is thrown</exception>
            <exception cref="T:Purple.Scripting.SemanticException">in case of a semantical error a SemanticException is thrown</exception>
        </member>
        <member name="M:Purple.Scripting.IParser.Execute(System.String)">
            <summary>
            Executes script, without reseting the semantics.
            </summary>
            <param name="script">Script to execute.</param>
            <returns>The collection of variables.</returns>
        </member>
        <member name="T:Purple.Scripting.Parser">
            <summary>
            an abstract parser class, that implements the common functionality for script parsers
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="F:Purple.Scripting.Parser.cultureInfo">
            <summary>
            the culture info object used for parsing numbers, ...
            </summary>
        </member>
        <member name="M:Purple.Scripting.Parser.#ctor">
            <summary>
            creates a new instance of a parser object
            </summary>
        </member>
        <member name="M:Purple.Scripting.Parser.Load(System.String)">
            <summary>
            loads a certain script
            </summary>
            <param name="script">script to load</param>
        </member>
        <member name="M:Purple.Scripting.Parser.LoadStream(System.IO.Stream)">
            <summary>
            loads a new script from a stream
            </summary>
            <param name="stream">stream to load script from</param>
        </member>
        <member name="M:Purple.Scripting.Parser.LoadFile(System.String)">
            <summary>
            loads a script from a file
            </summary>
            <param name="fileName">name of file to load script from</param>
        </member>
        <member name="M:Purple.Scripting.Parser.Execute">
            <summary>
            execute script
            </summary>
            <returns>the variables collection</returns>
            <exception cref="T:Purple.Scripting.ParserException">in case of a syntactical error a ParserException is thrown</exception>
            <exception cref="T:Purple.Scripting.ScannerException">in case of a textual error a ScannerException is thrown</exception>
            <exception cref="T:Purple.Scripting.SemanticException">in case of a semantical error a SemanticException is thrown</exception>
        </member>
        <member name="M:Purple.Scripting.Parser.Execute(System.String)">
            <summary>
            Executes script, without reseting the semantics.
            </summary>
            <param name="script">Script to execute.</param>
            <returns>The collection of variables.</returns>
        </member>
        <member name="P:Purple.Scripting.Parser.Scanner">
            <summary>
            the scanner object, which is used internally by the parser for tokenization of the script
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ParserValue">
            <summary>
            A <see cref="T:Purple.Scripting.Resource.ParserValue"/> contains a value and a type.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            <para>For finding out the correct method it is necessary to know 
            the types parameters. While it is usually very easy to retrieve the type of an 
            object, it is rather hard if the parameter is <c>null</c>.</para>
            <para>For that reasons, values and types are stored in <see cref="T:Purple.Scripting.Resource.ParserValue"/> 
            objects.</para>
            </remarks>
        </member>
        <member name="F:Purple.Scripting.Resource.ParserValue.Value">
            <summary>
            The value of the <see cref="T:Purple.Scripting.Resource.ParserValue"/>.
            </summary>
        </member>
        <member name="F:Purple.Scripting.Resource.ParserValue.Type">
            <summary>
            The type of the <see cref="T:Purple.Scripting.Resource.ParserValue"/>.
            </summary>
            <remarks>
            Although the value may be null, this element contains a type. This is necessary 
            for finding the best suited method, although the parameters may be null.
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.#ctor(System.Object,System.Type)">
            <summary>
            Creates a new instance of a parser value.
            </summary>
            <param name="value">The value of the <see cref="T:Purple.Scripting.Resource.ParserValue"/>.</param>
            <param name="type">The type of the <see cref="T:Purple.Scripting.Resource.ParserValue"/>, if the 
            value is not null, the type of the value is used.</param>
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.#ctor(System.Object)">
            <summary>
            Creates a new instance of a parser value.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.#ctor">
            <summary>
            Protected standard constructor.
            </summary>    
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.IsA(System.Type)">
            <summary>
            Test if the current element isA type.
            </summary>
            <param name="type">The type to test for.</param>
            <returns>True if the current element isA type.</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.ToArray(System.Collections.ArrayList,System.Type)">
            <summary>
            Converts an <see cref="T:System.Collections.ArrayList"/> of <see cref="T:Purple.Scripting.Resource.ParserValue"/>s to an array.
            </summary>
            <param name="list"><see cref="T:System.Collections.ArrayList"/> of <see cref="T:Purple.Scripting.Resource.ParserValue"/>s.</param>
            <param name="type">The elementType of the array.</param>
            <returns>A new parserValue containing the array.</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.GetTypes(System.Collections.ArrayList)">
            <summary>
            Extracts an array of <see cref="F:Purple.Scripting.Resource.ParserValue.Type"/> objects from the parameters.
            </summary>
            <param name="parameters">List of <see cref="T:Purple.Scripting.Resource.ParserValue"/> objects.</param>
            <returns>Array of extracted <see cref="F:Purple.Scripting.Resource.ParserValue.Type"/> objects.</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ParserValue.GetValues(System.Collections.ArrayList)">
            <summary>
            Extracts an array of values from the parameters.
            </summary>
            <param name="parameters">List of <see cref="T:Purple.Scripting.Resource.ParserValue"/> objects.</param>
            <returns>Array of extracted values.</returns>
        </member>
        <member name="P:Purple.Scripting.Resource.ParserValue.IsNull">
            <summary>
            Returns true if the value of the element is null.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ParserValue.IsNotNull">
            <summary>
            Returns true if the value of the element is not null.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ParserValue.IsAString">
            <summary>
            Returns true if the current <see cref="T:Purple.Scripting.Resource.ParserValue"/> isa <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ParserValue.IsAInt">
            <summary>
            Returns true if the current <see cref="T:Purple.Scripting.Resource.ParserValue"/> isa <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ParserValue.IsAFloat">
            <summary>
            Returns true if the current <see cref="T:Purple.Scripting.Resource.ParserValue"/> isa <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ParserValue.Empty">
            <summary>
            Creates an empty <see cref="T:Purple.Scripting.Resource.ParserValue"/>
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.IResourceParser">
            <summary>
            the internal interface for resource parsers
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Resource.IResourceParser.Execute(Purple.Scripting.Resource.ResourceSemantics)">
            <summary>
            execute the script
            </summary>
            <param name="semantics">the semantics to use</param>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceParser">
            <summary>
            a resource script parser for loading all kind of resources
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceParser.#ctor">
            <summary>
            creates a new resource parser object
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceParser.FromFile(System.String)">
            <summary>
            creates a new resource parser and loads the script from a certain file
            </summary>
            <param name="fileName">fileName of script to load</param>
            <returns>a new resource parser</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceParser.Execute">
            <summary>
            execute the script
            </summary>
            <returns>The variables, that were created during the execution of the script.</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceParser.Execute(System.String)">
            <summary>
            Executes script, without reseting the semantics.
            </summary>
            <param name="script">Script to execute.</param>
            <returns>The collection of variables.</returns>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceParser.Scanner">
            <summary>
            the scanner object, which is used internally by the parser for tokenization of the script
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceScanner">
            <summary>
            a simple scanner for tokenizing resource scripts
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="T:Purple.Scripting.Scanner">
            <summary>
            an abstract class implementing the standard behaviour of a scanner
            a specialised scanner must override Next and may override NextCharacter
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="T:Purple.Scripting.IScanner">
            <summary>
            an abstract interface for a script scanner
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.IScanner.Load(System.String)">
            <summary>
            loads a certain script
            </summary>
            <param name="script">script to load</param>
        </member>
        <member name="M:Purple.Scripting.IScanner.LoadStream(System.IO.Stream)">
            <summary>
            loads a new script from a stream
            </summary>
            <param name="stream">stream to load script from</param>
        </member>
        <member name="M:Purple.Scripting.IScanner.LoadFile(System.String)">
            <summary>
            loads a script from a file
            </summary>
            <param name="fileName">name of file to load script from</param>
        </member>
        <member name="M:Purple.Scripting.IScanner.Next">
            <summary>
            moves on to the next token
            </summary>
            <returns>false if end of script or error</returns>
        </member>
        <member name="M:Purple.Scripting.IScanner.IsSymbol(System.String[])">
            <summary>
            test if currentToken is equal to one of the passed symbols
            </summary>
            <param name="args">symbols to test for</param>
            <returns>true if current token is one of the passed symbols</returns>
        </member>
        <member name="M:Purple.Scripting.IScanner.IsIdent(System.String[])">
            <summary>
            tests if current token is equal to one of the passed idents
            </summary>
            <param name="args">idents to test for</param>
            <returns>true if current token is equal to one of the passed idents</returns>
        </member>
        <member name="P:Purple.Scripting.IScanner.Line">
            <summary>
            returns the current line
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScanner.Column">
            <summary>
            returns the current column
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScanner.FileName">
            <summary>
            the fileName of the script (if any)
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScanner.Script">
            <summary>
            returns the current script
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScanner.Token">
            <summary>
            returns the current token
            </summary>
        </member>
        <member name="P:Purple.Scripting.IScanner.TokenType">
            <summary>
            type of token
            </summary>
        </member>
        <member name="F:Purple.Scripting.Scanner.ch">
            <summary>
            the variable that contains the current character
            </summary>
        </member>
        <member name="M:Purple.Scripting.Scanner.#ctor">
            <summary>
            creates a new instance of the scanner
            </summary>
        </member>
        <member name="M:Purple.Scripting.Scanner.EndOfScript">
            <summary>
            returns true if the end of the script is reached
            </summary>
            <returns>ture if the end of the script is reached</returns>
        </member>
        <member name="M:Purple.Scripting.Scanner.NextCharacter">
            <summary>
            interprets the next character
            </summary>
        </member>
        <member name="M:Purple.Scripting.Scanner.Load(System.String)">
            <summary>
            loads a new script
            </summary>
            <param name="script">script to load</param>
        </member>
        <member name="M:Purple.Scripting.Scanner.LoadStream(System.IO.Stream)">
            <summary>
            loads a new script from a stream
            </summary>
            <param name="stream">stream to load script from</param>
        </member>
        <member name="M:Purple.Scripting.Scanner.LoadFile(System.String)">
            <summary>
            loads a script from a file
            </summary>
            <param name="fileName">name of file to load script from</param>
        </member>
        <member name="M:Purple.Scripting.Scanner.Next">
            <summary>
            moves on to the next token
            </summary>
            <returns>false if end of script or error</returns>
        </member>
        <member name="M:Purple.Scripting.Scanner.IsSymbol(System.String[])">
            <summary>
            tests if currentToken is equal to one of the passed symbols
            </summary>
            <param name="args">symbols to test for</param>
            <returns>true if current token is equal to one of the passed symbols</returns>
        </member>
        <member name="M:Purple.Scripting.Scanner.IsIdent(System.String[])">
            <summary>
            tests if current token is equal to one of the passed idents
            </summary>
            <param name="args">idents to test for</param>
            <returns>true if current token is equal to one of the passed idents</returns>
        </member>
        <member name="P:Purple.Scripting.Scanner.Script">
            <summary>
            returns the current script
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scanner.Column">
            <summary>
            returns the current column
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scanner.Line">
            <summary>
            returns the current line
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scanner.Token">
            <summary>
            returns the current token
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scanner.TokenType">
            <summary>
            type of token
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scanner.FileName">
            <summary>
            the fileName of the script (if any)
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScanner.#ctor">
            <summary>
            creates a new instance of the scanner
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScanner.Next">
            <summary>
            moves on to the next Token
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceScope">
            <summary>
            a scope object for resource scripts
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.#ctor(System.String)">
            <summary>
            creates a new scope object
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.#ctor(Purple.Scripting.Resource.ResourceScope,System.String)">
            <summary>
            Creates a new child scope object.
            </summary>
            <param name="parent">The parent scope.</param>
            <param name="name">The namespace name.</param>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.#ctor(Purple.Scripting.Resource.ResourceScope,Purple.Scripting.Resource.ParserValue)">
            <summary>
            creates a new scope object
            </summary>
            <param name="parent">parent scope</param>
            <param name="linkedObject">the object that is linked to the scope (may be null)</param>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.Get(System.String)">
            <summary>
            returns the object for a given name or path
            </summary>
            <param name="name">name or path for object</param>
            <returns>the object for a given name or path</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.Set(System.String,Purple.Scripting.Resource.ParserValue)">
            <summary>
            sets a certain value
            </summary>
            <param name="name">name of variable</param>
            <param name="value">value to set</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.GetVariable(System.String,Purple.Scripting.Resource.ParserValue@)">
            <summary>
            returns the variable for a certain name
            </summary>
            <param name="name">name of variables</param>
            <param name="variable">the returned variable</param>
            <returns>true if variable was found</returns>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceScope.Contains(System.String)">
            <summary>
            test if a certain variables is within the scope
            </summary>
            <param name="name">name of variable</param>
            <returns>true if variable is contained by scope</returns>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceScope.ParserValues">
            <summary>
            Returns the <see cref="T:Purple.Scripting.Resource.ParserValue"/> objects in form of an <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceScope.Variables">
            <summary>
            Returns the variables in form of an <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceScope.LinkedObject">
            <summary>
            The object that is linked with the curren scope.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceScope.Parent">
            <summary>
            returns the parent scope
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceScope.Name">
            <summary>
            Returns the whole name of the scope (e.g. Zombie.Gfx.Gui).
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceSemantics">
            <summary>
            The implementation of the semantics of the P# resource script.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            <note type="note">This class was created by evolutionary prototyping and 
            should be reengineered sometime. ;-)</note>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceSemantics.#ctor(Purple.Scripting.IScanner)">
            <summary>
            creates a new semantics object 
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceSemantics.GetVariables">
            <summary>
            returns the variables collection
            </summary>
            <returns></returns>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.Enabled">
            <summary>
            returns true if semantics are enabled
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.GlobalScope">
            <summary>
            the global scope
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.Namespaces">
            <summary>
            access to all namespaces
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.CurrentScope">
            <summary>
            the current scope
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.TypeBinding">
            <summary>
            string to class binding
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceSemantics.AssignmentHandler">
            <summary>
            Handler that is executed during assignment.
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceSemantics.StaticClass">
            <summary>
            The class the wraps a static class.
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceSemantics.StaticClass.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of a static class.
            </summary>
            <param name="name">The token name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.StaticClass.Name">
            <summary>
            Returns the name of the token.
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ResourceSemantics.ScopeClass">
            <summary>
            The class that wraps a scope class.
            </summary>
        </member>
        <member name="M:Purple.Scripting.Resource.ResourceSemantics.ScopeClass.#ctor(System.String,Purple.Scripting.Resource.ResourceScope)">
            <summary>
            Creates a new scope class.
            </summary>
            <param name="name">Name of scope.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.ScopeClass.Name">
            <summary>
            Returns the name of the token.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Resource.ResourceSemantics.ScopeClass.Scope">
            <summary>
            Returns the scope.
            </summary>
        </member>
        <member name="T:Purple.Scripting.Resource.ShortCutAttribute">
            <summary>
            <see cref="T:System.Attribute"/> that can define a shortcut for a certain class.
            </summary>
            <remarks>
            Every class can define a shortcut type. This type replaces the "#" 
            character in resource scripts.
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Resource.ShortCutAttribute.#ctor(System.Type)">
            <summary>
            Creates a mew instance of an attribute.
            </summary>
            <param name="shortCut">The type shortcut.</param>
        </member>
        <member name="P:Purple.Scripting.Resource.ShortCutAttribute.Type">
            <summary>
            The type that is used as shortcut.
            </summary>
        </member>
        <member name="T:Purple.Scripting.TokenType">
            <summary>
            token types of an IScanner
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="F:Purple.Scripting.TokenType.EndOfScript">
            <summary>
            end of script token
            </summary>
        </member>
        <member name="F:Purple.Scripting.TokenType.Ident">
            <summary>
            the token is some kind of identifier
            </summary>
        </member>
        <member name="F:Purple.Scripting.TokenType.Symbol">
            <summary>
            the token is a certain symbol
            </summary>
        </member>
        <member name="F:Purple.Scripting.TokenType.Number">
            <summary>
            the token is a number
            </summary>
        </member>
        <member name="F:Purple.Scripting.TokenType.String">
            <summary>
            the token is a string e.g. "TestString"
            </summary>
        </member>
        <member name="T:Purple.Scripting.ScriptingHostBase">
            <summary>
            abstract base class to simplify inplementation of concrete
            scripting hosts 
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="F:Purple.Scripting.ScriptingHostBase.language">
            <summary>
            language 
            </summary>
        </member>
        <member name="F:Purple.Scripting.ScriptingHostBase.name">
            <summary>
            name of script
            </summary>
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.Execute">
            <summary>
            executing script
            </summary>    
            <exception cref="T:Purple.Scripting.ScriptingException">if source can't be executed</exception>
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.ProcessElement(System.Xml.XmlReader)">
            <summary>
            processes next element of the xml script file
            </summary>
            <param name="reader">reader filled with next element</param>
            <returns>false if processing failed</returns>
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.Load(System.IO.Stream)">
            <summary>
            loads script from a PurpleSharp script file
            </summary>
            <param name="stream">name of script file</param>
            <returns>true if loading was successful</returns>   
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.Save(System.IO.Stream)">
            <summary>
            saves data into a PurpleSharp script file
            </summary>
            <param name="stream">to save data to</param>    
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.LoadScriptlet(Purple.Scripting.Scriptlet)">
            <summary>
            loads a scriptlet
            </summary>
            <param name="scriptlet">scriptlet to take data from</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.CreateScriptlet">
            <summary>
            creates an scriptlet from the current state of the scripting host
            </summary>
            <returns>scriptlet</returns>
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.Create">
            <summary>
            creates a script
            </summary>    
            <exception cref="T:Purple.Scripting.ScriptingException">if IScript object can't be created</exception>
        </member>
        <member name="M:Purple.Scripting.ScriptingHostBase.GetCombinedSource">
            <summary>
            returns the source combined with the template and references
            </summary>    
            <returns>combined source</returns>
        </member>
        <member name="P:Purple.Scripting.ScriptingHostBase.ScriptingEngine">
            <summary>
            scriptingEngine to use to "interpret" code
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingHostBase.References">
            <summary>
            to add assembly references like: System.DLL, ...
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingHostBase.Namespaces">
            <summary>
            to add namespaces like: System.IO, Purple.Graphics....
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingHostBase.TemplateSource">
            <summary>
            source which is used as template (predefined variables, ...)
            </summary>
        </member>
        <member name="P:Purple.Scripting.ScriptingHostBase.Source">
            <summary>
            actual source to execute
            </summary>
        </member>
        <member name="T:Purple.Scripting.Scriptlet">
            <summary>
            object containing script data for easy xml integration
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Scriptlet.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Scripting.Scriptlet.Compile">
            <summary>
            compile the source (property Source)
            </summary>
        </member>
        <member name="M:Purple.Scripting.Scriptlet.Execute">
            <summary>
            executes the command/script
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scriptlet.Language">
            <summary>
            language used for source
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scriptlet.References">
            <summary>
            references (e.g. DirectX.dll)
            </summary>	
        </member>
        <member name="P:Purple.Scripting.Scriptlet.Namespaces">
            <summary>
            namespaces to use
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scriptlet.TemplateSource">
            <summary>
            source which is used as template (predefined variables, ...)
            </summary>
        </member>
        <member name="P:Purple.Scripting.Scriptlet.Source">
            <summary>
            source to execute
            </summary>
        </member>
        <member name="T:Purple.Scripting.Variables">
            <summary>
            The variables collection, that contains all "public" variables created 
            during execution of scripts.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            Public variables are those starting with an uppercase letter.
            </remarks>
        </member>
        <member name="M:Purple.Scripting.Variables.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Purple.Scripting.Variables"/> object.
            </summary>
        </member>
        <member name="M:Purple.Scripting.Variables.#ctor(System.Collections.IDictionary,System.Collections.IList,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Purple.Scripting.Variables"/> object.
            </summary>
            <remarks>
            The object uses the passed dictionary, and appends the passed namespaceName to 
            all variable queries. That way the variables can be stored once, but reused 
            for several namespaces.
            </remarks>
            <param name="dictionary">The dictionary to use.</param>
            <param name="variables">The variables in an ArrayList.</param>
            <param name="namespaceName">The name of the base namespace.</param>
        </member>
        <member name="M:Purple.Scripting.Variables.GetByIndex(System.Int32)">
            <summary>
            Returns the DictionaryEntry for a certain index.
            </summary>
            <param name="index">The index to return variable for.</param>
            <returns>The DictionaryEntry for a certain index.</returns>
        </member>
        <member name="M:Purple.Scripting.Variables.Add(System.String,System.Collections.IDictionary)">
            <summary>
            Adds a certain number of new objects into a given namespace name.
            </summary>
            <param name="namespaceName">Name of the namespace. (Use "" for the global namespace.</param>
            <param name="elements">Collection of objects.</param>
        </member>
        <member name="M:Purple.Scripting.Variables.GetNamespace(System.String)">
            <summary>
            Return the <see cref="T:Purple.Scripting.Variables"/> collection for a certain namespace.
            </summary>
            <param name="namespaceName">Name of the namespace.</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Scripting.Variables.Contains(System.String)">
            <summary>
            Returns true if the collection contains a variable with the given name.
            </summary>
            <param name="name">Name of variable.</param>
            <returns>True if the collection contains a variable with the given name.</returns>
        </member>
        <member name="M:Purple.Scripting.Variables.GetEnumerator">
            <summary>
            Returns the enumerator object.
            </summary>
            <returns>The enumerator object.</returns>
        </member>
        <member name="P:Purple.Scripting.Variables.Item(System.String)">
            <summary>
            Get variable by name.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Variables.Item(System.Int32)">
            <summary>
            Returns the value for a certain index.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Variables.Length">
            <summary>
            Length of the collection.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Variables.Keys">
            <summary>
            Returns all keys of the collection.
            </summary>
        </member>
        <member name="P:Purple.Scripting.Variables.Values">
            <summary>
            Returns all values of the collection.
            </summary>
        </member>
        <member name="T:Purple.Scripting.VariablesEnumerator">
            <summary>
            The special enumerator object for enumerating <see cref="T:Purple.Scripting.Variables"/>
             objects.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.2</para>
            </remarks>
        </member>
        <member name="M:Purple.Scripting.VariablesEnumerator.#ctor(System.String,System.Collections.IEnumerator)">
            <summary>
            Creates a new enumerator object.
            </summary>
            <param name="baseNamespace">The base namespace.</param>
            <param name="enumerator">The enumerator object to wrap.</param>
        </member>
        <member name="M:Purple.Scripting.VariablesEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:Purple.Scripting.VariablesEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:Purple.Scripting.VariablesEnumerator.Key">
            <summary>
            When implemented by a class, gets the key of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Purple.Scripting.VariablesEnumerator.Value">
            <summary>
            When implemented by a class, gets the value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Purple.Scripting.VariablesEnumerator.Entry">
            <summary>
            When implemented by a class, gets both the key and the value of the current dictionary entry.
            </summary>
        </member>
        <member name="P:Purple.Scripting.VariablesEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:Purple.Serialization.BinarySerializeCodec">
            <summary>
            Implementation of the <see cref="T:Purple.Serialization.ISerializeCodec"/> interface 
            for serializing objects to binary data.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="T:Purple.Serialization.ISerializeCodec">
            <summary>
            An abstract interface for a codec that defines the way a SerializeStream
            gets serialized.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Init(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes the codec with the stream.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="write">Reading or writing data?</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Write(System.String,System.Int32)">
            <summary>
            Write an interger into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The integer to write.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Write(System.String,System.Int64)">
            <summary>
            Write a long into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The long to write.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Write(System.String,System.String)">
            <summary>
            Write a string into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="str">The string to write.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Write(System.String,System.Single)">
            <summary>
            Write a float into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Write(System.String,System.Boolean)">
            <summary>
            Write a bool into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Write(System.String,System.Type)">
            <summary>
            Write a Type into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="type">The type to write.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.WriteEnum(System.String,System.Object)">
            <summary>
            Writes an enum into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="value">The enumeration value.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadInt(System.String)">
            <summary>
            Reads an integer from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read integer.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadLong(System.String)">
            <summary>
            Reads a long from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read long value.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadFloat(System.String)">
            <summary>
            Reads a float from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read float.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadBool(System.String)">
            <summary>
            Reads a bool from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read bool.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadString(System.String)">
            <summary>
            Reads a string from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read string.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadEnum(System.String,System.Type)">
            <summary>
            Reads an enum from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <param name="type">The enumeration type.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.IsSimpleString(System.String)">
            <summary>
            Tests if the next element is a simple string or in object form.
            </summary>
            <param name="name">Name of element.</param>
            <returns>True if next element is a simple string.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.ReadType(System.String)">
            <summary>
            Reads a type from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read type.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.BeginWriteObject(System.String,System.Type)">
            <summary>
            Starts with a new object.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="type">Type of the object.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.BeginWriteObject(System.String)">
            <summary>
            Starts with a new object.
            </summary>
            <param name="typeName">Name of the variable.</param>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.EndWriteObject">
            <summary>
            Ends with a new object.
            </summary>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.BeginReadObject(System.String)">
            <summary>
            Starts reading the next object.
            </summary>
            <param name="name">Name of the variable to read - or null to read next.</param>
            <returns>Returns the type of the next object.</returns>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.EndReadObject">
            <summary>
            Ends reading an object.
            </summary>
        </member>
        <member name="M:Purple.Serialization.ISerializeCodec.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Init(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes the codec with the stream.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="write">Reading or writing data?</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Save(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given object into the given stream.
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="stream">Target stream.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Save(System.Object,System.String)">
            <summary>
            Serializes the given object into the given file.
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="fileName">Target file</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Load(System.String)">
            <summary>
            Loads an object from a file.
            </summary>
            <param name="fileName">Name of file to load object from.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Load(System.IO.Stream)">
            <summary>
            Loads an object from a file.
            </summary>
            <param name="stream">Stream to load object from.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Write(System.String,System.Int32)">
            <summary>
            Write an interger into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The integer to write.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Write(System.String,System.Int64)">
            <summary>
            Write a long into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The long to write.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Write(System.String,System.String)">
            <summary>
            Write a string into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="str">The string to write.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Write(System.String,System.Single)">
            <summary>
            Write a float into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Write(System.String,System.Boolean)">
            <summary>
            Write a bool into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.WriteEnum(System.String,System.Object)">
            <summary>
            Writes an enum into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="value">The enumeration value.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Write(System.String,System.Type)">
            <summary>
            Write a Type into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="type">The type to write.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.BeginWriteObject(System.String,System.Type)">
            <summary>
            Starts with a new object.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="type">Type of the object.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.BeginWriteObject(System.String)">
            <summary>
            Starts with a new object.
            </summary>
            <param name="typeName">Name of the variable.</param>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.EndWriteObject">
            <summary>
            Ends with a new object.
            </summary>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.BeginReadObject(System.String)">
            <summary>
            Starts reading the next object.
            </summary>
            <param name="name">Name of the variable.</param>
            <returns>Returns the type of the next object.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.EndReadObject">
            <summary>
            Ends reading an object.
            </summary>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.IsSimpleString(System.String)">
            <summary>
            Tests if the next element is a simple string or in object form.
            </summary>
            <param name="name">Name of element.</param>
            <returns>True if next element is a simple string.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadInt(System.String)">
            <summary>
            Reads an integer from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read integer.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadLong(System.String)">
            <summary>
            Reads a long from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read long value.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadFloat(System.String)">
            <summary>
            Reads a float from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read float.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadType(System.String)">
            <summary>
            Reads a type from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read type.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadString(System.String)">
            <summary>
            Reads a string from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read string.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadBool(System.String)">
            <summary>
            Reads a bool from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read bool.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.ReadEnum(System.String,System.Type)">
            <summary>
            Reads an enum from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <param name="type">The enumeration type.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Purple.Serialization.BinarySerializeCodec.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Purple.Serialization.BinarySerializeCodec.Stream">
            <summary>
            Stream containing the serialized data;
            </summary>
        </member>
        <member name="T:Purple.Serialization.CannotSerializeAttribute">
            <summary>
            Attribute the marks an object that it can't be serialized.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            Classes of the Purple.Serialization.Serializers namespace can't be 
            serialized - except if they are explicitely replaced by the Serializer 
            or ReferenceManager.
            In addition, these classes are ignored by the ReferenceManager.
            </remarks>
        </member>
        <member name="M:Purple.Serialization.CannotSerializeAttribute.#ctor">
            <summary>
            Serialize Attribute defines how objects are serialized.
            </summary>		
        </member>
        <member name="T:Purple.Serialization.ReferenceManager">
            <summary>
            The <see cref="T:Purple.Serialization.ReferenceManager"/> is used by the <see cref="T:Purple.Serialization.Serializer"/> and 
            is used to ensure that objects aren't serialized twice but just the references.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Purple.Serialization.ReferenceManager"/>.
            </summary>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.Reset">
            <summary>
            Resets the manager.
            </summary>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.Serialize(System.Object)">
            <summary>
            Checks if the object was already serialized and if needed replaces it 
            with a <see cref="T:Purple.Serialization.Serializers.Reference"/> object.
            </summary>
            <param name="obj">The object to check.</param>
            <returns>The object to serialize.</returns>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.Deserialize(System.Object)">
            <summary>
            Checks if the object is a <see cref="T:Purple.Serialization.Serializers.Reference"/> object and 
            if needed replaces it with the real object.
            </summary>
            <param name="obj">The object to check for.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.Reserve">
            <summary>
            Reserves and id for an object that isn't yet constructed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.Set(System.Int32,System.Object)">
            <summary>
            Assigns an object to an already reserved slot.
            </summary>
            <param name="id">The reserved slot.</param>
            <param name="obj">The object to assign.</param>
            <returns>The assigned object.</returns>
        </member>
        <member name="M:Purple.Serialization.ReferenceManager.GetReference(System.Int32)">
            <summary>
            Returns the reference for a certain id.
            </summary>
            <param name="id">The id to return object for.</param>
            <returns>The reference for a certain id.</returns>
        </member>
        <member name="T:Purple.Serialization.SerializeAttribute">
            <summary>
            Attribute the marks a certain property or field that it should be 
            serialized by the AttributeSerializer.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.SerializeAttribute.#ctor">
            <summary>
            Serialize Attribute defines how objects are serialized.
            </summary>		
        </member>
        <member name="M:Purple.Serialization.SerializeAttribute.#ctor(System.Boolean)">
            <summary>
            Serialize Attribute defines how objects are serialized.
            </summary>		
            <param name="primitive">Flag that indicates if an object should be saved as primitive or as a object.</param>
        </member>
        <member name="P:Purple.Serialization.SerializeAttribute.Primitive">
            <summary>
            Flag that indicates if an object should be saved as primitive or as a object.
            </summary>
        </member>
        <member name="T:Purple.Serialization.Serializer">
            <summary>
            To be inserted!
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.Serializer.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Purple.Serialization.Serializer.GetTypeId(System.Type)">
            <summary>
            Returns the id of a certain type.
            </summary>
            <param name="type">Type to return id for.</param>
            <returns>The id for a certain type.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.GetTypeFromId(System.Int32)">
            <summary>
            Returns the type of a certain id.
            </summary>
            <param name="id">The id to retrieve type for.</param>
            <returns>The type for a certain id.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.GetTypeString(System.Type)">
            <summary>
            Returns the type name for a certain type.
            </summary>
            <param name="type">The type to retrieve the name for.</param>
            <returns>The name of a certain type.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.GetTypeFromString(System.String)">
            <summary>
            Returns the type for a certain typeName.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>The type for the given typeName.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.Save(System.Object,System.IO.Stream,Purple.Serialization.ISerializeCodec)">
            <summary>
            Serializes the given object into the given stream.
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="stream">Target stream.</param>
            <param name="codec">The codec to use.</param>
        </member>
        <member name="M:Purple.Serialization.Serializer.Save(System.Object,System.String,Purple.Serialization.ISerializeCodec)">
            <summary>
            Serializes the given object into the given file.
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="fileName">Target file</param>
            <param name="codec">The codec to use.</param>
        </member>
        <member name="M:Purple.Serialization.Serializer.Load(System.String,Purple.Serialization.ISerializeCodec)">
            <summary>
            Loads an object from a file.
            </summary>
            <param name="fileName">Name of file to load object from.</param>
            <param name="codec">The codec to use for loading the file.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.Load(System.IO.Stream,Purple.Serialization.ISerializeCodec)">
            <summary>
            Loads an object from a file.
            </summary>
            <param name="stream">Stream to load object from.</param>
            <param name="codec">The codec to use for loading the file.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.Load(System.Byte[],Purple.Serialization.ISerializeCodec)">
            <summary>
            Loads an object from a byte array.
            </summary>
            <param name="data">The data containing the object.</param>
            <param name="codec">The codec to use for serialization.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Purple.Serialization.Serializer.AddBinding(System.Type,System.Int32,System.String,Purple.Serialization.ISerializer)">
            <summary>
            Add a new type to id binding.
            </summary>
            <param name="type">The type to bind to a certain id.</param>
            <param name="id">The id to use for a certain type.</param>
            <param name="name">The typeName to use for a certain binding.</param>
            <param name="serializer">The serializer object.</param>
        </member>
        <member name="M:Purple.Serialization.Serializer.AddBinding(System.Type,System.Int32,System.String)">
            <summary>
            Add a new type to id binding.
            </summary>
            <param name="type">The type to bind to a certain id.</param>
            <param name="id">The id to use for a certain type.</param>
            <param name="name">The typeName to use for a certain binding.</param>
        </member>
        <member name="M:Purple.Serialization.Serializer.AddBinding(System.Type,System.Int32)">
            <summary>
            Add a new type to id binding.
            </summary>
            <param name="type">The type to bind to a certain id.</param>
            <param name="id">The id to use for a certain type.</param>
        </member>
        <member name="P:Purple.Serialization.Serializer.Instance">
            <summary>
            Returns the singleton instance of the <see cref="T:Purple.Serialization.Serializer"/>.
            </summary>
        </member>
        <member name="P:Purple.Serialization.Serializer.Serializers">
            <summary>
            Table that maps types to serializers.
            </summary>
        </member>
        <member name="T:Purple.Serialization.Serializers.Array">
            <summary>
            An object that is used for storing arrays.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.Serializers.Array.#ctor(System.Array)">
            <summary>
            Creates a new instance of a wrapper for an array.
            </summary>
            <param name="array">Array to wrap.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.Array.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.Array.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Purple.Serialization.Serializers.Attribute">
            <summary>
            A implementation of the <see cref="T:Purple.Serialization.ISerializer"/> interface that 
            allows to serialize objects by reading out their Serialize attributes.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.Serializers.Attribute.#ctor">
            <summary>
            Private constructor
            </summary>
        </member>
        <member name="M:Purple.Serialization.Serializers.Attribute.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.Attribute.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:Purple.Serialization.Serializers.Attribute.Instance">
            <summary>
            Returns the singleton instance of an <see cref="T:Purple.Serialization.Serializers.Attribute"/>.
            </summary>
        </member>
        <member name="T:Purple.Serialization.Serializers.Primitive">
            <summary>
            The serializer for pritmitive types.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            This class could be split up into a serializer class per primitive. 
            That could speed up the serialization process a little bit.
            </remarks>
        </member>
        <member name="M:Purple.Serialization.Serializers.Primitive.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.Primitive.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:Purple.Serialization.Serializers.Primitive.Instance">
            <summary>
            Returns the singleton instance of an <see cref="T:Purple.Serialization.Serializers.Primitive"/>.
            </summary>
        </member>
        <member name="T:Purple.Serialization.Serializers.Reference">
            <summary>
            An object that is used for storing references.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.Serializers.Reference.#ctor(System.Int32)">
            <summary>
            Creates a new object holding a reference to another object.
            </summary>
            <param name="id">The id to of the object to create <see cref="T:Purple.Serialization.Serializers.Reference"/> for.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.Reference.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.Reference.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="P:Purple.Serialization.Serializers.Reference.Id">
            <summary>
            Returns the id of the referenced object that can be resolved via 
            the ReferenceManager.
            </summary>
        </member>
        <member name="P:Purple.Serialization.Serializers.Reference.Null">
            <summary>
            Returns the reference object for 
            </summary>
        </member>
        <member name="T:Purple.Serialization.Serializers.String">
            <summary>
            An object that is used for storing strings.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.Serializers.String.#ctor(System.String)">
            <summary>
            Creates a new instance of a wrapper for a string.
            </summary>
            <param name="str">String to wrap.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.String.Serialize(System.Object,Purple.Serialization.SerializeStream)">
            <summary>
            Serializes the given object.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="stream">Stream to fill with data.</param>
        </member>
        <member name="M:Purple.Serialization.Serializers.String.Deserialize(System.Type,Purple.Serialization.SerializeStream)">
            <summary>
            Deserializes the given object.
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="type">The type of the object to create.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Purple.Serialization.SerializeStream">
            <summary>
            The stream containing the data of the serialized element.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.#ctor(Purple.Serialization.ISerializeCodec,System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new SerializeStream object.
            </summary>
            <param name="codec">The codec to use.</param>
            <param name="stream">The target or source stream.</param>
            <param name="write">Flag that indicates if the serializeStream should be used for reading or writing.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Save(System.Object)">
            <summary>
            Saves the object to the stream.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Load">
            <summary>
            Loads the object from the stream.
            </summary>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.Type)">
            <summary>
            Writes a given Type to the stream.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The type to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.Int32)">
            <summary>
            Write an interger to the stream.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="num">The integer to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.Int64)">
            <summary>
            Writes a long to the stream.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="num">The long to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.String)">
            <summary>
            Write a string into the stream.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="str">The string to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.Single)">
            <summary>
            Write a float to the stream.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.Boolean)">
            <summary>
            Write a bool to the stream.
            </summary>
            <param name="name">Name of the field.</param>
            <param name="num">The bool to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.WriteEnum(System.String,System.Object)">
            <summary>
            Writes an enum into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="value">The enumeration value.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Write(System.String,System.Object)">
            <summary>
            Writes an object (or primitive).
            </summary>
            <param name="name">Name of object.</param>
            <param name="obj">Object to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.WriteAsObject(System.String,System.Object)">
            <summary>
            Writes object but also primitve types as an object.
            </summary>
            <param name="name">Name of field.</param>
            <param name="obj">Object to write.</param>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadInt(System.String)">
            <summary>
            Reads an integer from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read integer.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadLong(System.String)">
            <summary>
            Reads a long from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read long value.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadFloat(System.String)">
            <summary>
            Reads a float from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read float.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadBool(System.String)">
            <summary>
            Reads a bool from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read bool.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadString(System.String)">
            <summary>
            Reads a string from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read string.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadEnum(System.String,System.Type)">
            <summary>
            Reads an enum from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <param name="type">The enumeration type.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadType(System.String)">
            <summary>
            Reads a type from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read type.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Read(System.String,System.Type)">
            <summary>
            Reads an object (or primitive) from the stream.
            </summary>
            <param name="name">Name of field.</param>
            <param name="type">The type of the field.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.ReadObject(System.String)">
            <summary>
            Deserializes an object of a given type.
            </summary>
            <param name="name">Name of object to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.EnterObject(System.String)">
            <summary>
            Enters an object.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.LeaveObject">
            <summary>
            Leaves an object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Purple.Serialization.SerializeStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Purple.Serialization.SerializeStream.ReferenceManager">
            <summary>
            Returns the reference manager for the current stream.
            </summary>
        </member>
        <member name="T:Purple.Serialization.XmlSerializeCodec">
            <summary>
            Implementation of the <see cref="T:Purple.Serialization.ISerializeCodec"/> interface 
            for serializing objects to xml files.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>
              This one is slow but very useful for finding serialization bugs.
              For faster serialization I suggest to use the <see cref="T:Purple.Serialization.BinarySerializeCodec"/>.
            </remarks>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Save(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given object into the given stream.
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="stream">Target stream.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Save(System.Object,System.String)">
            <summary>
            Serializes the given object into the given file.
            </summary>
            <param name="obj">Object to serialize</param>
            <param name="fileName">Target file</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Load(System.String)">
            <summary>
            Loads an object from a file.
            </summary>
            <param name="fileName">Name of file to load object from.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Load(System.IO.Stream)">
            <summary>
            Loads an object from a file.
            </summary>
            <param name="stream">Stream to load object from.</param>
            <returns>The loaded object.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Init(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes the codec with the stream.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="write">Reading or writing data?</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Write(System.String,System.Int32)">
            <summary>
            Write an interger into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The integer to write.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Write(System.String,System.Int64)">
            <summary>
            Write a long into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The long to write.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Write(System.String,System.String)">
            <summary>
            Write a string into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="str">The string to write.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Write(System.String,System.Single)">
            <summary>
            Write a float into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.WriteEnum(System.String,System.Object)">
            <summary>
            Writes an enum into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="value">The enumeration value.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Write(System.String,System.Boolean)">
            <summary>
            Write a bool into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="num">The float to write.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Write(System.String,System.Type)">
            <summary>
            Write a Type into the stream.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="type">The type to write.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.BeginWriteObject(System.String,System.Type)">
            <summary>
            Starts with a new object.
            </summary>
            <param name="name">Name of the variable.</param>
            <param name="type">Type of the object.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.BeginWriteObject(System.String)">
            <summary>
            Starts with a new object.
            </summary>
            <param name="typeName">Name of the variable.</param>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.EndWriteObject">
            <summary>
            Ends with a new object.
            </summary>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.IsSimpleString(System.String)">
            <summary>
            Tests if the next element is a simple string or in object form.
            </summary>
            <param name="name">Name of element.</param>
            <returns>True if next element is a simple string.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.BeginReadObject(System.String)">
            <summary>
            Starts reading the next object.
            </summary>
            <param name="name">Name of the variable.</param>
            <returns>Returns the type of the next object.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.EndReadObject">
            <summary>
            Ends reading an object.
            </summary>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadInt(System.String)">
            <summary>
            Reads an integer from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read integer.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadLong(System.String)">
            <summary>
            Reads a long from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read long value.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadFloat(System.String)">
            <summary>
            Reads a float from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read float.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadBool(System.String)">
            <summary>
            Reads a bool from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read bool.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadType(System.String)">
            <summary>
            Reads a type from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read type.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadString(System.String)">
            <summary>
            Reads a string from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <returns>The read string.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.ReadEnum(System.String,System.Type)">
            <summary>
            Reads an enum from the stream.
            </summary>
            <param name="name">Name of the element to read.</param>
            <param name="type">The enumeration type.</param>
            <returns>The read object.</returns>
        </member>
        <member name="M:Purple.Serialization.XmlSerializeCodec.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Purple.Serialization.XmlSerializeCodec.Stream">
            <summary>
            Stream containing the serialized data;
            </summary>
        </member>
        <member name="T:Purple.Sound.Channel">
            <summary>
            Class that represents a certain sound channel. Certain attributes like 
            volume, pan and more can be applied on a per channel basis.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.Channel.#ctor(System.String,Purple.Sound.ISoundEngine)">
            <summary>
            Creates a new channel.
            </summary>
            <param name="name">Name of the channel.</param>
            <param name="engine">The sound engine of the current channel.</param>
        </member>
        <member name="M:Purple.Sound.Channel.Load(System.String)">
            <summary>
            Loads a specific sound file into memory.
            </summary>
            <param name="fileName">Path of file.</param>
            <returns>The loaded sound object.</returns>
            <exception cref="T:Purple.Exceptions.StreamException">If file couldn't be loaded.</exception>
            <exception cref="T:Purple.Sound.SoundException">If sound format isn't supported (extension).</exception>
        </member>
        <member name="M:Purple.Sound.Channel.Load(System.IO.Stream,System.String)">
            <summary>
            Loads a specific sound file into memory.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> containing data.</param>
            <param name="fileName">FileName or extension =&gt; "Test.mp3" or ".mp3".</param>
            <returns>The loaded sound object.</returns>
            <exception cref="T:Purple.Exceptions.StreamException">Thrown if stream is invalid.</exception>
            <exception cref="T:Purple.Sound.SoundException">Thrown if sound format isn't supported (extension).</exception>
        </member>
        <member name="M:Purple.Sound.Channel.LoadStream(System.String)">
            <summary>
            Loads a specific sound file part by part (on demand).
            </summary>
            <param name="fileName">Path of file.</param>
            <returns>The loaded sound object.</returns>
            <exception cref="T:Purple.Exceptions.StreamException">If file couldn't be loaded.</exception>
            <exception cref="T:Purple.Sound.SoundException">If sound format isn't supported (extension).</exception>
        </member>
        <member name="M:Purple.Sound.Channel.LoadStream(System.IO.Stream,System.String)">
            <summary>
            Loads a specific sound file part by part (on demand).
            </summary>
            <param name="stream">Stream containing data.</param>
            <param name="fileName">FileName or extension =&gt; "Test.mp3" or ".mp3".</param>
            <returns>The loaded sound object.</returns>
            <exception cref="T:Purple.Exceptions.StreamException">Thrown if stream is invalid.</exception>
            <exception cref="T:Purple.Sound.SoundException">Thrown if sound format isn't supported (extension).</exception>
        </member>
        <member name="M:Purple.Sound.Channel.Add(Purple.Sound.ISoundObject)">
            <summary>
            Adds a soundobject to the channel.
            </summary>
            <param name="soundObject">The sound object to add.</param>
        </member>
        <member name="M:Purple.Sound.Channel.Remove(Purple.Sound.ISoundObject)">
            <summary>
            Removes a soundobject from the channel.
            </summary>
            <param name="soundObject">SoundObject to remove.</param>
        </member>
        <member name="P:Purple.Sound.Channel.Name">
            <summary>
            Name of the channel.
            </summary>
        </member>
        <member name="P:Purple.Sound.Channel.Pan">
            <summary>
            Gets or sets the stereo panning value of this sound.
            </summary>
            <value>A value between -1.0 (left) and 1.0 (right), </value>
        </member>
        <member name="P:Purple.Sound.Channel.Volume">
            <summary>
            Gets or sets the volume value of this sound.
            </summary>
            <value>A value between 0.0 (silent) and 1.0f (full volume), </value>
        </member>
        <member name="T:Purple.Sound.ICDObject">
            <summary>
            CD specific extensions for ISoundObject
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="T:Purple.Sound.ISoundObject">
            <summary>
            abstract interface for a certain SoundObject (MOD, WAV, MP3, MIDI, CD, ...)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.ISoundObject.Play">
            <summary>
            plays a certain soundObject from it's current position
            </summary>
            <exception cref="T:Purple.Sound.SoundException">if music can't be played</exception>
        </member>
        <member name="M:Purple.Sound.ISoundObject.Stop">
            <summary>
            Stops playing of a certain soundObject
            </summary>
        </member>
        <member name="M:Purple.Sound.ISoundObject.Pause(System.Boolean)">
            <summary>
            Pause or unpause the sound
            </summary>
            <param name="paused">flag indicating of sound should be paused</param>
        </member>
        <member name="M:Purple.Sound.ISoundObject.IsPlaying">
            <summary>
            Returns true if the sound object is currently playing.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Purple.Sound.ISoundObject.Paused">
            <summary>
            returns true if song is paused
            </summary>
        </member>
        <member name="P:Purple.Sound.ISoundObject.Pan">
            <summary>
            Gets or sets the stereo panning value of this sound.
            </summary>
            <value>A value between -1.0 (left) and 1.0 (right), </value>
        </member>
        <member name="P:Purple.Sound.ISoundObject.Volume">
            <summary>
            Gets or sets the volume value of this sound.
            </summary>
            <value>A value between 0.0 (silent) and 1.0f (full volume), </value>
        </member>
        <member name="P:Purple.Sound.ISoundObject.Channel">
            <summary>
            Returns the current channel, the sound object belongs to.
            </summary>
        </member>
        <member name="T:Purple.Sound.ISampleObject">
            <summary>
            sample specific extensions for ISoundObject
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="P:Purple.Sound.ISampleObject.Looping">
            <summary>
            Enable disable looping for the current sample.
            </summary>
        </member>
        <member name="T:Purple.Sound.ISoundEngine">
            <summary>
            abstract interface for a certain soundEngine (fMod, Miles Sound System, BASS, ..)
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.Init(System.Int32)">
            <summary>
            initializes the soundEngine
            </summary>
            <param name="mixRate">Output rate in Hz</param>
            <exception cref="T:Purple.Sound.SoundException">thrown if initialization failed</exception>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.Load(System.String)">
            <summary>
            loads a specific sound file into memory
            </summary>
            <param name="fileName">path of file</param>
            <returns>the loaded sound object</returns>
            <exception cref="T:Purple.Exceptions.StreamException">if file couldn't be loaded</exception>
            <exception cref="T:Purple.Sound.SoundException">if sound format isn't supported (extension)</exception>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.Load(System.IO.Stream,System.String)">
            <summary>
            loads a specific sound file into memory
            </summary>
            <param name="stream">stream containing data</param>
            <param name="fileName">fileName or extension =&gt; "Test.mp3" or ".mp3"</param>
            <returns>the loaded sound object</returns>
            <exception cref="T:Purple.Exceptions.StreamException">if stream is invalid</exception>
            <exception cref="T:Purple.Sound.SoundException">if sound format isn't supported (extension)</exception>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.LoadStream(System.String)">
            <summary>
            loads a specific sound file part by part (on demand)
            </summary>
            <param name="fileName">path of file</param>
            <returns>the loaded sound object</returns>
            <exception cref="T:Purple.Exceptions.StreamException">if file couldn't be loaded</exception>
            <exception cref="T:Purple.Sound.SoundException">if sound format isn't supported (extension)</exception>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.LoadStream(System.IO.Stream,System.String)">
            <summary>
            loads a specific sound file part by part (on demand)
            </summary>
            <param name="stream">stream containing data</param>
            <param name="fileName">fileName or extension =&gt; "Test.mp3" or ".mp3"</param>
            <returns>the loaded sound object</returns>
            <exception cref="T:Purple.Exceptions.StreamException">if stream is invalid</exception>
            <exception cref="T:Purple.Sound.SoundException">if sound format isn't supported (extension)</exception>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.GetCD">
            <summary>
            get the cd object for accessing the main cd drive
            </summary>
            <returns>the retrieved sound object</returns>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.GetCD(System.String)">
            <summary>
            get the cd object for accessing a certain cd drive
            </summary>
            <param name="drive">drive "d:", "e:", ...</param>
            <returns>the retrieved sound object</returns>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.Supports(System.String)">
            <summary>
            checks if a certain sound file is supported by this SoundEngine
            </summary>
            <param name="fileName">the whole filename or the extension ("test.mp3" or just ".mp3")</param>
            <returns>true if supported - false if not</returns>
        </member>
        <member name="M:Purple.Sound.ISoundEngine.SupportsStreaming(System.String)">
            <summary>
            checks if streaming is supported for a certain sound file
            </summary>
            <param name="fileName">the whole filename or the extension ("test.mp3" or just ".mp3")</param>
            <returns>true if supported - false if not</returns>
        </member>
        <member name="T:Purple.Sound.IStreamObject">
            <summary>
            sound stream specific extensions for ISoundObject
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="P:Purple.Sound.IStreamObject.Looping">
            <summary>
            Enable disable looping for the current sample.
            </summary>
        </member>
        <member name="T:Purple.Sound.SoundEngine">
            <summary>
            Api independent class provinding sound engine functionality.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Last Update: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.SoundEngine.#ctor(Purple.Sound.ISoundEngine)">
            <summary>
            creates a new instance of a soundEngine object
            </summary>
            <param name="engine">engine to wrap</param>
        </member>
        <member name="M:Purple.Sound.SoundEngine.AddChannel(System.String)">
            <summary>
            Adds a channel.
            </summary>
            <param name="name">Name of the channel.</param>
        </member>
        <member name="M:Purple.Sound.SoundEngine.RemoveChannel(System.String)">
            <summary>
            Removes a channel with a certain name.
            </summary>
            <param name="name">Name of the channel.</param>
        </member>
        <member name="M:Purple.Sound.SoundEngine.Init(System.Int32)">
            <summary>
            Initializes the <see cref="T:Purple.Sound.SoundEngine"/>.
            </summary>
            <param name="mixRate">Output rate in Hz</param>
            <exception cref="T:Purple.Sound.SoundException">Thrown if initialization failed</exception>
        </member>
        <member name="M:Purple.Sound.SoundEngine.Init">
            <summary>
            Initializes the <see cref="T:Purple.Sound.SoundEngine"/> with 44100 Hz.
            </summary>
            <exception cref="T:Purple.Sound.SoundException">Thrown if initialization failed.</exception>
        </member>
        <member name="M:Purple.Sound.SoundEngine.Close">
            <summary>
            Shuts down the <see cref="T:Purple.Sound.SoundEngine"/>.
            </summary>
        </member>
        <member name="M:Purple.Sound.SoundEngine.GetCD">
            <summary>
            Returns the <see cref="T:Purple.Sound.ICDObject"/> for accessing the main cd drive.
            </summary>
            <returns>The retrieved sound object.</returns>
        </member>
        <member name="M:Purple.Sound.SoundEngine.GetCD(System.String)">
            <summary>
            Returns the <see cref="T:Purple.Sound.ICDObject"/> for accessing a certain cd drive.
            </summary>
            <param name="drive">Drive "d:", "e:", ...</param>
            <returns>The retrieved sound object.</returns>
        </member>
        <member name="M:Purple.Sound.SoundEngine.Supports(System.String)">
            <summary>
            Checks if a certain sound file is supported by the <see cref="T:Purple.Sound.SoundEngine"/>.
            </summary>
            <param name="fileName">The whole filename or the extension ("test.mp3" or just ".mp3").</param>
            <returns>True if supported - false if not.</returns>
        </member>
        <member name="M:Purple.Sound.SoundEngine.SupportsStreaming(System.String)">
            <summary>
            Checks if streaming is supported for a certain sound file.
            </summary>
            <param name="fileName">The whole filename or the extension ("test.mp3" or just ".mp3").</param>
            <returns>True if supported - false if not.</returns>
        </member>
        <member name="P:Purple.Sound.SoundEngine.Item(System.Int32)">
            <summary>
            Returns a channel at a certain index.
            </summary>
        </member>
        <member name="P:Purple.Sound.SoundEngine.Item(System.String)">
            <summary>
            Returns a channel via its name.
            </summary>
        </member>
        <member name="P:Purple.Sound.SoundEngine.Instance">
            <summary>
            Returns the singleton instance of <see cref="T:Purple.Sound.SoundEngine"/>.
            </summary>
        </member>
        <member name="T:Purple.Sound.SoundException">
            <summary>
            exception which is thrown in case of Sound errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.SoundException.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Sound.SoundException.#ctor(System.String)">
            <summary>
            constructor taking string describing reasons for exception
            </summary>
            <param name="description">Description why exception is thrown</param>
        </member>
        <member name="T:Purple.Sound.StreamProvider">
            <summary>
            provides sound stream data by reading from from an IO.Stream
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.StreamProvider.#ctor(System.IO.Stream)">
            <summary>
            constructor taking an ioStream for data input
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Purple.Sound.StreamProvider.OnProvide(System.Byte[])">
            <summary>
            function which is called when sound stream requests data
            </summary>
            <param name="data">array to fill with sound data</param>
            <returns>false if end of stream or an error occured</returns>
        </member>
        <member name="T:Purple.Sound.VolumeFade">
            <summary>
            Class for fading the volume of a certain ISoundObject.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Sound.VolumeFade.#ctor(Purple.Sound.ISoundObject,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Creates a new VolumeFade action object.
            </summary>
            <param name="soundObject">The soundObject to fade.</param>
            <param name="startVolume">The start volume.</param>
            <param name="endVolume">The target volume.</param>
            <param name="time">The fading time.</param>
            <param name="stopSound">Flag that indicates if playing of the soundObject should be stopped at the end.</param>
        </member>
        <member name="M:Purple.Sound.VolumeFade.FadeIn(Purple.Sound.ISoundObject,System.Single)">
            <summary>
            Creates a VolumeFade action for fading in a certain soundObject.
            </summary>
            <param name="soundObject">The soundObject to fade in.</param>
            <param name="time">The fading time.</param>
        </member>
        <member name="M:Purple.Sound.VolumeFade.FadeIn(Purple.Sound.ISoundObject,System.Single,System.Single)">
            <summary>
            Creates a VolumeFade action for fading in a certain soundObject.
            </summary>
            <param name="soundObject">The soundObject to fade in.</param>
            <param name="time">The fading time.</param>
            <param name="endVolume">The destination volume.</param>
        </member>
        <member name="M:Purple.Sound.VolumeFade.FadeOut(Purple.Sound.ISoundObject,System.Single)">
            <summary>
            Creates a VolumeFade action for fading out a certain soundObject.
            </summary>
            <param name="soundObject">The soundObject to fade out.</param>
            <param name="time">The fading time.</param>
        </member>
        <member name="M:Purple.Sound.VolumeFade.HandleUpdate(System.Single)">
            <summary>
            The method that is called on every update.
            </summary>
            <param name="t">The time in the range of [0..1].</param>
        </member>
        <member name="M:Purple.Sound.VolumeFade.OnFinish">
            <summary>
            Finishe the current action.
            </summary>
            <remarks>
            The actions time is moved to one. Then it is updated and the the FinishedEvent 
            is fired.
            </remarks>
        </member>
        <member name="P:Purple.Sound.VolumeFade.StartVolume">
            <summary>
            The volume at the beginning of the action.
            </summary>
        </member>
        <member name="P:Purple.Sound.VolumeFade.EndVolume">
            <summary>
            The volume at the end of the action.
            </summary>
        </member>
        <member name="P:Purple.Sound.VolumeFade.StopSound">
            <summary>
            Flag that indicates if playing of the soundObject should be stopped at the end.
            </summary>
        </member>
        <member name="P:Purple.Sound.VolumeFade.TotalTime">
            <summary>
            Returns the total time of the <see cref="T:Purple.Actions.IAction"/>.
            </summary>
        </member>
        <member name="T:Purple.Testing.TestCallback">
            <summary>
            callBack for testMethods, not using the reflection mechanisme
            </summary>
        </member>
        <member name="T:Purple.Testing.PerformanceTestCase">
            <summary>
            abstract class for a PerformanceTestCase
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Testing.PerformanceTestData">
            <summary>
            struct filled with PerformanceTestData for every tested method
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="M:Purple.Testing.PerformanceTestData.#ctor(System.String)">
            <summary>
            standard constructor
            </summary>
            <param name="name">sets name of testCase</param>
        </member>
        <member name="F:Purple.Testing.PerformanceTestData.TestName">
            <summary>name of test (methodName)</summary>
        </member>
        <member name="F:Purple.Testing.PerformanceTestData.SingleTime">
            <summary>first test (has to be jitted most time)</summary>
        </member>
        <member name="F:Purple.Testing.PerformanceTestData.OverallTime">
            <summary>overall time for testing testNum times (without singleTime)</summary>
        </member>
        <member name="F:Purple.Testing.PerformanceTestData.TestNum">
            <summary>number of iterations</summary>
        </member>
        <member name="T:Purple.Testing.PerformanceTestMethodCallback">
            <summary>
            Delegate to inform application about performanceTest results
            </summary>  
        </member>
        <member name="T:Purple.Testing.PerformanceTester">
            <summary>
            class responsible for doing the actual performance testing by executing
            the PerformanceTestCases and sending info to TestOutput classes
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
            TODO: Refactoring! Code duplication in Tester
        </member>
        <member name="T:Purple.Testing.TesterBase">
            <summary>
            abstract base class for executing TestCases
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Testing.TesterBase.testsToDo">
            <summary>
            TestCases to test
            </summary>
        </member>
        <member name="M:Purple.Testing.TesterBase.Add(System.String[])">
            <summary>
            add some testCases
            </summary>
            <param name="testCases">names of testCases</param>
        </member>
        <member name="M:Purple.Testing.TesterBase.Add(System.String)">
            <summary>
            add another testCase class or an .exe or .dll assembly
            </summary>
            <param name="testCase">name of TestCase class</param>
            <exception cref="T:Purple.Testing.TestException">if testCase is invalid or assembly can't be loaded</exception>
        </member>
        <member name="M:Purple.Testing.TesterBase.Add(System.Reflection.Assembly)">
            <summary>
            adds all testCases from an Assembly
            </summary>
            <param name="assembly">to load TestCases from</param>    
        </member>
        <member name="M:Purple.Testing.TesterBase.Add(System.Type)">
            <summary>
            adds another testCase class
            </summary>
            <param name="testCase">type of TestCase</param>
        </member>
        <member name="M:Purple.Testing.TesterBase.Run">
            <summary>
            executes TestCases added before
            </summary>
        </member>
        <member name="M:Purple.Testing.TesterBase.Run(System.Type[])">
            <summary>
            executes the PerformanceTestCases
            </summary>
            <param name="testCases">list of performanceTestCases to test</param>
        </member>
        <member name="M:Purple.Testing.TesterBase.RunTest(Purple.Testing.TestCaseBase,System.Reflection.MethodInfo)">
            <summary>
            runs one single test
            </summary>
            <param name="tc">TestCase</param>
            <param name="m">Method to test</param>
        </member>
        <member name="P:Purple.Testing.TesterBase.TestCases">
            <summary>
            get collection of TestCases
            </summary>
        </member>
        <member name="E:Purple.Testing.TesterBase.beginTestCase">
            <summary>
            start of execution of next TestCase
            </summary>
        </member>
        <member name="E:Purple.Testing.TesterBase.finishedTestCase">
            <summary>
            finished execution of TestCase
            </summary>
        </member>
        <member name="M:Purple.Testing.PerformanceTester.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Testing.PerformanceTester.RunTest(Purple.Testing.TestCaseBase,System.Reflection.MethodInfo)">
            <summary>
            runs one single test		
            RunTest is not suited for very short methods, cause the overhead of invoking
            a method over the reflection mechanisme is too high
            </summary>
            <param name="tc">TestCase</param>
            <param name="m">Method to test</param>
        </member>
        <member name="M:Purple.Testing.PerformanceTester.RunTest(Purple.Testing.TestCallback)">
            <summary>
            runs one single test without using the reflection mechanisme
            The overhead is very low and therefore better suited for small methods	
            However this method doesn't reports results to connected objects like PerformanceTester			
            </summary>
            <param name="testMethod">method (delegate) to test</param>
            <returns>test results</returns>
        </member>
        <member name="P:Purple.Testing.PerformanceTester.Iterations">
            <summary>
            number of iterations for every testMethod
            </summary>
        </member>
        <member name="E:Purple.Testing.PerformanceTester.testMethod">
            <summary>
            event which is raised in case of every tested Method
            </summary>    
        </member>
        <member name="T:Purple.Testing.PerformanceTestForm">
            <summary>
            Summary description for PerformanceTestForm.
            </summary>
        </member>
        <member name="M:Purple.Testing.PerformanceTestForm.#ctor">
            <summary>
             standard constructor
            </summary>
        </member>
        <member name="M:Purple.Testing.PerformanceTestForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Purple.Testing.PerformanceTestForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Purple.Testing.PerformanceTestForm.Run">
            <summary>
            starts the testing process
            </summary>
        </member>
        <member name="P:Purple.Testing.PerformanceTestForm.Tester">
            <summary>
            Tester object assigned to PerformanceTestForm
            </summary>
        </member>
        <member name="T:Purple.Testing.TestCases.ExamplePerformanceTestCase">
            <summary>
            PerformanceTest example
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Testing.TestCases.ExampleTestCase">
            <summary>
            abstract class for a TestCase
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="T:Purple.Testing.TestData">
            <summary>
            struct filled with "Unit-Test" TestData for every tested method
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
        </member>
        <member name="F:Purple.Testing.TestData.MethodName">
            <summary>
            name of tested method of TestCase with TestCaseName
            </summary>
        </member>
        <member name="F:Purple.Testing.TestData.Successful">
            <summary>
            was tested method successful?
            </summary>
        </member>
        <member name="F:Purple.Testing.TestData.errorMessage">
            <summary>
            filled with info why method failed
            </summary>
        </member>
        <member name="T:Purple.Testing.TestMethodCallback">
            <summary>
            Delegate to inform application if testMethod was successful or not
            </summary>  
        </member>
        <member name="T:Purple.Testing.Tester">
            <summary>
            class responsible for doing the actual testing by executing
            the TestCases and sending info to TestOutput classes
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>  
            </remarks>
            TODO: Refactoring! Code duplication in PerformanceTester
        </member>
        <member name="M:Purple.Testing.Tester.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Testing.Tester.RunTest(Purple.Testing.TestCaseBase,System.Reflection.MethodInfo)">
            <summary>
            runs one single test
            </summary>
            <param name="tc">TestCase</param>
            <param name="m">Method to test</param>
        </member>
        <member name="M:Purple.Testing.Tester.cleanMessage(System.String)">
            <summary>
            removes lines like "at Purple.Testing.TestCase.Fail(String message) .."    
            from stack trace (cause exception is thrown in Purplesharp framework)
            </summary>
            <param name="message">stackTrace passed to method</param>
            <returns>filtered stack trace</returns>
        </member>
        <member name="E:Purple.Testing.Tester.testMethod">
            <summary>
            event which is raised in case of every tested Method
            </summary>    
        </member>
        <member name="T:Purple.Testing.TestCaseData">
            <summary>
            struct filled with TestData for every tested TestCase
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.6</para>  
            </remarks>
        </member>
        <member name="F:Purple.Testing.TestCaseData.TestCaseName">
            <summary>
            name of TestCase class
            </summary>
        </member>
        <member name="F:Purple.Testing.TestCaseData.TestCaseNum">
            <summary>
            number of TestCases to test
            </summary>
        </member>
        <member name="F:Purple.Testing.TestCaseData.MethodNum">
            <summary>
            number of methods to test
            </summary>
        </member>
        <member name="T:Purple.Testing.TestCaseCallback">
            <summary>
            Delegate to inform apllication if testing new TestCase
            </summary>
        </member>
        <member name="T:Purple.Testing.TestException">
            <summary>
            exception which is thrown in case of TestCase errors
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Testing.TestException.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Testing.TestException.#ctor(System.String)">
            <summary>
            constructor taking string describing reasons for exception
            </summary>
            <param name="description">Description why exception is thrown</param>
        </member>
        <member name="T:Purple.Testing.TestForm">
            <summary>
            Summary description for TestForm.
            </summary>
        </member>
        <member name="M:Purple.Testing.TestForm.#ctor">
            <summary>
             standard constructor
            </summary>
        </member>
        <member name="M:Purple.Testing.TestForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Purple.Testing.TestForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Purple.Testing.TestForm.Run">
            <summary>
            starts the testing process
            </summary>
        </member>
        <member name="P:Purple.Testing.TestForm.Tester">
            <summary>
            Tester object assigned to TestForm
            </summary>
        </member>
        <member name="T:Purple.Tools.Counter">
            <summary>
            A simple class wrapping the Win32 Performance Counter.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.3</para>
            This class accesses the performance counter of the cpu and returns therefore a very 
            precise a accurate time (in contrast to <see cref="T:System.DateTime"/> of C#).
            <para>The frequency of the performance counter may be different from cpu to cpu, that's why 
            you should use the provided methods to convert the tick count to time.</para> 
            </remarks>
        </member>
        <member name="M:Purple.Tools.Counter.CalcTime(System.UInt64)">
            <summary>
            Converts the tick count to a time value measured in ms.
            </summary>
            <param name="count">The tick count.</param>
            <returns>The time value measured in ms</returns>
        </member>
        <member name="M:Purple.Tools.Counter.CalcTime(System.UInt64,System.Int32)">
            <summary>
            Convert the tick count to time.
            </summary>
            <param name="count">The ticks to convert to time.</param>
            <param name="granularity">The desired granularity: 1 == seconds, 1000 == ms, ...</param>
            <returns>The passed time.</returns>
        </member>
        <member name="M:Purple.Tools.Counter.GetElapsedTime(System.UInt64)">
            <summary>
            Calculates the elapsed time in ms.
            </summary>
            <param name="startTime">The start time (in ms).</param>
            <returns>The time difference betwen now and the startTime. (in ms)</returns>
        </member>
        <member name="M:Purple.Tools.Counter.GetElapsedCount(System.UInt64)">
            <summary>
            Calculates the elapsed tick count.
            </summary>
            <param name="startCount">The start tick count.</param>
            <returns>The difference between now and the startCount.</returns>
        </member>
        <member name="M:Purple.Tools.Counter.GetElapsed(System.UInt64,System.UInt64)">
            <summary>
            Calculates the elapsed time between two time samples.
            </summary>
            <remarks>
            The unit of the two time stamps must be the same. The 
            returned time shows the same unit.
            </remarks>
            <param name="start">Start time stamp.</param>
            <param name="end">End time stamp.</param>
            <returns>The elapsed time or count.</returns>
        </member>
        <member name="P:Purple.Tools.Counter.Instance">
            <summary>
            Returns the singleton instance of the <c>Counter</c>.
            </summary>
        </member>
        <member name="P:Purple.Tools.Counter.Frequency">
            <summary>
            Returns the number of ticks per second of the performance counter.
            </summary>
        </member>
        <member name="P:Purple.Tools.Counter.Count">
            <summary>
            Returns the current tick count.
            </summary>
        </member>
        <member name="P:Purple.Tools.Counter.Time">
            <summary>
            Returns the current time in ms.
            </summary>
        </member>
        <member name="P:Purple.Tools.Counter.TimeMicro">
            <summary>
            Returns the current time in µs.
            </summary>
        </member>
        <member name="T:Purple.Tools.Dll">
            <summary>
            Dll helper stuff.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.Dll.Exists(System.String)">
            <summary>
            Tests if a native dll with a certain name exists.
            </summary>
            <param name="name">Name of dll to test for.</param>
            <returns>True if the dll exits.</returns>
        </member>
        <member name="M:Purple.Tools.Dll.LoadLibrary(System.String)">
            <summary>
            Loads a native dll.
            </summary>
            <param name="fileName">Dll to load.</param>
            <returns>Returns the handle to the dll or IntPtr.Zero.</returns>
        </member>
        <member name="M:Purple.Tools.Dll.FreeLibrary(System.IntPtr)">
            <summary>
            Unloads the native dll.
            </summary>
            <param name="library">The dll to unload.</param>
            <returns>True if unloading succeeded.</returns>
        </member>
        <member name="T:Purple.Tools.Garbage">
            <summary>
            Garbage bin, where objects to dispose can be added and then for
            example at shutdown, these objects can be disposed at once
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.Garbage.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Purple.Tools.Garbage.Add(System.IDisposable)">
            <summary>
            add disposable object to garbage
            </summary>
            <param name="obj">object to add</param>
        </member>
        <member name="M:Purple.Tools.Garbage.RemoveDispose(System.IDisposable)">
            <summary>
            removes an object from the internal list of objects to dispose
            </summary>
            <param name="obj">object to remove</param>
        </member>
        <member name="M:Purple.Tools.Garbage.Dispose">
            <summary>
            dispose all objects in garbage bin
            </summary>
        </member>
        <member name="T:Purple.Tools.IdProvider">
            <summary>
            class which can be used to retrieve unique ids	
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.IdProvider.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Tools.IdProvider.Release(System.Int32)">
            <summary>
            for future improvements
            </summary>
            <param name="id">it to release</param>
        </member>
        <member name="M:Purple.Tools.IdProvider.MoveNext">
            <summary>
            returns the current id and then moves to next free id
            </summary>
            <returns>current it</returns>
        </member>
        <member name="P:Purple.Tools.IdProvider.Current">
            <summary>
            returns the current id
            </summary>
        </member>
        <member name="T:Purple.Tools.KeepAlive">
            <summary>
            this class holds objects references to ensure that they aren't
            garbage collected. This can be useful for unmanaged DLLs were
            the gc doesn't know that objects still exist
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.KeepAlive.#ctor">
            <summary>
            standard constructor
            </summary>
        </member>
        <member name="M:Purple.Tools.KeepAlive.Add(System.Object)">
            <summary>
            adds an object which should be kept alive
            </summary>
            <param name="obj">object to keep alive</param>
        </member>
        <member name="M:Purple.Tools.KeepAlive.Remove(System.Object)">
            <summary>
            removes an object from collection
            </summary>
            <param name="obj">object to make destroyable</param>
        </member>
        <member name="M:Purple.Tools.KeepAlive.Contains(System.Object)">
            <summary>
            test if object is already added
            </summary>
            <param name="obj">object to test</param>
        </member>
        <member name="T:Purple.Tools.Memory">
            <summary>
            Some memory tools.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.7</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.Memory.BlockCopy(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies a certain value multiple times to a certain ptr.
            </summary>
            <param name="target">The target pointer.</param>
            <param name="value">The value to copy.</param>
            <param name="count">The number of values to copy.</param>
        </member>
        <member name="M:Purple.Tools.Memory.BlockCopy(System.IntPtr,System.Int64,System.Int32)">
            <summary>
            Copies a certain value multiple times to a certain ptr.
            </summary>
            <param name="target">The target pointer.</param>
            <param name="value">The value to copy.</param>
            <param name="count">The number of values to copy.</param>
        </member>
        <member name="M:Purple.Tools.Memory.BlockCopy(System.Array,System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies a certain memory block to another block.
            </summary>
            <param name="source">The source array.</param>
            <param name="sourceOffset">The source offset in bytes.</param>
            <param name="target">The target memory pointer.</param>
            <param name="targetOffset">The target offset in bytes.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="M:Purple.Tools.Memory.BlockCopy(System.IntPtr,System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies a certain memory block to another block.
            </summary>
            <param name="source">The source memory pointer.</param>
            <param name="sourceOffset">The source offset in bytes.</param>
            <param name="target">The target memory pointer.</param>
            <param name="targetOffset">The target offset in bytes.</param>
            <param name="count">The number of bytes to copy.</param>
        </member>
        <member name="T:Purple.Tools.PropertySet">
            <summary>
            Properties are used to store configurations which are used by
            other classes
            PropertySets can contain other PropertySets and arbitrary objects
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.PropertySet.#ctor(System.String)">
            <summary>
            collection of properties    
            </summary>
            <param name="name">
            name of PropertySet leaf in hierarchy (e.g. Resolution) => Root.DirectX.Resolution
            </param>
        </member>
        <member name="M:Purple.Tools.PropertySet.IsEmpty">
            <summary>
            to test if there are any new PropertySet branches or objects
            </summary>
            <returns>true if there no new branches and objects</returns>
        </member>
        <member name="M:Purple.Tools.PropertySet.Contains(System.String)">
            <summary>
            test if PropertySet contains a certain entry (object or PropertySet)
            </summary>
            <param name="key">key name of entry</param>
            <returns>true if entry is contained</returns>
        </member>
        <member name="M:Purple.Tools.PropertySet.Remove(System.String)">
            <summary>
            remove a certain entry
            </summary>
            <param name="key">key name of entry</param>
        </member>
        <member name="M:Purple.Tools.PropertySet.IsPropertySet(System.String)">
            <summary>
            tests if entry is a new PropertySet object
            </summary>
            <param name="key">key name of entry</param>
            <returns>true if it is a property object</returns>
        </member>
        <member name="M:Purple.Tools.PropertySet.IsObject(System.String)">
            <summary>
            tests if entry is an arbitrary object
            </summary>
            <param name="key">key name of entry</param>
            <returns>true if it is an arbitrary object</returns>
        </member>
        <member name="M:Purple.Tools.PropertySet.Get(System.String)">
            <summary>
            get the entry specified by the key
            </summary>
            <param name="key">key name of entry</param>
            <returns>entry specified by key</returns>
        </member>
        <member name="M:Purple.Tools.PropertySet.Set(System.String,System.Object)">
            <summary>
            set the entry specififed by the key
            </summary>
            <param name="key">key name of entry</param>
            <param name="obj">entry to set</param>
        </member>
        <member name="P:Purple.Tools.PropertySet.Item(System.String)">
            <summary>
            indexer for setting and getting an entry with a certain key
            </summary>
        </member>
        <member name="T:Purple.Tools.PURL">
            <summary>
            Purple Uniform Ressource Locator
            Helper class to work with Purple URLs like Root.Graphics.Resolution  
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.PURL.#ctor(System.String)">
            <summary>
            initializes Purple Uniform Resource Locater with a given url
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:Purple.Tools.PURL.IsComplex">
            <summary>
            if key consists of more than one keys
            e.g. Root.Graphics.Resolution
            </summary>    
            <returns>true if it is a complex PURL</returns>
        </member>
        <member name="M:Purple.Tools.PURL.GetFirstPart">
            <summary>
            returns first part of complex PURL
            </summary>    
            <returns>first part of complex key</returns>
        </member>
        <member name="M:Purple.Tools.PURL.GetWithoutFirstPart">
            <summary>
            returns the PURL without the first part
            </summary>
            <returns>PURL without the first part</returns>
        </member>
        <member name="T:Purple.Tools.RawSerializer">
            <summary>
            class to load data directly from a stream into structs
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
              <para>Last Update: 0.6</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.RawSerializer.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            loads data from a stream into a certain type
            </summary>
            <param name="stream">stream to load data from</param>
            <param name="type">to fill with data</param>
            <returns>filled object of type with data from stream</returns>
        </member>
        <member name="M:Purple.Tools.RawSerializer.DeserializeArray(System.IO.Stream,System.Type,System.Int32)">
            <summary>
            loads data from a stream into an array of certain types
            </summary>
            <param name="stream">stream to load data from</param>
            <param name="type">to fill with data</param>
            <param name="count">number of instances to create</param>
            <returns>filled objects of type with data from stream</returns>
        </member>
        <member name="M:Purple.Tools.RawSerializer.Serialize(System.Object)">
            <summary>
            returns the rawData of an object
            </summary>
            <param name="obj">object to get data from</param>
            <returns>rawData</returns>
        </member>
        <member name="T:Purple.Tools.Registry">
            <summary>
            registry providing new ids, ability to register objects by id
            and name ...
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.Registry.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Purple.Tools.Registry.Register(System.Object)">
            <summary>
            register an object
            </summary>
            <param name="obj">object to register</param>
            <returns>id of registered object</returns>
        </member>
        <member name="M:Purple.Tools.Registry.UnRegister(System.Object)">
            <summary>
            unregisters an id
            </summary>
            <param name="obj">object to unregister</param>
        </member>
        <member name="M:Purple.Tools.Registry.GetId(System.Object)">
            <summary>
            returns id of object
            </summary>
            <param name="obj">object to return id for</param>
            <returns>id of registered object</returns>
        </member>
        <member name="M:Purple.Tools.Registry.GetObject(System.Int32)">
            <summary>
            returns object for a given id
            </summary>
            <param name="id">id of object</param>
            <returns></returns>
        </member>
        <member name="P:Purple.Tools.Registry.Instance">
            <summary>
            returns global instance of registry
            there may be other instances for other tasks....
            </summary>
        </member>
        <member name="T:Purple.Tools.StreamHelper">
            <summary>
            Class that contains some methods that simplify working with streams.
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.72</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.StreamHelper.Copy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies the content of one stream to another.
            </summary>
            <param name="from">The stream containing the source data.</param>
            <param name="to">The destination stream.</param>
            <param name="size">The size of the temporary buffer to use.</param>
        </member>
        <member name="M:Purple.Tools.StreamHelper.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the content of one stream to another (uses a 64kb temporary buffer).
            </summary>
            <param name="from">The stream containing the source data.</param>
            <param name="to">The destination stream.</param>
        </member>
        <member name="T:Purple.Tools.StringHelper">
            <summary>
            Some helper methods for easier string handling  
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.StringHelper.RemoveLine(System.String,System.String)">
            <summary>
            removes one line beginning with a certain string from message
            </summary>
            <param name="message">to return from</param>
            <param name="line">string with which line to be removed begins</param>
            <returns></returns>
        </member>
        <member name="M:Purple.Tools.StringHelper.GuiNewLines(System.String)">
            <summary>
            return \n by Environment.NewLine
            because \n is shown as box in texBoxes!!!
            </summary>
            <param name="message">input text</param>
            <returns>cleaned text</returns>
        </member>
        <member name="M:Purple.Tools.StringHelper.Convert(System.Byte[])">
            <summary>
            converts a c-style string to a C# string
            </summary>
            <param name="cString">array of bytes - null terminated</param>
            <returns>C# string</returns>
        </member>
        <member name="M:Purple.Tools.StringHelper.ToStream(System.String)">
            <summary>
            creates a stream object from a string
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Purple.Tools.SubArray">
            <summary>
            Subarray is a sub part of an array
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.SubArray.#ctor(System.Array)">
            <summary>
            constructor
            </summary>
            <param name="array">parent array to use</param>
        </member>
        <member name="M:Purple.Tools.SubArray.#ctor(System.Array,System.Int32,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="array">parent array to use</param>
            <param name="offset">to start in parent array</param>
            <param name="length">length of subArray</param>
        </member>
        <member name="P:Purple.Tools.SubArray.Length">
            <summary>
            length of subArray
            </summary>
        </member>
        <member name="P:Purple.Tools.SubArray.Offset">
            <summary>
            offset of subArray
            </summary>
        </member>
        <member name="P:Purple.Tools.SubArray.Array">
            <summary>
            whole array
            </summary>
        </member>
        <member name="P:Purple.Tools.SubArray.Item(System.Int32)">
            <summary>
            offseted indexer
            </summary>
        </member>
        <member name="T:Purple.Tools.TypeComparer">
            <summary>
            compares two types
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.TypeComparer.Compare(System.Object,System.Object)">
            <summary>
            compare two types
            </summary>
            <param name="x">first type</param>
            <param name="y">second type</param>
            <returns></returns>
        </member>
        <member name="T:Purple.Tools.TypeRegistry">
            <summary>
            registers types of loaded assemblys by name
            and stores the assemblies by typeName
            </summary>
            <remarks>
              <para>Author: Markus Wöß</para>
              <para>Since: 0.1</para>
            </remarks>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.Init">
            <summary>
            initializes the TypeRegistry
            </summary>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.Create(System.String)">
            <summary>
            creates an instance of the class with the given typeName
            </summary>
            <param name="typeName">name of type to create instance for</param>
            <returns>a new object or null if failed</returns>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.GetInstance(System.String)">
            <summary>
            calls GetInstance of a certain type
            </summary>
            <param name="typeName">name of type</param>
            <returns>returns instance of object</returns>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.GetType(System.String)">
            <summary>
            gets type by typeName
            </summary>
            <param name="typeName">to search for</param>
            <returns>type or null if not found</returns>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.GetAssembly(System.String)">
            <summary>
            returns the assembly where given type is defined
            </summary>
            <param name="typeName">name of type</param>
            <returns>assembly where given type is defined</returns>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.Add(System.Reflection.Assembly)">
            <summary>
            adds a type to the type registry which isn't referenced by the executing assembly
            Thanks to Andre Loker
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Purple.Tools.TypeRegistry.AddType(System.Type)">
            <summary>
            add a type to the registry 
            </summary>
            <param name="type">type to add</param>
        </member>
    </members>
</doc>
